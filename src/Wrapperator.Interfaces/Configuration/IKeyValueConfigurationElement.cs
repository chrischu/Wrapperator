//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.Configuration
{
  
  
  /// <summary>Represents a configuration element that contains a key/value pair. </summary>
  public interface IKeyValueConfigurationElement
  {
    
    /// <summary>Provides access to the wrapped instance. Should not be used most of the time.</summary>
    System.Configuration.KeyValueConfigurationElement _KeyValueConfigurationElement
    {
      get;
    }
    
    string Key
    {
      get;
    }
    
    string Value
    {
      get;
      set;
    }
    
    Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAttributes
    {
      get;
    }
    
    Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAllAttributesExcept
    {
      get;
    }
    
    Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockElements
    {
      get;
    }
    
    Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAllElementsExcept
    {
      get;
    }
    
    bool LockItem
    {
      get;
      set;
    }
    
    Wrapperator.Interfaces.Configuration.IElementInformation ElementInformation
    {
      get;
    }
    
    Wrapperator.Interfaces.Configuration.IConfiguration CurrentConfiguration
    {
      get;
    }
    
    /// <summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" /> object is read-only.</summary>
    /// <returns>true if the <see cref="T:System.Configuration.ConfigurationElement" /> object is read-only; otherwise, false.</returns>
    bool IsReadOnly();
  }
}
