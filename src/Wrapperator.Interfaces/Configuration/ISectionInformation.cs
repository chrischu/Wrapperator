//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.Configuration
{
  
  
  /// <summary>Contains metadata about an individual section within the configuration hierarchy. This class cannot be inherited.</summary>
  public interface ISectionInformation
  {
    
    string SectionName
    {
      get;
    }
    
    string Name
    {
      get;
    }
    
    System.Configuration.ConfigurationAllowDefinition AllowDefinition
    {
      get;
      set;
    }
    
    System.Configuration.ConfigurationAllowExeDefinition AllowExeDefinition
    {
      get;
      set;
    }
    
    System.Configuration.OverrideMode OverrideModeDefault
    {
      get;
      set;
    }
    
    bool AllowLocation
    {
      get;
      set;
    }
    
    bool AllowOverride
    {
      get;
      set;
    }
    
    System.Configuration.OverrideMode OverrideMode
    {
      get;
      set;
    }
    
    System.Configuration.OverrideMode OverrideModeEffective
    {
      get;
    }
    
    string ConfigSource
    {
      get;
      set;
    }
    
    bool InheritInChildApplications
    {
      get;
      set;
    }
    
    bool IsDeclared
    {
      get;
    }
    
    bool IsDeclarationRequired
    {
      get;
    }
    
    bool IsLocked
    {
      get;
    }
    
    bool IsProtected
    {
      get;
    }
    
    Wrapperator.Interfaces.Configuration.IProtectedConfigurationProvider ProtectionProvider
    {
      get;
    }
    
    bool RestartOnExternalChanges
    {
      get;
      set;
    }
    
    bool RequirePermission
    {
      get;
      set;
    }
    
    string Type
    {
      get;
      set;
    }
    
    bool ForceSave
    {
      get;
      set;
    }
    
    /// <summary>Forces the associated configuration section to appear in the configuration file.</summary>
    void ForceDeclaration();
    
    /// <summary>Forces the associated configuration section to appear in the configuration file, or removes an existing section from the configuration file.</summary>
    /// <param name="force">true if the associated section should be written in the configuration file; otherwise, false.</param>
    /// <exception cref="T:System.Configuration.ConfigurationErrorsException">
    ///  <paramref name="force" /> is true and the associated section cannot be exported to the child configuration file, or it is undeclared.</exception>
    void ForceDeclaration(bool force);
    
    /// <summary>Marks a configuration section for protection. </summary>
    /// <param name="protectionProvider">The name of the protection provider to use.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Configuration.SectionInformation.AllowLocation" /> property is set to false.- or -The target section is already a protected data section.</exception>
    void ProtectSection(string protectionProvider);
    
    /// <summary>Removes the protected configuration encryption from the associated configuration section.</summary>
    void UnprotectSection();
    
    /// <summary>Gets the configuration section that contains the configuration section associated with this object.</summary>
    /// <returns>The configuration section that contains the <see cref="T:System.Configuration.ConfigurationSection" /> that is associated with this <see cref="T:System.Configuration.SectionInformation" /> object.</returns>
    /// <exception cref="T:System.InvalidOperationException">The method is invoked from a parent section.</exception>
    Wrapperator.Interfaces.Configuration.IConfigurationSection GetParentSection();
    
    /// <summary>Returns an XML node object that represents the associated configuration-section object.</summary>
    /// <returns>The XML representation for this configuration section.</returns>
    /// <exception cref="T:System.InvalidOperationException">This configuration object is locked and cannot be edited.</exception>
    string GetRawXml();
    
    /// <summary>Sets the object to an XML representation of the associated configuration section within the configuration file.</summary>
    /// <param name="rawXml">The XML to use.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="rawXml" /> is null.</exception>
    void SetRawXml(string rawXml);
    
    /// <summary>Causes the associated configuration section to inherit all its values from the parent section.</summary>
    /// <exception cref="T:System.InvalidOperationException">This method cannot be called outside editing mode.</exception>
    void RevertToParent();
  }
}
