//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.Xml
{
  
  
  /// <summary>Represents an XML document.</summary>
  public partial interface IXmlDocument
  {
    
    /// <summary>Creates a duplicate of this node.</summary>
    /// <returns>The cloned XmlDocument node.</returns>
    /// <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    System.Xml.XmlNode CloneNode(bool deep);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlDocument.Name" />.</summary>
    /// <returns>The new XmlAttribute.</returns>
    /// <param name="name">The qualified name of the attribute. If the name contains a colon, the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the first colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name following the first colon. The <see cref="P:System.Xml.XmlNode.NamespaceURI" /> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/. </param>
    System.Xml.XmlAttribute CreateAttribute(string name);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
    /// <returns>The new XmlAttribute.</returns>
    /// <param name="qualifiedName">The qualified name of the attribute. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. </param>
    /// <param name="namespaceURI">The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/. </param>
    System.Xml.XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
    /// <returns>The new XmlAttribute.</returns>
    /// <param name="prefix">The prefix of the attribute (if any). String.Empty and null are equivalent. </param>
    /// <param name="localName">The local name of the attribute. </param>
    /// <param name="namespaceURI">The namespace URI of the attribute (if any). String.Empty and null are equivalent. If <paramref name="prefix" /> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown. </param>
    System.Xml.XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlCDataSection" /> containing the specified data.</summary>
    /// <returns>The new XmlCDataSection.</returns>
    /// <param name="data">The content of the new XmlCDataSection. </param>
    System.Xml.XmlCDataSection CreateCDataSection(string data);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlComment" /> containing the specified data.</summary>
    /// <returns>The new XmlComment.</returns>
    /// <param name="data">The content of the new XmlComment. </param>
    System.Xml.XmlComment CreateComment(string data);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlDocumentFragment" />.</summary>
    /// <returns>The new XmlDocumentFragment.</returns>
    Wrapperator.Interfaces.Xml.IXmlDocumentFragment CreateDocumentFragment();
    
    /// <summary>Returns a new <see cref="T:System.Xml.XmlDocumentType" /> object.</summary>
    /// <returns>The new XmlDocumentType.</returns>
    /// <param name="name">Name of the document type. </param>
    /// <param name="publicId">The public identifier of the document type or null. You can specify a public URI and also a system identifier to identify the location of the external DTD subset.</param>
    /// <param name="systemId">The system identifier of the document type or null. Specifies the URL of the file location for the external DTD subset.</param>
    /// <param name="internalSubset">The DTD internal subset of the document type or null. </param>
    System.Xml.XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset);
    
    /// <summary>Creates an element with the specified name.</summary>
    /// <returns>The new XmlElement.</returns>
    /// <param name="name">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
    System.Xml.XmlElement CreateElement(string name);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlElement" /> with the qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
    /// <returns>The new XmlElement.</returns>
    /// <param name="qualifiedName">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
    /// <param name="namespaceURI">The namespace URI of the element. </param>
    System.Xml.XmlElement CreateElement(string qualifiedName, string namespaceURI);
    
    /// <summary>Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
    /// <returns>The new <see cref="T:System.Xml.XmlElement" />.</returns>
    /// <param name="prefix">The prefix of the new element (if any). String.Empty and null are equivalent. </param>
    /// <param name="localName">The local name of the new element. </param>
    /// <param name="namespaceURI">The namespace URI of the new element (if any). String.Empty and null are equivalent. </param>
    System.Xml.XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</summary>
    /// <returns>The new XmlEntityReference.</returns>
    /// <param name="name">The name of the entity reference. </param>
    /// <exception cref="T:System.ArgumentException">The name is invalid (for example, names starting with'#' are invalid.) </exception>
    System.Xml.XmlEntityReference CreateEntityReference(string name);
    
    /// <summary>Creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document.</summary>
    /// <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
    System.Xml.XPath.XPathNavigator CreateNavigator();
    
    /// <summary>Creates a <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
    /// <returns>The new XmlNode.</returns>
    /// <param name="type">The XmlNodeType of the new node. </param>
    /// <param name="prefix">The prefix of the new node. </param>
    /// <param name="name">The local name of the new node. </param>
    /// <param name="namespaceURI">The namespace URI of the new node. </param>
    /// <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name. </exception>
    System.Xml.XmlNode CreateNode(System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified node type, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
    /// <returns>The new XmlNode.</returns>
    /// <param name="nodeTypeString">String version of the <see cref="T:System.Xml.XmlNodeType" /> of the new node. This parameter must be one of the values listed in the table below. </param>
    /// <param name="name">The qualified name of the new node. If the name contains a colon, it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components. </param>
    /// <param name="namespaceURI">The namespace URI of the new node. </param>
    /// <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name; or <paramref name="nodeTypeString" /> is not one of the strings listed below. </exception>
    System.Xml.XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
    /// <returns>The new XmlNode.</returns>
    /// <param name="type">The XmlNodeType of the new node. </param>
    /// <param name="name">The qualified name of the new node. If the name contains a colon then it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components. </param>
    /// <param name="namespaceURI">The namespace URI of the new node. </param>
    /// <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name. </exception>
    System.Xml.XmlNode CreateNode(System.Xml.XmlNodeType type, string name, string namespaceURI);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlProcessingInstruction" /> with the specified name and data.</summary>
    /// <returns>The new XmlProcessingInstruction.</returns>
    /// <param name="target">The name of the processing instruction. </param>
    /// <param name="data">The data for the processing instruction. </param>
    System.Xml.XmlProcessingInstruction CreateProcessingInstruction(string target, string data);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlSignificantWhitespace" /> node.</summary>
    /// <returns>A new XmlSignificantWhitespace node.</returns>
    /// <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
    System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(string text);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlText" /> with the specified text.</summary>
    /// <returns>The new XmlText node.</returns>
    /// <param name="text">The text for the Text node. </param>
    System.Xml.XmlText CreateTextNode(string text);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlWhitespace" /> node.</summary>
    /// <returns>A new XmlWhitespace node.</returns>
    /// <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
    System.Xml.XmlWhitespace CreateWhitespace(string text);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlDeclaration" /> node with the specified values.</summary>
    /// <returns>The new XmlDeclaration node.</returns>
    /// <param name="version">The version must be "1.0". </param>
    /// <param name="encoding">The value of the encoding attribute. This is the encoding that is used when you save the <see cref="T:System.Xml.XmlDocument" /> to a file or a stream; therefore, it must be set to a string supported by the <see cref="T:System.Text.Encoding" /> class, otherwise <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> fails. If this is null or String.Empty, the Save method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.Note: If the XmlDocument is saved to either a <see cref="T:System.IO.TextWriter" /> or an <see cref="T:System.Xml.XmlTextWriter" />, this encoding value is discarded. Instead, the encoding of the TextWriter or the XmlTextWriter is used. This ensures that the XML written out can be read back using the correct encoding. </param>
    /// <param name="standalone">The value must be either "yes" or "no". If this is null or String.Empty, the Save method does not write a standalone attribute on the XML declaration. </param>
    /// <exception cref="T:System.ArgumentException">The values of <paramref name="version" /> or <paramref name="standalone" /> are something other than the ones specified above. </exception>
    System.Xml.XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone);
    
    /// <summary>Gets the <see cref="T:System.Xml.XmlElement" /> with the specified ID.</summary>
    /// <returns>The XmlElement with the matching ID or null if no matching element is found.</returns>
    /// <param name="elementId">The attribute ID to match. </param>
    System.Xml.XmlElement GetElementById(string elementId);
    
    /// <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.Name" />.</summary>
    /// <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes. If no nodes match <paramref name="name" />, the returned collection will be empty.</returns>
    /// <param name="name">The qualified name to match. It is matched against the Name property of the matching node. The special value "*" matches all tags. </param>
    System.Xml.XmlNodeList GetElementsByTagName(string name);
    
    /// <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
    /// <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes. If no nodes match the specified <paramref name="localName" /> and <paramref name="namespaceURI" />, the returned collection will be empty.</returns>
    /// <param name="localName">The LocalName to match. The special value "*" matches all tags. </param>
    /// <param name="namespaceURI">NamespaceURI to match. </param>
    System.Xml.XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    
    /// <summary>Imports a node from another document to the current document.</summary>
    /// <returns>The imported <see cref="T:System.Xml.XmlNode" />.</returns>
    /// <param name="node">The node being imported. </param>
    /// <param name="deep">true to perform a deep clone; otherwise, false. </param>
    /// <exception cref="T:System.InvalidOperationException">Calling this method on a node type which cannot be imported. </exception>
    System.Xml.XmlNode ImportNode(System.Xml.XmlNode node, bool deep);
    
    /// <summary>Loads the XML document from the specified URL.</summary>
    /// <param name="filename">URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).</param>
    /// <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, a <see cref="T:System.IO.FileNotFoundException" /> is raised. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="filename" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="filename" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">
    ///  <paramref name="filename" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="filename" /> specified a directory.-or- The caller does not have the required permission. </exception>
    /// <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="filename" /> was not found. </exception>
    /// <exception cref="T:System.NotSupportedException">
    ///  <paramref name="filename" /> is in an invalid format. </exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    void Load(string filename);
    
    /// <summary>Loads the XML document from the specified stream.</summary>
    /// <param name="inStream">The stream containing the XML document to load. </param>
    /// <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, a <see cref="T:System.IO.FileNotFoundException" /> is raised. </exception>
    void Load(System.IO.Stream inStream);
    
    /// <summary>Loads the XML document from the specified <see cref="T:System.IO.TextReader" />.</summary>
    /// <param name="txtReader">The TextReader used to feed the XML data into the document. </param>
    /// <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    void Load(System.IO.TextReader txtReader);
    
    /// <summary>Loads the XML document from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
    /// <param name="reader">The XmlReader used to feed the XML data into the document. </param>
    /// <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    void Load(System.Xml.XmlReader reader);
    
    /// <summary>Loads the XML document from the specified string.</summary>
    /// <param name="xml">String containing the XML document to load. </param>
    /// <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    void LoadXml(string xml);
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlNode" /> object based on the information in the <see cref="T:System.Xml.XmlReader" />. The reader must be positioned on a node or attribute.</summary>
    /// <returns>The new XmlNode or null if no more nodes exist.</returns>
    /// <param name="reader">The XML source </param>
    /// <exception cref="T:System.NullReferenceException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). </exception>
    System.Xml.XmlNode ReadNode(System.Xml.XmlReader reader);
    
    /// <summary>Saves the XML document to the specified file.</summary>
    /// <param name="filename">The location of the file where you want to save the document. </param>
    /// <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    void Save(string filename);
    
    /// <summary>Saves the XML document to the specified stream.</summary>
    /// <param name="outStream">The stream to which you want to save. </param>
    /// <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    void Save(System.IO.Stream outStream);
    
    /// <summary>Saves the XML document to the specified <see cref="T:System.IO.TextWriter" />.</summary>
    /// <param name="writer">The TextWriter to which you want to save. </param>
    /// <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    void Save(System.IO.TextWriter writer);
    
    /// <summary>Saves the XML document to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="w">The XmlWriter to which you want to save. </param>
    /// <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    void Save(System.Xml.XmlWriter w);
    
    /// <summary>Validates the <see cref="T:System.Xml.XmlDocument" /> against the XML Schema Definition Language (XSD) schemas contained in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property.</summary>
    /// <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object that receives information about schema validation warnings and errors.</param>
    /// <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation event occurred and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object was specified.</exception>
    void Validate(System.Xml.Schema.ValidationEventHandler validationEventHandler);
    
    /// <summary>Validates the <see cref="T:System.Xml.XmlNode" /> object specified against the XML Schema Definition Language (XSD) schemas in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property.</summary>
    /// <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object that receives information about schema validation warnings and errors.</param>
    /// <param name="nodeToValidate">The <see cref="T:System.Xml.XmlNode" /> object created from an <see cref="T:System.Xml.XmlDocument" /> to validate.</param>
    /// <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlNode" /> object parameter was not created from an <see cref="T:System.Xml.XmlDocument" />.</exception>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlNode" /> object parameter is not an element, attribute, document fragment, or the root node.</exception>
    /// <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation event occurred and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object was specified.</exception>
    void Validate(System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);
    
    /// <summary>Saves all the children of the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="xw">The XmlWriter to which you want to save. </param>
    void WriteContentTo(System.Xml.XmlWriter xw);
    
    /// <summary>Saves the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="w">The XmlWriter to which you want to save. </param>
    void WriteTo(System.Xml.XmlWriter w);
  }
}
