//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.Xml
{
  
  
  /// <summary>Represents a reader that provides fast, noncached, forward-only access to XML data.</summary>
  public interface IXmlReader : System.IDisposable
  {
    
    System.Xml.XmlReaderSettings Settings
    {
      get;
    }
    
    System.Xml.XmlNodeType NodeType
    {
      get;
    }
    
    string Name
    {
      get;
    }
    
    string LocalName
    {
      get;
    }
    
    string NamespaceURI
    {
      get;
    }
    
    string Prefix
    {
      get;
    }
    
    bool HasValue
    {
      get;
    }
    
    string Value
    {
      get;
    }
    
    int Depth
    {
      get;
    }
    
    string BaseURI
    {
      get;
    }
    
    bool IsEmptyElement
    {
      get;
    }
    
    bool IsDefault
    {
      get;
    }
    
    char QuoteChar
    {
      get;
    }
    
    System.Xml.XmlSpace XmlSpace
    {
      get;
    }
    
    string XmlLang
    {
      get;
    }
    
    System.Xml.Schema.IXmlSchemaInfo SchemaInfo
    {
      get;
    }
    
    Wrapperator.Interfaces.IType ValueType
    {
      get;
    }
    
    int AttributeCount
    {
      get;
    }
    
    string this[int i]
    {
      get;
    }
    
    string this[string name]
    {
      get;
    }
    
    string this[string name, string namespaceURI]
    {
      get;
    }
    
    bool EOF
    {
      get;
    }
    
    System.Xml.ReadState ReadState
    {
      get;
    }
    
    System.Xml.XmlNameTable NameTable
    {
      get;
    }
    
    bool CanResolveEntity
    {
      get;
    }
    
    bool CanReadBinaryContent
    {
      get;
    }
    
    bool CanReadValueChunk
    {
      get;
    }
    
    bool HasAttributes
    {
      get;
    }
    
    /// <summary>Reads the text content at the current position as an <see cref="T:System.Object" />.</summary>
    /// <returns>The text content as the most appropriate common language runtime (CLR) object.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    object ReadContentAsObject();
    
    /// <summary>Reads the text content at the current position as a Boolean.</summary>
    /// <returns>The text content as a <see cref="T:System.Boolean" /> object.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool ReadContentAsBoolean();
    
    /// <summary>Reads the text content at the current position as a <see cref="T:System.DateTime" /> object.</summary>
    /// <returns>The text content as a <see cref="T:System.DateTime" /> object.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    Wrapperator.Interfaces.IDateTime ReadContentAsDateTime();
    
    /// <summary>Reads the text content at the current position as a <see cref="T:System.DateTimeOffset" /> object.</summary>
    /// <returns>The text content as a <see cref="T:System.DateTimeOffset" /> object.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    System.DateTimeOffset ReadContentAsDateTimeOffset();
    
    /// <summary>Reads the text content at the current position as a double-precision floating-point number.</summary>
    /// <returns>The text content as a double-precision floating-point number.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    double ReadContentAsDouble();
    
    /// <summary>Reads the text content at the current position as a single-precision floating point number.</summary>
    /// <returns>The text content at the current position as a single-precision floating point number.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    float ReadContentAsFloat();
    
    /// <summary>Reads the text content at the current position as a <see cref="T:System.Decimal" /> object.</summary>
    /// <returns>The text content at the current position as a <see cref="T:System.Decimal" /> object.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    decimal ReadContentAsDecimal();
    
    /// <summary>Reads the text content at the current position as a 32-bit signed integer.</summary>
    /// <returns>The text content as a 32-bit signed integer.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    int ReadContentAsInt();
    
    /// <summary>Reads the text content at the current position as a 64-bit signed integer.</summary>
    /// <returns>The text content as a 64-bit signed integer.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    long ReadContentAsLong();
    
    /// <summary>Reads the text content at the current position as a <see cref="T:System.String" /> object.</summary>
    /// <returns>The text content as a <see cref="T:System.String" /> object.</returns>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.FormatException">The string format is not valid.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadContentAsString();
    
    /// <summary>Reads the content as an object of the type specified.</summary>
    /// <returns>The concatenated text content or attribute value converted to the requested type.</returns>
    /// <param name="returnType">The type of the value to be returned.Note   With the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
    /// <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string.This value can be null.</param>
    /// <exception cref="T:System.FormatException">The content is not in the correct format for the target type.</exception>
    /// <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="returnType" /> value is null.</exception>
    /// <exception cref="T:System.InvalidOperationException">The current node is not a supported node type. See the table below for details.</exception>
    /// <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    object ReadContentAs(Wrapperator.Interfaces.IType returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);
    
    /// <summary>Reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
    /// <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    object ReadElementContentAsObject();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
    /// <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    object ReadElementContentAsObject(string localName, string namespaceURI);
    
    /// <summary>Reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</summary>
    /// <returns>The element content as a <see cref="T:System.Boolean" /> object.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Boolean" /> object.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool ReadElementContentAsBoolean();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</summary>
    /// <returns>The element content as a <see cref="T:System.Boolean" /> object.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    
    /// <summary>Reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</summary>
    /// <returns>The element content as a <see cref="T:System.DateTime" /> object.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.DateTime" /> object.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    Wrapperator.Interfaces.IDateTime ReadElementContentAsDateTime();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</summary>
    /// <returns>The element contents as a <see cref="T:System.DateTime" /> object.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    Wrapperator.Interfaces.IDateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    
    /// <summary>Reads the current element and returns the contents as a double-precision floating-point number.</summary>
    /// <returns>The element content as a double-precision floating-point number.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a double-precision floating-point number.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    double ReadElementContentAsDouble();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</summary>
    /// <returns>The element content as a double-precision floating-point number.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    double ReadElementContentAsDouble(string localName, string namespaceURI);
    
    /// <summary>Reads the current element and returns the contents as single-precision floating-point number.</summary>
    /// <returns>The element content as a single-precision floating point number.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    float ReadElementContentAsFloat();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</summary>
    /// <returns>The element content as a single-precision floating point number.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    float ReadElementContentAsFloat(string localName, string namespaceURI);
    
    /// <summary>Reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</summary>
    /// <returns>The element content as a <see cref="T:System.Decimal" /> object.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal" />.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    decimal ReadElementContentAsDecimal();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</summary>
    /// <returns>The element content as a <see cref="T:System.Decimal" /> object.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal" />.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    
    /// <summary>Reads the current element and returns the contents as a 32-bit signed integer.</summary>
    /// <returns>The element content as a 32-bit signed integer.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    int ReadElementContentAsInt();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</summary>
    /// <returns>The element content as a 32-bit signed integer.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    int ReadElementContentAsInt(string localName, string namespaceURI);
    
    /// <summary>Reads the current element and returns the contents as a 64-bit signed integer.</summary>
    /// <returns>The element content as a 64-bit signed integer.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    long ReadElementContentAsLong();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</summary>
    /// <returns>The element content as a 64-bit signed integer.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    long ReadElementContentAsLong(string localName, string namespaceURI);
    
    /// <summary>Reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
    /// <returns>The element content as a <see cref="T:System.String" /> object.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String" /> object.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadElementContentAsString();
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
    /// <returns>The element content as a <see cref="T:System.String" /> object.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String" /> object.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadElementContentAsString(string localName, string namespaceURI);
    
    /// <summary>Reads the element content as the requested type.</summary>
    /// <returns>The element content converted to the requested typed object.</returns>
    /// <param name="returnType">The type of the value to be returned.Note   With the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
    /// <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    object ReadElementContentAs(Wrapperator.Interfaces.IType returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);
    
    /// <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</summary>
    /// <returns>The element content converted to the requested typed object.</returns>
    /// <param name="returnType">The type of the value to be returned.Note   With the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
    /// <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
    /// <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
    /// <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    /// <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    /// <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    object ReadElementContentAs(Wrapperator.Interfaces.IType returnType, System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    
    /// <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
    /// <returns>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned.</returns>
    /// <param name="name">The qualified name of the attribute.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string GetAttribute(string name);
    
    /// <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
    /// <returns>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned. This method does not move the reader.</returns>
    /// <param name="name">The local name of the attribute.</param>
    /// <param name="namespaceURI">The namespace URI of the attribute.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string GetAttribute(string name, string namespaceURI);
    
    /// <summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
    /// <returns>The value of the specified attribute. This method does not move the reader.</returns>
    /// <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="i" /> is out of range. It must be non-negative and less than the size of the attribute collection.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string GetAttribute(int i);
    
    /// <summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
    /// <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
    /// <param name="name">The qualified name of the attribute.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentException">The parameter is an empty string.</exception>
    bool MoveToAttribute(string name);
    
    /// <summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
    /// <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
    /// <param name="name">The local name of the attribute.</param>
    /// <param name="ns">The namespace URI of the attribute.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentNullException">Both parameter values are null.</exception>
    bool MoveToAttribute(string name, string ns);
    
    /// <summary>When overridden in a derived class, moves to the attribute with the specified index.</summary>
    /// <param name="i">The index of the attribute.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The parameter has a negative value.</exception>
    void MoveToAttribute(int i);
    
    /// <summary>When overridden in a derived class, moves to the first attribute.</summary>
    /// <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool MoveToFirstAttribute();
    
    /// <summary>When overridden in a derived class, moves to the next attribute.</summary>
    /// <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool MoveToNextAttribute();
    
    /// <summary>When overridden in a derived class, moves to the element that contains the current attribute node.</summary>
    /// <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool MoveToElement();
    
    /// <summary>When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
    /// <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool ReadAttributeValue();
    
    /// <summary>When overridden in a derived class, reads the next node from the stream.</summary>
    /// <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
    /// <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool Read();
    
    /// <summary>When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    void Close();
    
    /// <summary>Skips the children of the current node.</summary>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    void Skip();
    
    /// <summary>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</summary>
    /// <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
    /// <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string LookupNamespace(string prefix);
    
    /// <summary>When overridden in a derived class, resolves the entity reference for EntityReference nodes.</summary>
    /// <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> returns false).</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    void ResolveEntity();
    
    /// <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
    /// <returns>The number of bytes written to the buffer.</returns>
    /// <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
    /// <param name="index">The offset into the buffer where to start copying the result.</param>
    /// <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
    /// <exception cref="T:System.InvalidOperationException">
    ///  <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    int ReadContentAsBase64(byte[] buffer, int index, int count);
    
    /// <summary>Reads the element and decodes the Base64 content.</summary>
    /// <returns>The number of bytes written to the buffer.</returns>
    /// <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
    /// <param name="index">The offset into the buffer where to start copying the result.</param>
    /// <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
    /// <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    /// <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
    /// <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    int ReadElementContentAsBase64(byte[] buffer, int index, int count);
    
    /// <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
    /// <returns>The number of bytes written to the buffer.</returns>
    /// <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
    /// <param name="index">The offset into the buffer where to start copying the result.</param>
    /// <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
    /// <exception cref="T:System.InvalidOperationException">
    ///  <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    int ReadContentAsBinHex(byte[] buffer, int index, int count);
    
    /// <summary>Reads the element and decodes the BinHex content.</summary>
    /// <returns>The number of bytes written to the buffer.</returns>
    /// <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
    /// <param name="index">The offset into the buffer where to start copying the result.</param>
    /// <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
    /// <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    /// <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
    /// <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    int ReadElementContentAsBinHex(byte[] buffer, int index, int count);
    
    /// <summary>Reads large streams of text embedded in an XML document.</summary>
    /// <returns>The number of characters read into the buffer. The value zero is returned when there is no more text content.</returns>
    /// <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
    /// <param name="index">The offset within the buffer where the <see cref="T:System.Xml.XmlReader" /> can start to copy the results.</param>
    /// <param name="count">The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
    /// <exception cref="T:System.InvalidOperationException">The current node does not have a value (<see cref="P:System.Xml.XmlReader.HasValue" /> is false).</exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer, or index + count is larger than the allocated buffer size.</exception>
    /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    /// <exception cref="T:System.Xml.XmlException">The XML data is not well-formed.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    int ReadValueChunk(char[] buffer, int index, int count);
    
    /// <summary>When overridden in a derived class, reads the contents of an element or text node as a string.</summary>
    /// <returns>The contents of the element or an empty string.</returns>
    /// <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadString();
    
    /// <summary>Checks whether the current node is a content (non-white space text, CDATA, Element, EndElement, EntityReference, or EndEntity) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: ProcessingInstruction, DocumentType, Comment, Whitespace, or SignificantWhitespace.</summary>
    /// <returns>The <see cref="P:System.Xml.XmlReader.NodeType" /> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.</returns>
    /// <exception cref="T:System.Xml.XmlException">Incorrect XML encountered in the input stream.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    System.Xml.XmlNodeType MoveToContent();
    
    /// <summary>Checks that the current node is an element and advances the reader to the next node.</summary>
    /// <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    void ReadStartElement();
    
    /// <summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.Name" /> and advances the reader to the next node.</summary>
    /// <param name="name">The qualified name of the element.</param>
    /// <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream. -or- The <see cref="P:System.Xml.XmlReader.Name" /> of the element does not match the given <paramref name="name" />.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    void ReadStartElement(string name);
    
    /// <summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> and advances the reader to the next node.</summary>
    /// <param name="localname">The local name of the element.</param>
    /// <param name="ns">The namespace URI of the element.</param>
    /// <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream.-or-The <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found do not match the given arguments.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    void ReadStartElement(string localname, string ns);
    
    /// <summary>Reads a text-only element.</summary>
    /// <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
    /// <exception cref="T:System.Xml.XmlException">The next content node is not a start tag; or the element found does not contain a simple text value.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadElementString();
    
    /// <summary>Checks that the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given string before reading a text-only element.</summary>
    /// <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
    /// <param name="name">The name to check.</param>
    /// <exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element Name does not match the given argument; or if the element found does not contain a simple text value.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadElementString(string name);
    
    /// <summary>Checks that the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found matches the given strings before reading a text-only element.</summary>
    /// <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
    /// <param name="localname">The local name to check.</param>
    /// <param name="ns">The namespace URI to check.</param>
    /// <exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element LocalName or NamespaceURI do not match the given arguments; or if the element found does not contain a simple text value.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadElementString(string localname, string ns);
    
    /// <summary>Checks that the current content node is an end tag and advances the reader to the next node.</summary>
    /// <exception cref="T:System.Xml.XmlException">The current node is not an end tag or if incorrect XML is encountered in the input stream.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    void ReadEndElement();
    
    /// <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag.</summary>
    /// <returns>true if <see cref="M:System.Xml.XmlReader.MoveToContent" /> finds a start tag or empty element tag; false if a node type other than XmlNodeType.Element was found.</returns>
    /// <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool IsStartElement();
    
    /// <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given argument.</summary>
    /// <returns>true if the resulting node is an element and the Name property matches the specified string. false if a node type other than XmlNodeType.Element was found or if the element Name property does not match the specified string.</returns>
    /// <param name="name">The string matched against the Name property of the element found.</param>
    /// <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool IsStartElement(string name);
    
    /// <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found match the given strings.</summary>
    /// <returns>true if the resulting node is an element. false if a node type other than XmlNodeType.Element was found or if the LocalName and NamespaceURI properties of the element do not match the specified strings.</returns>
    /// <param name="localname">The string to match against the LocalName property of the element found.</param>
    /// <param name="ns">The string to match against the NamespaceURI property of the element found.</param>
    /// <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    bool IsStartElement(string localname, string ns);
    
    /// <summary>Reads until an element with the specified qualified name is found.</summary>
    /// <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</returns>
    /// <param name="name">The qualified name of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentException">The parameter is an empty string.</exception>
    bool ReadToFollowing(string name);
    
    /// <summary>Reads until an element with the specified local name and namespace URI is found.</summary>
    /// <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</returns>
    /// <param name="localName">The local name of the element.</param>
    /// <param name="namespaceURI">The namespace URI of the element.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentNullException">Both parameter values are null.</exception>
    bool ReadToFollowing(string localName, string namespaceURI);
    
    /// <summary>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified qualified name.</summary>
    /// <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</returns>
    /// <param name="name">The qualified name of the element you wish to move to.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentException">The parameter is an empty string.</exception>
    bool ReadToDescendant(string name);
    
    /// <summary>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified local name and namespace URI.</summary>
    /// <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</returns>
    /// <param name="localName">The local name of the element you wish to move to.</param>
    /// <param name="namespaceURI">The namespace URI of the element you wish to move to.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentNullException">Both parameter values are null.</exception>
    bool ReadToDescendant(string localName, string namespaceURI);
    
    /// <summary>Advances the XmlReader to the next sibling element with the specified qualified name.</summary>
    /// <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</returns>
    /// <param name="name">The qualified name of the sibling element you wish to move to.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentException">The parameter is an empty string.</exception>
    bool ReadToNextSibling(string name);
    
    /// <summary>Advances the XmlReader to the next sibling element with the specified local name and namespace URI.</summary>
    /// <returns>true if a matching sibling element is found; otherwise, false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</returns>
    /// <param name="localName">The local name of the sibling element you wish to move to.</param>
    /// <param name="namespaceURI">The namespace URI of the sibling element you wish to move to.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.ArgumentNullException">Both parameter values are null.</exception>
    bool ReadToNextSibling(string localName, string namespaceURI);
    
    /// <summary>When overridden in a derived class, reads all the content, including markup, as a string.</summary>
    /// <returns>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.If the current node is neither an element nor attribute, an empty string is returned.</returns>
    /// <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadInnerXml();
    
    /// <summary>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</summary>
    /// <returns>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</returns>
    /// <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    string ReadOuterXml();
    
    /// <summary>Returns a new XmlReader instance that can be used to read the current node, and all its descendants.</summary>
    /// <returns>A new XmlReader instance set to ReadState.Initial. A call to the <see cref="M:System.Xml.XmlReader.Read" /> method positions the new XmlReader on the node that was current before the call to ReadSubtree method.</returns>
    /// <exception cref="T:System.InvalidOperationException">The XmlReader is not positioned on an element when this method is called.</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    Wrapperator.Interfaces.Xml.IXmlReader ReadSubtree();
    
    /// <summary>Asynchronously gets the value of the current node.</summary>
    /// <returns>The value of the current node.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<string> GetValueAsync();
    
    /// <summary>Asynchronously reads the text content at the current position as an <see cref="T:System.Object" />.</summary>
    /// <returns>The text content as the most appropriate common language runtime (CLR) object.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<object> ReadContentAsObjectAsync();
    
    /// <summary>Asynchronously reads the text content at the current position as a <see cref="T:System.String" /> object.</summary>
    /// <returns>The text content as a <see cref="T:System.String" /> object.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<string> ReadContentAsStringAsync();
    
    /// <summary>Asynchronously reads the content as an object of the type specified.</summary>
    /// <returns>The concatenated text content or attribute value converted to the requested type.</returns>
    /// <param name="returnType">The type of the value to be returned.</param>
    /// <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<object> ReadContentAsAsync(Wrapperator.Interfaces.IType returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);
    
    /// <summary>Asynchronously reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
    /// <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<object> ReadElementContentAsObjectAsync();
    
    /// <summary>Asynchronously reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
    /// <returns>The element content as a <see cref="T:System.String" /> object.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<string> ReadElementContentAsStringAsync();
    
    /// <summary>Asynchronously reads the element content as the requested type.</summary>
    /// <returns>The element content converted to the requested typed object.</returns>
    /// <param name="returnType">The type of the value to be returned.</param>
    /// <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<object> ReadElementContentAsAsync(Wrapperator.Interfaces.IType returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);
    
    /// <summary>Asynchronously reads the next node from the stream.</summary>
    /// <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<bool> ReadAsync();
    
    /// <summary>Asynchronously skips the children of the current node.</summary>
    /// <returns>The current node.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task SkipAsync();
    
    /// <summary>Asynchronously reads the content and returns the Base64 decoded binary bytes.</summary>
    /// <returns>The number of bytes written to the buffer.</returns>
    /// <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
    /// <param name="index">The offset into the buffer where to start copying the result.</param>
    /// <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<int> ReadContentAsBase64Async(byte[] buffer, int index, int count);
    
    /// <summary>Asynchronously reads the element and decodes the Base64 content.</summary>
    /// <returns>The number of bytes written to the buffer.</returns>
    /// <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
    /// <param name="index">The offset into the buffer where to start copying the result.</param>
    /// <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<int> ReadElementContentAsBase64Async(byte[] buffer, int index, int count);
    
    /// <summary>Asynchronously reads the content and returns the BinHex decoded binary bytes.</summary>
    /// <returns>The number of bytes written to the buffer.</returns>
    /// <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
    /// <param name="index">The offset into the buffer where to start copying the result.</param>
    /// <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<int> ReadContentAsBinHexAsync(byte[] buffer, int index, int count);
    
    /// <summary>Asynchronously reads the element and decodes the BinHex content.</summary>
    /// <returns>The number of bytes written to the buffer.</returns>
    /// <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
    /// <param name="index">The offset into the buffer where to start copying the result.</param>
    /// <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<int> ReadElementContentAsBinHexAsync(byte[] buffer, int index, int count);
    
    /// <summary>Asynchronously reads large streams of text embedded in an XML document.</summary>
    /// <returns>The number of characters read into the buffer. The value zero is returned when there is no more text content.</returns>
    /// <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
    /// <param name="index">The offset within the buffer where the <see cref="T:System.Xml.XmlReader" /> can start to copy the results.</param>
    /// <param name="count">The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<int> ReadValueChunkAsync(char[] buffer, int index, int count);
    
    /// <summary>Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.</summary>
    /// <returns>The <see cref="P:System.Xml.XmlReader.NodeType" /> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<System.Xml.XmlNodeType> MoveToContentAsync();
    
    /// <summary>Asynchronously reads all the content, including markup, as a string.</summary>
    /// <returns>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<string> ReadInnerXmlAsync();
    
    /// <summary>Asynchronously reads the content, including markup, representing this node and all its children.</summary>
    /// <returns>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</returns>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> method was called before a previous asynchronous operation finished. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “An asynchronous operation is already in progress.”</exception>
    /// <exception cref="T:System.InvalidOperationException">An <see cref="T:System.Xml.XmlReader" /> asynchronous method was called without setting the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true. In this case, <see cref="T:System.InvalidOperationException" /> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</exception>
    System.Threading.Tasks.Task<string> ReadOuterXmlAsync();
  }
}
