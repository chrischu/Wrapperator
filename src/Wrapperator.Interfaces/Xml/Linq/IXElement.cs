//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.Xml.Linq
{
  
  
  /// <summary>Represents an XML element.</summary>
  public interface IXElement : Wrapperator.Interfaces.Xml.Linq.IXContainer
  {
    
    Wrapperator.Interfaces.Xml.Linq.IXAttribute FirstAttribute
    {
      get;
    }
    
    bool HasAttributes
    {
      get;
    }
    
    bool HasElements
    {
      get;
    }
    
    bool IsEmpty
    {
      get;
    }
    
    Wrapperator.Interfaces.Xml.Linq.IXAttribute LastAttribute
    {
      get;
    }
    
    Wrapperator.Interfaces.Xml.Linq.IXName Name
    {
      get;
      set;
    }
    
    string Value
    {
      get;
      set;
    }
    
    /// <summary>Returns a collection of elements that contain this element, and the ancestors of this element. </summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element. </returns>
    System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf();
    
    /// <summary>Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(Wrapperator.Interfaces.Xml.Linq.IXName name);
    
    /// <summary>Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; null if there is no attribute with the specified name.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</param>
    Wrapperator.Interfaces.Xml.Linq.IXAttribute Attribute(Wrapperator.Interfaces.Xml.Linq.IXName name);
    
    /// <summary>Returns a collection of attributes of this element.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</returns>
    System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes();
    
    /// <summary>Returns a filtered collection of attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(Wrapperator.Interfaces.Xml.Linq.IXName name);
    
    /// <summary>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</returns>
    System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf();
    
    /// <summary>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</returns>
    System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf();
    
    /// <summary>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(Wrapperator.Interfaces.Xml.Linq.IXName name);
    
    /// <summary>Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
    /// <filterpriority>2</filterpriority>
    Wrapperator.Interfaces.Xml.Linq.IXNamespace GetDefaultNamespace();
    
    /// <summary>Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</returns>
    /// <param name="prefix">A string that contains the namespace prefix to look up.</param>
    /// <filterpriority>2</filterpriority>
    Wrapperator.Interfaces.Xml.Linq.IXNamespace GetNamespaceOfPrefix(string prefix);
    
    /// <summary>Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    /// <returns>A <see cref="T:System.String" /> that contains the namespace prefix.</returns>
    /// <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</param>
    /// <filterpriority>2</filterpriority>
    string GetPrefixOfNamespace(Wrapperator.Interfaces.Xml.Linq.IXNamespace ns);
    
    /// <summary>Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    void RemoveAll();
    
    /// <summary>Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    void RemoveAttributes();
    
    /// <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
    /// <param name="content">The content that will replace the child nodes and attributes of this element.</param>
    void ReplaceAll(object content);
    
    /// <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    void ReplaceAll(object[] content);
    
    /// <summary>Replaces the attributes of this element with the specified content.</summary>
    /// <param name="content">The content that will replace the attributes of this element.</param>
    void ReplaceAttributes(object content);
    
    /// <summary>Replaces the attributes of this element with the specified content.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    void ReplaceAttributes(object[] content);
    
    /// <summary>Serialize this element to a file.</summary>
    /// <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    void Save(string fileName);
    
    /// <summary>Serialize this element to a file, optionally disabling formatting.</summary>
    /// <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    void Save(string fileName, System.Xml.Linq.SaveOptions options);
    
    /// <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
    /// <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
    void Save(Wrapperator.Interfaces.IO.IStream stream);
    
    /// <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
    /// <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    void Save(Wrapperator.Interfaces.IO.IStream stream, System.Xml.Linq.SaveOptions options);
    
    /// <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />.</summary>
    /// <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    void Save(Wrapperator.Interfaces.IO.ITextWriter textWriter);
    
    /// <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
    /// <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    void Save(Wrapperator.Interfaces.IO.ITextWriter textWriter, System.Xml.Linq.SaveOptions options);
    
    /// <summary>Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    void Save(Wrapperator.Interfaces.Xml.IXmlWriter writer);
    
    /// <summary>Sets the value of an attribute, adds an attribute, or removes an attribute. </summary>
    /// <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</param>
    /// <param name="value">The value to assign to the attribute. The attribute is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</param>
    /// <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    void SetAttributeValue(Wrapperator.Interfaces.Xml.Linq.IXName name, object value);
    
    /// <summary>Sets the value of a child element, adds a child element, or removes a child element.</summary>
    /// <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</param>
    /// <param name="value">The value to assign to the child element. The child element is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</param>
    /// <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    void SetElementValue(Wrapperator.Interfaces.Xml.Linq.IXName name, object value);
    
    /// <summary>Sets the value of this element.</summary>
    /// <param name="value">The value to assign to this element. The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    /// <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    void SetValue(object value);
  }
}
