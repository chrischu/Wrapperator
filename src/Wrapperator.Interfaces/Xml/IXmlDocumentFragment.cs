//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.Xml
{
  
  
  /// <summary>Represents a lightweight object that is useful for tree insert operations.</summary>
  public partial interface IXmlDocumentFragment
  {
    
    System.Xml.XmlAttributeCollection Attributes
    {
      get;
    }
    
    string BaseURI
    {
      get;
    }
    
    System.Xml.XmlNodeList ChildNodes
    {
      get;
    }
    
    System.Xml.XmlNode FirstChild
    {
      get;
    }
    
    bool HasChildNodes
    {
      get;
    }
    
    string InnerText
    {
      get;
      set;
    }
    
    string InnerXml
    {
      get;
      set;
    }
    
    bool IsReadOnly
    {
      get;
    }
    
    System.Xml.XmlElement this[string name]
    {
      get;
    }
    
    System.Xml.XmlElement this[string localname, string ns]
    {
      get;
    }
    
    System.Xml.XmlNode LastChild
    {
      get;
    }
    
    string LocalName
    {
      get;
    }
    
    string Name
    {
      get;
    }
    
    string NamespaceURI
    {
      get;
    }
    
    System.Xml.XmlNode NextSibling
    {
      get;
    }
    
    System.Xml.XmlNodeType NodeType
    {
      get;
    }
    
    string OuterXml
    {
      get;
    }
    
    System.Xml.XmlDocument OwnerDocument
    {
      get;
    }
    
    System.Xml.XmlNode ParentNode
    {
      get;
    }
    
    string Prefix
    {
      get;
      set;
    }
    
    System.Xml.XmlNode PreviousSibling
    {
      get;
    }
    
    System.Xml.Schema.IXmlSchemaInfo SchemaInfo
    {
      get;
    }
    
    string Value
    {
      get;
      set;
    }
    
    /// <summary>Creates a duplicate of this node.</summary>
    /// <returns>The cloned node.</returns>
    /// <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    System.Xml.XmlNode CloneNode(bool deep);
    
    /// <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="w">The XmlWriter to which you want to save. </param>
    void WriteContentTo(System.Xml.XmlWriter w);
    
    /// <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="w">The XmlWriter to which you want to save. </param>
    void WriteTo(System.Xml.XmlWriter w);
  }
}
