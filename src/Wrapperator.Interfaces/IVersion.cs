//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces
{
  
  
  /// <summary>Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.</summary>
  /// <filterpriority>1</filterpriority>
  public partial interface IVersion
  {
    
    /// <summary>Returns a new <see cref="T:System.Version" /> object whose value is the same as the current <see cref="T:System.Version" /> object.</summary>
    /// <returns>A new <see cref="T:System.Object" /> whose values are a copy of the current <see cref="T:System.Version" /> object.</returns>
    /// <filterpriority>2</filterpriority>
    object Clone();
    
    /// <summary>Compares the current <see cref="T:System.Version" /> object to a specified object and returns an indication of their relative values.</summary>
    /// <returns>A signed integer that indicates the relative values of the two objects, as shown in the following table.Return value Meaning Less than zero The current <see cref="T:System.Version" /> object is a version before <paramref name="version" />. Zero The current <see cref="T:System.Version" /> object is the same version as <paramref name="version" />. Greater than zero The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="version" />.-or- <paramref name="version" /> is null. </returns>
    /// <param name="version">An object to compare, or null. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="version" /> is not of type <see cref="T:System.Version" />. </exception>
    /// <filterpriority>1</filterpriority>
    int CompareTo(object version);
    
    /// <summary>Compares the current <see cref="T:System.Version" /> object to a specified <see cref="T:System.Version" /> object and returns an indication of their relative values.</summary>
    /// <returns>A signed integer that indicates the relative values of the two objects, as shown in the following table.Return value Meaning Less than zero The current <see cref="T:System.Version" /> object is a version before <paramref name="value" />. Zero The current <see cref="T:System.Version" /> object is the same version as <paramref name="value" />. Greater than zero The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="value" />. -or-<paramref name="value" /> is null.</returns>
    /// <param name="value">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or null.</param>
    /// <filterpriority>1</filterpriority>
    int CompareTo(System.Version value);
    
    /// <summary>Converts the string representation of a version number to an equivalent <see cref="T:System.Version" /> object.</summary>
    /// <returns>An object that is equivalent to the version number specified in the <paramref name="input" /> parameter.</returns>
    /// <param name="input">A string that contains a version number to convert.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="input" /> is null.</exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="input" /> has fewer than two or more than four version components.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">At least one component in <paramref name="input" /> is less than zero.</exception>
    /// <exception cref="T:System.FormatException">At least one component in <paramref name="input" /> is not an integer.</exception>
    /// <exception cref="T:System.OverflowException">At least one component in <paramref name="input" /> represents a number that is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    Wrapperator.Interfaces.IVersion Parse(string input);
    
    /// <summary>Tries to convert the string representation of a version number to an equivalent <see cref="T:System.Version" /> object, and returns a value that indicates whether the conversion succeeded.</summary>
    /// <returns>true if the <paramref name="input" /> parameter was converted successfully; otherwise, false.</returns>
    /// <param name="input">A string that contains a version number to convert.</param>
    /// <param name="result">When this method returns, contains the <see cref="T:System.Version" /> equivalent of the number that is contained in <paramref name="input" />, if the conversion succeeded, or a <see cref="T:System.Version" /> object whose major and minor version numbers are 0 if the conversion failed. If <paramref name="input" /> is null or <see cref="F:System.String.Empty" />, <paramref name="result" /> is null when the method returns. </param>
    bool TryParse(string input, ref System.Version result);
  }
}
