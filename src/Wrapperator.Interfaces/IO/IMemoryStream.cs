//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.IO
{
  
  
  /// <summary>Creates a stream whose backing store is memory.</summary>
  /// <filterpriority>2</filterpriority>
  public interface IMemoryStream : Wrapperator.Interfaces.IO.IStream
  {
    
    int Capacity
    {
      get;
      set;
    }
    
    /// <summary>Returns the array of unsigned bytes from which this stream was created.</summary>
    /// <returns>The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <see cref="T:System.IO.MemoryStream" /> constructor during construction of the current instance.</returns>
    /// <exception cref="T:System.UnauthorizedAccessException">The MemoryStream instance was not created with a publicly visible buffer. </exception>
    /// <filterpriority>2</filterpriority>
    byte[] GetBuffer();
    
    /// <summary>Writes the stream contents to a byte array, regardless of the <see cref="P:System.IO.MemoryStream.Position" /> property.</summary>
    /// <returns>A new byte array.</returns>
    /// <filterpriority>2</filterpriority>
    byte[] ToArray();
    
    /// <summary>Writes the entire contents of this memory stream to another stream.</summary>
    /// <param name="stream">The stream to write this memory stream to. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="stream" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The current or target stream is closed. </exception>
    /// <filterpriority>2</filterpriority>
    void WriteTo(Wrapperator.Interfaces.IO.IStream stream);
  }
}
