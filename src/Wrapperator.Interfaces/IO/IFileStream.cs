//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.IO
{
  /// <summary>Exposes a <see cref="T:System.IO.Stream" /> around a file, supporting both synchronous and asynchronous read and write operations.</summary>
  /// <filterpriority>1</filterpriority>
  public interface IFileStream : Wrapperator.Interfaces.IO.IStream
  {
    
    /// <summary>Provides access to the wrapped instance. Should not be used most of the time.</summary>
    System.IO.FileStream _FileStream
    {
      get;
    }
    
    bool IsAsync
    {
      get;
    }
    
    string Name
    {
      get;
    }
    
    Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle
    {
      get;
    }
    
    /// <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity" /> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileStream" /> object.</summary>
    /// <returns>An object that encapsulates the access control settings for the file described by the current <see cref="T:System.IO.FileStream" /> object.</returns>
    /// <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
    /// <exception cref="T:System.SystemException">The file could not be found.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
    /// <filterpriority>1</filterpriority>
    System.Security.AccessControl.FileSecurity GetAccessControl();
    
    /// <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity" /> object to the file described by the current <see cref="T:System.IO.FileStream" /> object.</summary>
    /// <param name="fileSecurity">An object that describes an ACL entry to apply to the current file.</param>
    /// <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="fileSecurity" /> parameter is null.</exception>
    /// <exception cref="T:System.SystemException">The file could not be found or modified.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
    /// <filterpriority>1</filterpriority>
    void SetAccessControl(System.Security.AccessControl.FileSecurity fileSecurity);
    
    /// <summary>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</summary>
    /// <param name="flushToDisk">true to flush all intermediate file buffers; otherwise, false. </param>
    void Flush(bool flushToDisk);
    
    /// <summary>Prevents other processes from reading from or writing to the <see cref="T:System.IO.FileStream" />.</summary>
    /// <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). </param>
    /// <param name="length">The range to be locked. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="position" /> or <paramref name="length" /> is negative. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The file is closed. </exception>
    /// <exception cref="T:System.IO.IOException">The process cannot access the file because another process has locked a portion of the file.</exception>
    /// <filterpriority>2</filterpriority>
    void Lock(long position, long length);
    
    /// <summary>Allows access by other processes to all or part of a file that was previously locked.</summary>
    /// <param name="position">The beginning of the range to unlock. </param>
    /// <param name="length">The range to be unlocked. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="position" /> or <paramref name="length" /> is negative. </exception>
    /// <filterpriority>2</filterpriority>
    void Unlock(long position, long length);
  }
}
