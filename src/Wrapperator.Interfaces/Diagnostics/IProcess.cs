//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.Diagnostics
{
  
  
  /// <summary>Provides access to local and remote processes and enables you to start and stop local system processes.</summary>
  /// <filterpriority>1</filterpriority>
  public interface IProcess
  {
    
    int BasePriority
    {
      get;
    }
    
    int ExitCode
    {
      get;
    }
    
    bool HasExited
    {
      get;
    }
    
    System.DateTime ExitTime
    {
      get;
    }
    
    System.IntPtr Handle
    {
      get;
    }
    
    int HandleCount
    {
      get;
    }
    
    int Id
    {
      get;
    }
    
    string MachineName
    {
      get;
    }
    
    System.IntPtr MainWindowHandle
    {
      get;
    }
    
    string MainWindowTitle
    {
      get;
    }
    
    System.Diagnostics.ProcessModule MainModule
    {
      get;
    }
    
    System.IntPtr MaxWorkingSet
    {
      get;
      set;
    }
    
    System.IntPtr MinWorkingSet
    {
      get;
      set;
    }
    
    System.Diagnostics.ProcessModuleCollection Modules
    {
      get;
    }
    
    long NonpagedSystemMemorySize64
    {
      get;
    }
    
    long PagedMemorySize64
    {
      get;
    }
    
    long PagedSystemMemorySize64
    {
      get;
    }
    
    long PeakPagedMemorySize64
    {
      get;
    }
    
    long PeakWorkingSet64
    {
      get;
    }
    
    long PeakVirtualMemorySize64
    {
      get;
    }
    
    bool PriorityBoostEnabled
    {
      get;
      set;
    }
    
    System.Diagnostics.ProcessPriorityClass PriorityClass
    {
      get;
      set;
    }
    
    long PrivateMemorySize64
    {
      get;
    }
    
    System.TimeSpan PrivilegedProcessorTime
    {
      get;
    }
    
    string ProcessName
    {
      get;
    }
    
    System.IntPtr ProcessorAffinity
    {
      get;
      set;
    }
    
    bool Responding
    {
      get;
    }
    
    int SessionId
    {
      get;
    }
    
    System.Diagnostics.ProcessStartInfo StartInfo
    {
      get;
      set;
    }
    
    System.DateTime StartTime
    {
      get;
    }
    
    System.ComponentModel.ISynchronizeInvoke SynchronizingObject
    {
      get;
      set;
    }
    
    System.Diagnostics.ProcessThreadCollection Threads
    {
      get;
    }
    
    System.TimeSpan TotalProcessorTime
    {
      get;
    }
    
    System.TimeSpan UserProcessorTime
    {
      get;
    }
    
    long VirtualMemorySize64
    {
      get;
    }
    
    bool EnableRaisingEvents
    {
      get;
      set;
    }
    
    System.IO.StreamWriter StandardInput
    {
      get;
    }
    
    System.IO.StreamReader StandardOutput
    {
      get;
    }
    
    System.IO.StreamReader StandardError
    {
      get;
    }
    
    long WorkingSet64
    {
      get;
    }
    
    System.ComponentModel.ISite Site
    {
      get;
      set;
    }
    
    System.ComponentModel.IContainer Container
    {
      get;
    }
    
    /// <summary>Closes a process that has a user interface by sending a close message to its main window.</summary>
    /// <returns>true if the close message was successfully sent; false if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</returns>
    /// <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to false to access this property on Windows 98 and Windows Me.</exception>
    /// <exception cref="T:System.InvalidOperationException">The process has already exited. -or-No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</exception>
    /// <filterpriority>1</filterpriority>
    bool CloseMainWindow();
    
    /// <summary>Frees all the resources that are associated with this component.</summary>
    /// <filterpriority>2</filterpriority>
    void Close();
    
    /// <summary>Discards any information about the associated process that has been cached inside the process component.</summary>
    /// <filterpriority>1</filterpriority>
    void Refresh();
    
    /// <summary>Starts (or reuses) the process resource that is specified by the <see cref="P:System.Diagnostics.Process.StartInfo" /> property of this <see cref="T:System.Diagnostics.Process" /> component and associates it with the component.</summary>
    /// <returns>true if a process resource is started; false if no new process resource is started (for example, if an existing process is reused).</returns>
    /// <exception cref="T:System.InvalidOperationException">No file name was specified in the <see cref="T:System.Diagnostics.Process" /> component's <see cref="P:System.Diagnostics.Process.StartInfo" />.-or- The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> member of the <see cref="P:System.Diagnostics.Process.StartInfo" /> property is true while <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is true. </exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the associated file. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The process object has already been disposed. </exception>
    /// <filterpriority>1</filterpriority>
    bool Start();
    
    /// <summary>Immediately stops the associated process.</summary>
    /// <exception cref="T:System.ComponentModel.Win32Exception">The associated process could not be terminated. -or-The process is terminating.-or- The associated process is a Win16 executable.</exception>
    /// <exception cref="T:System.NotSupportedException">You are attempting to call <see cref="M:System.Diagnostics.Process.Kill" /> for a process that is running on a remote computer. The method is available only for processes running on the local computer.</exception>
    /// <exception cref="T:System.InvalidOperationException">The process has already exited. -or-There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</exception>
    /// <filterpriority>1</filterpriority>
    void Kill();
    
    /// <summary>Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to exit.</summary>
    /// <returns>true if the associated process has exited; otherwise, false.</returns>
    /// <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to exit. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system. </param>
    /// <exception cref="T:System.ComponentModel.Win32Exception">The wait setting could not be accessed. </exception>
    /// <exception cref="T:System.SystemException">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.-or- There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.-or- You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /> for a process that is running on a remote computer. This method is available only for processes that are running on the local computer. </exception>
    /// <filterpriority>1</filterpriority>
    bool WaitForExit(int milliseconds);
    
    /// <summary>Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to exit.</summary>
    /// <exception cref="T:System.ComponentModel.Win32Exception">The wait setting could not be accessed. </exception>
    /// <exception cref="T:System.SystemException">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.-or- There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.-or- You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit" /> for a process that is running on a remote computer. This method is available only for processes that are running on the local computer. </exception>
    /// <filterpriority>1</filterpriority>
    void WaitForExit();
    
    /// <summary>Causes the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.</summary>
    /// <returns>true if the associated process has reached an idle state; otherwise, false.</returns>
    /// <param name="milliseconds">A value of 1 to <see cref="F:System.Int32.MaxValue" /> that specifies the amount of time, in milliseconds, to wait for the associated process to become idle. A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait. </param>
    /// <exception cref="T:System.InvalidOperationException">The process does not have a graphical interface.-or-An unknown error occurred. The process failed to enter an idle state.-or-The process has already exited. -or-No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</exception>
    /// <filterpriority>1</filterpriority>
    bool WaitForInputIdle(int milliseconds);
    
    /// <summary>Causes the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.</summary>
    /// <returns>true if the associated process has reached an idle state.</returns>
    /// <exception cref="T:System.InvalidOperationException">The process does not have a graphical interface.-or-An unknown error occurred. The process failed to enter an idle state.-or-The process has already exited. -or-No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</exception>
    /// <filterpriority>1</filterpriority>
    bool WaitForInputIdle();
    
    /// <summary>Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.</summary>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> property is false.- or - An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.- or - The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been used by a synchronous read operation. </exception>
    /// <filterpriority>2</filterpriority>
    void BeginOutputReadLine();
    
    /// <summary>Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.</summary>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is false.- or - An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardError" /> stream.- or - The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been used by a synchronous read operation. </exception>
    /// <filterpriority>2</filterpriority>
    void BeginErrorReadLine();
    
    /// <summary>Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of an application.</summary>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream is not enabled for asynchronous read operations. </exception>
    /// <filterpriority>2</filterpriority>
    void CancelOutputRead();
    
    /// <summary>Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of an application.</summary>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream is not enabled for asynchronous read operations. </exception>
    /// <filterpriority>2</filterpriority>
    void CancelErrorRead();
    
    /// <summary>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</summary>
    /// <returns>An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.</returns>
    /// <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
    /// <filterpriority>2</filterpriority>
    object GetLifetimeService();
    
    /// <summary>Obtains a lifetime service object to control the lifetime policy for this instance.</summary>
    /// <returns>An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.</returns>
    /// <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
    /// <filterpriority>2</filterpriority>
    object InitializeLifetimeService();
    
    /// <summary>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</summary>
    /// <returns>Information required to generate a proxy.</returns>
    /// <param name="requestedType">The <see cref="T:System.Type" /> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef" /> will reference. </param>
    /// <exception cref="T:System.Runtime.Remoting.RemotingException">This instance is not a valid remoting object. </exception>
    /// <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
    /// <filterpriority>2</filterpriority>
    System.Runtime.Remoting.ObjRef CreateObjRef(Wrapperator.Interfaces.IType requestedType);
  }
}
