//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Interfaces.Diagnostics
{
  
  
  /// <summary>Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.</summary>
  /// <filterpriority>1</filterpriority>
  public interface ITraceStatic
  {
    
    System.Diagnostics.TraceListenerCollection Listeners
    {
      get;
    }
    
    bool AutoFlush
    {
      get;
      set;
    }
    
    bool UseGlobalLock
    {
      get;
      set;
    }
    
    System.Diagnostics.CorrelationManager CorrelationManager
    {
      get;
    }
    
    int IndentLevel
    {
      get;
      set;
    }
    
    int IndentSize
    {
      get;
      set;
    }
    
    /// <summary>Flushes the output buffer, and causes buffered data to be written to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</summary>
    /// <filterpriority>1</filterpriority>
    void Flush();
    
    /// <summary>Flushes the output buffer, and then closes the <see cref="P:System.Diagnostics.Trace.Listeners" />.</summary>
    /// <filterpriority>1</filterpriority>
    void Close();
    
    /// <summary>Checks for a condition; if the condition is false, displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, a failure message is not sent and the message box is not displayed.</param>
    /// <filterpriority>2</filterpriority>
    void Assert(bool condition);
    
    /// <summary>Checks for a condition; if the condition is false, outputs a specified message and displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the specified message is not sent and the message box is not displayed.  </param>
    /// <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <filterpriority>2</filterpriority>
    void Assert(bool condition, string message);
    
    /// <summary>Checks for a condition; if the condition is false, outputs two specified messages and displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.  </param>
    /// <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <param name="detailMessage">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <filterpriority>2</filterpriority>
    void Assert(bool condition, string message, string detailMessage);
    
    /// <summary>Emits the specified error message.</summary>
    /// <param name="message">A message to emit. </param>
    /// <filterpriority>2</filterpriority>
    void Fail(string message);
    
    /// <summary>Emits an error message, and a detailed error message.</summary>
    /// <param name="message">A message to emit. </param>
    /// <param name="detailMessage">A detailed message to emit. </param>
    /// <filterpriority>2</filterpriority>
    void Fail(string message, string detailMessage);
    
    /// <summary>Refreshes the trace configuration data.</summary>
    /// <filterpriority>1</filterpriority>
    void Refresh();
    
    /// <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</summary>
    /// <param name="message">The informative message to write.</param>
    /// <filterpriority>1</filterpriority>
    void TraceInformation(string message);
    
    /// <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</summary>
    /// <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array containing zero or more objects to format.</param>
    /// <filterpriority>1</filterpriority>
    void TraceInformation(string format, object[] args);
    
    /// <summary>Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</summary>
    /// <param name="message">The informative message to write.</param>
    /// <filterpriority>1</filterpriority>
    void TraceWarning(string message);
    
    /// <summary>Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</summary>
    /// <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array containing zero or more objects to format.</param>
    /// <filterpriority>1</filterpriority>
    void TraceWarning(string format, object[] args);
    
    /// <summary>Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</summary>
    /// <param name="message">The informative message to write.</param>
    /// <filterpriority>1</filterpriority>
    void TraceError(string message);
    
    /// <summary>Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</summary>
    /// <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array containing zero or more objects to format.</param>
    /// <filterpriority>1</filterpriority>
    void TraceError(string format, object[] args);
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>1</filterpriority>
    void Write(string message);
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <filterpriority>1</filterpriority>
    void Write(object value);
    
    /// <summary>Writes a category name and a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    void Write(string message, string category);
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="value">An <see cref="T:System.Object" /> name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    void Write(object value, string category);
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>1</filterpriority>
    void WriteLine(string message);
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <filterpriority>1</filterpriority>
    void WriteLine(object value);
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    void WriteLine(string message, string category);
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    void WriteLine(object value, string category);
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>1</filterpriority>
    void WriteIf(bool condition, string message);
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <filterpriority>1</filterpriority>
    void WriteIf(bool condition, object value);
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    void WriteIf(bool condition, string message, string category);
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    void WriteIf(bool condition, object value, string category);
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>1</filterpriority>
    void WriteLineIf(bool condition, string message);
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <filterpriority>1</filterpriority>
    void WriteLineIf(bool condition, object value);
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    void WriteLineIf(bool condition, string message, string category);
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    void WriteLineIf(bool condition, object value, string category);
    
    /// <summary>Increases the current <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.</summary>
    /// <filterpriority>2</filterpriority>
    void Indent();
    
    /// <summary>Decreases the current <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.</summary>
    /// <filterpriority>2</filterpriority>
    void Unindent();
  }
}
