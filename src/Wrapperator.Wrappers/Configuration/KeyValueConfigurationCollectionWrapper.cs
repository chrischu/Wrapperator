//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Configuration
{
  
  
  /// <summary>Contains a collection of <see cref="T:System.Configuration.KeyValueConfigurationElement" /> objects. </summary>
  public class KeyValueConfigurationCollectionWrapper : Wrapperator.Interfaces.Configuration.IKeyValueConfigurationCollection
  {
    
    internal System.Configuration.KeyValueConfigurationCollection KeyValueConfigurationCollection { get; private set; }

    
    internal KeyValueConfigurationCollectionWrapper(System.Configuration.KeyValueConfigurationCollection keyValueConfigurationCollection)
    {
      KeyValueConfigurationCollection = keyValueConfigurationCollection;
    }
    
    public Wrapperator.Interfaces.Configuration.IKeyValueConfigurationElement this[string key]
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.KeyValueConfigurationElementWrapper(KeyValueConfigurationCollection[key]);
      }
    }
    
    public string[] AllKeys
    {
      get
      {
        return KeyValueConfigurationCollection.AllKeys;
      }
    }
    
    public int Count
    {
      get
      {
        return KeyValueConfigurationCollection.Count;
      }
    }
    
    public bool EmitClear
    {
      get
      {
        return KeyValueConfigurationCollection.EmitClear;
      }
      set
      {
        KeyValueConfigurationCollection.EmitClear = value;
      }
    }
    
    public bool IsSynchronized
    {
      get
      {
        return KeyValueConfigurationCollection.IsSynchronized;
      }
    }
    
    public object SyncRoot
    {
      get
      {
        return KeyValueConfigurationCollection.SyncRoot;
      }
    }
    
    public System.Configuration.ConfigurationElementCollectionType CollectionType
    {
      get
      {
        return KeyValueConfigurationCollection.CollectionType;
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAttributes
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationLockCollectionWrapper(KeyValueConfigurationCollection.LockAttributes);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAllAttributesExcept
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationLockCollectionWrapper(KeyValueConfigurationCollection.LockAllAttributesExcept);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockElements
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationLockCollectionWrapper(KeyValueConfigurationCollection.LockElements);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAllElementsExcept
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationLockCollectionWrapper(KeyValueConfigurationCollection.LockAllElementsExcept);
      }
    }
    
    public bool LockItem
    {
      get
      {
        return KeyValueConfigurationCollection.LockItem;
      }
      set
      {
        KeyValueConfigurationCollection.LockItem = value;
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IElementInformation ElementInformation
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ElementInformationWrapper(KeyValueConfigurationCollection.ElementInformation);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfiguration CurrentConfiguration
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationWrapper(KeyValueConfigurationCollection.CurrentConfiguration);
      }
    }
    
    /// <summary>Adds a <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object to the collection based on the supplied parameters.</summary>
    /// <param name="keyValue">A <see cref="T:System.Configuration.KeyValueConfigurationElement" />.</param>
    public void Add(Wrapperator.Interfaces.Configuration.IKeyValueConfigurationElement keyValue)
    {
      KeyValueConfigurationCollection.Add(keyValue == null ? default(System.Configuration.KeyValueConfigurationElement) : ((Wrapperator.Wrappers.Configuration.KeyValueConfigurationElementWrapper)keyValue).KeyValueConfigurationElement);
    }
    
    /// <summary>Adds a <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object to the collection based on the supplied parameters.</summary>
    /// <param name="key">A string specifying the key.</param>
    /// <param name="value">A string specifying the value.</param>
    public void Add(string key, string value)
    {
      KeyValueConfigurationCollection.Add(key, value);
    }
    
    /// <summary>Removes a <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object from the collection.</summary>
    /// <param name="key">A string specifying the <paramref name="key" />.</param>
    public void Remove(string key)
    {
      KeyValueConfigurationCollection.Remove(key);
    }
    
    /// <summary>Clears the <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> collection.</summary>
    public void Clear()
    {
      KeyValueConfigurationCollection.Clear();
    }
    
    /// <summary>Indicates whether the <see cref="T:System.Configuration.ConfigurationElementCollection" /> object is read only.</summary>
    /// <returns>true if the <see cref="T:System.Configuration.ConfigurationElementCollection" /> object is read only; otherwise, false.</returns>
    public bool IsReadOnly()
    {
      return KeyValueConfigurationCollection.IsReadOnly();
    }
    
    /// <summary>Copies the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" /> to an array.</summary>
    /// <param name="array">Array to which to copy the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</param>
    /// <param name="index">Index location at which to begin copying.</param>
    public void CopyTo(System.Configuration.ConfigurationElement[] array, int index)
    {
      KeyValueConfigurationCollection.CopyTo(array, index);
    }
    
    /// <summary>Gets an <see cref="T:System.Collections.IEnumerator" /> which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
    /// <returns>An <see cref="T:System.Collections.IEnumerator" /> which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</returns>
    public System.Collections.IEnumerator GetEnumerator()
    {
      return KeyValueConfigurationCollection.GetEnumerator();
    }
  }
}
