//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Configuration
{
  
  
  /// <summary>Represents a section within a configuration file.</summary>
  public class ConfigurationSectionWrapper : Wrapperator.Interfaces.Configuration.IConfigurationSection
  {
    
    internal System.Configuration.ConfigurationSection ConfigurationSection { get; private set; }

    
    internal ConfigurationSectionWrapper(System.Configuration.ConfigurationSection configurationSection)
    {
      ConfigurationSection = configurationSection;
    }
    
    public Wrapperator.Interfaces.Configuration.ISectionInformation SectionInformation
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.SectionInformationWrapper(ConfigurationSection.SectionInformation);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAttributes
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationLockCollectionWrapper(ConfigurationSection.LockAttributes);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAllAttributesExcept
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationLockCollectionWrapper(ConfigurationSection.LockAllAttributesExcept);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockElements
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationLockCollectionWrapper(ConfigurationSection.LockElements);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfigurationLockCollection LockAllElementsExcept
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationLockCollectionWrapper(ConfigurationSection.LockAllElementsExcept);
      }
    }
    
    public bool LockItem
    {
      get
      {
        return ConfigurationSection.LockItem;
      }
      set
      {
        ConfigurationSection.LockItem = value;
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IElementInformation ElementInformation
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ElementInformationWrapper(ConfigurationSection.ElementInformation);
      }
    }
    
    public Wrapperator.Interfaces.Configuration.IConfiguration CurrentConfiguration
    {
      get
      {
        return new Wrapperator.Wrappers.Configuration.ConfigurationWrapper(ConfigurationSection.CurrentConfiguration);
      }
    }
    
    /// <summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" /> object is read-only.</summary>
    /// <returns>true if the <see cref="T:System.Configuration.ConfigurationElement" /> object is read-only; otherwise, false.</returns>
    public bool IsReadOnly()
    {
      return ConfigurationSection.IsReadOnly();
    }
  }
}
