//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Configuration
{
  
  
  /// <summary>Contains meta-information on an individual property within the configuration. This type cannot be inherited.</summary>
  public class PropertyInformationWrapper : Wrapperator.Interfaces.Configuration.IPropertyInformation
  {
    
    internal System.Configuration.PropertyInformation PropertyInformation { get; private set; }

    
    internal PropertyInformationWrapper(System.Configuration.PropertyInformation propertyInformation)
    {
      PropertyInformation = propertyInformation;
    }
    
    public string Name
    {
      get
      {
        return PropertyInformation.Name;
      }
    }
    
    public object Value
    {
      get
      {
        return PropertyInformation.Value;
      }
      set
      {
        PropertyInformation.Value = value;
      }
    }
    
    public object DefaultValue
    {
      get
      {
        return PropertyInformation.DefaultValue;
      }
    }
    
    public System.Configuration.PropertyValueOrigin ValueOrigin
    {
      get
      {
        return PropertyInformation.ValueOrigin;
      }
    }
    
    public bool IsModified
    {
      get
      {
        return PropertyInformation.IsModified;
      }
    }
    
    public bool IsKey
    {
      get
      {
        return PropertyInformation.IsKey;
      }
    }
    
    public bool IsRequired
    {
      get
      {
        return PropertyInformation.IsRequired;
      }
    }
    
    public bool IsLocked
    {
      get
      {
        return PropertyInformation.IsLocked;
      }
    }
    
    public string Source
    {
      get
      {
        return PropertyInformation.Source;
      }
    }
    
    public int LineNumber
    {
      get
      {
        return PropertyInformation.LineNumber;
      }
    }
    
    public Wrapperator.Interfaces.IType Type
    {
      get
      {
        return new Wrapperator.Wrappers.TypeWrapper(PropertyInformation.Type);
      }
    }
    
    public System.Configuration.ConfigurationValidatorBase Validator
    {
      get
      {
        return PropertyInformation.Validator;
      }
    }
    
    public System.ComponentModel.TypeConverter Converter
    {
      get
      {
        return PropertyInformation.Converter;
      }
    }
    
    public string Description
    {
      get
      {
        return PropertyInformation.Description;
      }
    }
  }
}
