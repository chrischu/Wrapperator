//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Configuration
{
  
  
  /// <summary>Contains a collection of locked configuration objects. This class cannot be inherited.</summary>
  public class ConfigurationLockCollectionWrapper : Wrapperator.Interfaces.Configuration.IConfigurationLockCollection
  {
    
    public System.Configuration.ConfigurationLockCollection _ConfigurationLockCollection { get; private set; }

    
    internal ConfigurationLockCollectionWrapper(System.Configuration.ConfigurationLockCollection configurationLockCollection)
    {
      _ConfigurationLockCollection = configurationLockCollection;
    }
    
    public int Count
    {
      get
      {
        return _ConfigurationLockCollection.Count;
      }
    }
    
    public bool IsSynchronized
    {
      get
      {
        return _ConfigurationLockCollection.IsSynchronized;
      }
    }
    
    public object SyncRoot
    {
      get
      {
        return _ConfigurationLockCollection.SyncRoot;
      }
    }
    
    public bool IsModified
    {
      get
      {
        return _ConfigurationLockCollection.IsModified;
      }
    }
    
    public string AttributeList
    {
      get
      {
        return _ConfigurationLockCollection.AttributeList;
      }
    }
    
    public bool HasParentElements
    {
      get
      {
        return _ConfigurationLockCollection.HasParentElements;
      }
    }
    
    /// <summary>Locks a configuration object by adding it to the collection.</summary>
    /// <param name="name">The name of the configuration object.</param>
    /// <exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when the <paramref name="name" /> does not match an existing configuration object within the collection.</exception>
    public void Add(string name)
    {
      _ConfigurationLockCollection.Add(name);
    }
    
    /// <summary>Removes a configuration object from the collection.</summary>
    /// <param name="name">The name of the configuration object.</param>
    /// <exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when the <paramref name="name" /> does not match an existing configuration object within the collection.</exception>
    public void Remove(string name)
    {
      _ConfigurationLockCollection.Remove(name);
    }
    
    /// <summary>Gets an <see cref="T:System.Collections.IEnumerator" /> object, which is used to iterate through this <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection.</summary>
    /// <returns>An <see cref="T:System.Collections.IEnumerator" /> object.</returns>
    public System.Collections.IEnumerator GetEnumerator()
    {
      return _ConfigurationLockCollection.GetEnumerator();
    }
    
    /// <summary>Clears all configuration objects from the collection.</summary>
    public void Clear()
    {
      _ConfigurationLockCollection.Clear();
    }
    
    /// <summary>Verifies whether a specific configuration object is locked.</summary>
    /// <returns>true if the <see cref="T:System.Configuration.ConfigurationLockCollection" /> contains the specified configuration object; otherwise, false.</returns>
    /// <param name="name">The name of the configuration object to verify.</param>
    public bool Contains(string name)
    {
      return _ConfigurationLockCollection.Contains(name);
    }
    
    /// <summary>Copies the entire <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
    /// <param name="array">A one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Configuration.ConfigurationLockCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
    /// <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    public void CopyTo(string[] array, int index)
    {
      _ConfigurationLockCollection.CopyTo(array, index);
    }
    
    /// <summary>Verifies whether a specific configuration object is read-only.</summary>
    /// <returns>true if the specified configuration object in the <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection is read-only; otherwise, false.</returns>
    /// <param name="name">The name of the configuration object to verify.</param>
    /// <exception cref="T:System.Configuration.ConfigurationErrorsException">The specified configuration object is not in the collection.</exception>
    public bool IsReadOnly(string name)
    {
      return _ConfigurationLockCollection.IsReadOnly(name);
    }
    
    /// <summary>Locks a set of configuration objects based on the supplied list.</summary>
    /// <param name="attributeList">A comma-delimited string.</param>
    /// <exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when an item in the <paramref name="attributeList" /> parameter is not a valid lockable configuration attribute.</exception>
    public void SetFromList(string attributeList)
    {
      _ConfigurationLockCollection.SetFromList(attributeList);
    }
  }
}
