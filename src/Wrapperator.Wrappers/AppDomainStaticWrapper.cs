//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers
{
  
  
  /// <summary>Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.</summary>
  /// <filterpriority>1</filterpriority>
  public class AppDomainStaticWrapper : Wrapperator.Interfaces.IAppDomainStatic
  {
    
    internal AppDomainStaticWrapper()
    {
    }
    
    public Wrapperator.Interfaces.IAppDomain CurrentDomain
    {
      get
      {
        return new Wrapperator.Wrappers.AppDomainWrapper(System.AppDomain.CurrentDomain);
      }
    }
    
    public bool MonitoringIsEnabled
    {
      get
      {
        return System.AppDomain.MonitoringIsEnabled;
      }
      set
      {
        System.AppDomain.MonitoringIsEnabled = value;
      }
    }
    
    public long MonitoringSurvivedProcessMemorySize
    {
      get
      {
        return System.AppDomain.MonitoringSurvivedProcessMemorySize;
      }
    }
    
    /// <summary>Unloads the specified application domain.</summary>
    /// <param name="domain">An application domain to unload. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="domain" /> is null. </exception>
    /// <exception cref="T:System.CannotUnloadAppDomainException">
    ///  <paramref name="domain" /> could not be unloaded. </exception>
    /// <exception cref="T:System.Exception">An error occurred during the unload process.</exception>
    /// <filterpriority>1</filterpriority>
    public void Unload(Wrapperator.Interfaces.IAppDomain domain)
    {
      System.AppDomain.Unload(domain == null ? default(System.AppDomain) : ((Wrapperator.Wrappers.AppDomainWrapper)domain).AppDomain);
    }
    
    /// <summary>Creates a new application domain with the given name using the supplied evidence.</summary>
    /// <returns>The newly created application domain.</returns>
    /// <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see <see cref="P:System.AppDomain.FriendlyName" />. </param>
    /// <param name="securityInfo">Evidence that establishes the identity of the code that runs in the application domain. Pass null to use the evidence of the current application domain.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="friendlyName" /> is null. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IAppDomain CreateDomain(string friendlyName, System.Security.Policy.Evidence securityInfo)
    {
      return new Wrapperator.Wrappers.AppDomainWrapper(System.AppDomain.CreateDomain(friendlyName, securityInfo));
    }
    
    /// <summary>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</summary>
    /// <returns>The newly created application domain.</returns>
    /// <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see <see cref="P:System.AppDomain.FriendlyName" />. </param>
    /// <param name="securityInfo">Evidence that establishes the identity of the code that runs in the application domain. Pass null to use the evidence of the current application domain.</param>
    /// <param name="appBasePath">The base directory that the assembly resolver uses to probe for assemblies. For more information, see <see cref="P:System.AppDomain.BaseDirectory" />. </param>
    /// <param name="appRelativeSearchPath">The path relative to the base directory where the assembly resolver should probe for private assemblies. For more information, see <see cref="P:System.AppDomain.RelativeSearchPath" />. </param>
    /// <param name="shadowCopyFiles">If true, a shadow copy of an assembly is loaded into this application domain. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="friendlyName" /> is null. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IAppDomain CreateDomain(string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles)
    {
      return new Wrapperator.Wrappers.AppDomainWrapper(System.AppDomain.CreateDomain(friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles));
    }
    
    /// <summary>Creates a new application domain with the specified name.</summary>
    /// <returns>The newly created application domain.</returns>
    /// <param name="friendlyName">The friendly name of the domain. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="friendlyName" /> is null. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IAppDomain CreateDomain(string friendlyName)
    {
      return new Wrapperator.Wrappers.AppDomainWrapper(System.AppDomain.CreateDomain(friendlyName));
    }
    
    /// <summary>Creates a new application domain using the specified name, evidence, and application domain setup information.</summary>
    /// <returns>The newly created application domain.</returns>
    /// <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see <see cref="P:System.AppDomain.FriendlyName" />. </param>
    /// <param name="securityInfo">Evidence that establishes the identity of the code that runs in the application domain. Pass null to use the evidence of the current application domain.</param>
    /// <param name="info">An object that contains application domain initialization information. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="friendlyName" /> is null. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IAppDomain CreateDomain(string friendlyName, System.Security.Policy.Evidence securityInfo, System.AppDomainSetup info)
    {
      return new Wrapperator.Wrappers.AppDomainWrapper(System.AppDomain.CreateDomain(friendlyName, securityInfo, info));
    }
    
    /// <summary>Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</summary>
    /// <returns>The newly created application domain.</returns>
    /// <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />.</param>
    /// <param name="securityInfo">Evidence that establishes the identity of the code that runs in the application domain. Pass null to use the evidence of the current application domain.</param>
    /// <param name="info">An object that contains application domain initialization information.</param>
    /// <param name="grantSet">A default permission set that is granted to all assemblies loaded into the new application domain that do not have specific grants. </param>
    /// <param name="fullTrustAssemblies">An array of strong names representing assemblies to be considered fully trusted in the new application domain.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="friendlyName" /> is null. </exception>
    /// <exception cref="T:System.InvalidOperationException">The application domain is null.-or-The <see cref="P:System.AppDomainSetup.ApplicationBase" /> property is not set on the <see cref="T:System.AppDomainSetup" /> object that is supplied for <paramref name="info" />. </exception>
    public Wrapperator.Interfaces.IAppDomain CreateDomain(string friendlyName, System.Security.Policy.Evidence securityInfo, System.AppDomainSetup info, System.Security.PermissionSet grantSet, System.Security.Policy.StrongName[] fullTrustAssemblies)
    {
      return new Wrapperator.Wrappers.AppDomainWrapper(System.AppDomain.CreateDomain(friendlyName, securityInfo, info, grantSet, fullTrustAssemblies));
    }
    
    /// <summary>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain. Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</summary>
    /// <returns>The newly created application domain.</returns>
    /// <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see <see cref="P:System.AppDomain.FriendlyName" />. </param>
    /// <param name="securityInfo">Evidence that establishes the identity of the code that runs in the application domain. Pass null to use the evidence of the current application domain.</param>
    /// <param name="appBasePath">The base directory that the assembly resolver uses to probe for assemblies. For more information, see <see cref="P:System.AppDomain.BaseDirectory" />. </param>
    /// <param name="appRelativeSearchPath">The path relative to the base directory where the assembly resolver should probe for private assemblies. For more information, see <see cref="P:System.AppDomain.RelativeSearchPath" />. </param>
    /// <param name="shadowCopyFiles">true to load a shadow copy of an assembly into the application domain. </param>
    /// <param name="adInit">An <see cref="T:System.AppDomainInitializer" /> delegate that represents a callback method to invoke when the new <see cref="T:System.AppDomain" /> object is initialized.</param>
    /// <param name="adInitArgs">An array of string arguments to be passed to the callback represented by <paramref name="adInit" />, when the new <see cref="T:System.AppDomain" /> object is initialized.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="friendlyName" /> is null. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IAppDomain CreateDomain(string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, System.AppDomainInitializer adInit, string[] adInitArgs)
    {
      return new Wrapperator.Wrappers.AppDomainWrapper(System.AppDomain.CreateDomain(friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles, adInit, adInitArgs));
    }
  }
}
