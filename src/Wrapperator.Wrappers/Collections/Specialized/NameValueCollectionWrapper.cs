//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Collections.Specialized
{
  
  
  /// <summary>Represents a collection of associated <see cref="T:System.String" /> keys and <see cref="T:System.String" /> values that can be accessed either with the key or with the index.</summary>
  public partial class NameValueCollectionWrapper : Wrapperator.Interfaces.Collections.Specialized.INameValueCollection
  {
    
    internal System.Collections.Specialized.NameValueCollection NameValueCollection { get; private set; }

    
    public NameValueCollectionWrapper(System.Collections.Specialized.NameValueCollection nameValueCollection)
    {
      NameValueCollection = nameValueCollection;
    }
    
    public string[] AllKeys
    {
      get
      {
        return NameValueCollection.AllKeys;
      }
    }
    
    public int Count
    {
      get
      {
        return NameValueCollection.Count;
      }
    }
    
    public string this[string name]
    {
      get
      {
        return NameValueCollection[name];
      }
      set
      {
        NameValueCollection[name] = value;
      }
    }
    
    public string this[int index]
    {
      get
      {
        return NameValueCollection[index];
      }
    }
    
    public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys
    {
      get
      {
        return NameValueCollection.Keys;
      }
    }
    
    /// <summary>Copies the entries in the specified <see cref="T:System.Collections.Specialized.NameValueCollection" /> to the current <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    /// <param name="c">The <see cref="T:System.Collections.Specialized.NameValueCollection" /> to copy to the current <see cref="T:System.Collections.Specialized.NameValueCollection" />.</param>
    /// <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="c" /> is null.</exception>
    public void Add(Wrapperator.Interfaces.Collections.Specialized.INameValueCollection c)
    {
      NameValueCollection.Add(c == null ? default(System.Collections.Specialized.NameValueCollection) : ((Wrapperator.Wrappers.Collections.Specialized.NameValueCollectionWrapper)c).NameValueCollection);
    }
    
    /// <summary>Adds an entry with the specified name and value to the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    /// <param name="name">The <see cref="T:System.String" /> key of the entry to add. The key can be null.</param>
    /// <param name="value">The <see cref="T:System.String" /> value of the entry to add. The value can be null.</param>
    /// <exception cref="T:System.NotSupportedException">The collection is read-only. </exception>
    public void Add(string name, string value)
    {
      NameValueCollection.Add(name, value);
    }
    
    /// <summary>Invalidates the cached arrays and removes all entries from the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    /// <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    public void Clear()
    {
      NameValueCollection.Clear();
    }
    
    /// <summary>Copies the entire <see cref="T:System.Collections.Specialized.NameValueCollection" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
    /// <param name="dest">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.NameValueCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
    /// <param name="index">The zero-based index in <paramref name="dest" /> at which copying begins.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="dest" /> is null.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> is less than zero.</exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="dest" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.Specialized.NameValueCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="dest" />.</exception>
    /// <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.Specialized.NameValueCollection" /> cannot be cast automatically to the type of the destination <paramref name="dest" />.</exception>
    public void CopyTo(System.Array dest, int index)
    {
      NameValueCollection.CopyTo(dest, index);
    }
    
    /// <summary>Gets the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection" /> combined into one comma-separated list.</summary>
    /// <returns>A <see cref="T:System.String" /> that contains a comma-separated list of the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found; otherwise, null.</returns>
    /// <param name="name">The <see cref="T:System.String" /> key of the entry that contains the values to get. The key can be null.</param>
    public string Get(string name)
    {
      return NameValueCollection.Get(name);
    }
    
    /// <summary>Gets the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" /> combined into one comma-separated list.</summary>
    /// <returns>A <see cref="T:System.String" /> that contains a comma-separated list of the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found; otherwise, null.</returns>
    /// <param name="index">The zero-based index of the entry that contains the values to get from the collection.</param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    public string Get(int index)
    {
      return NameValueCollection.Get(index);
    }
    
    /// <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />.</summary>
    /// <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</returns>
    public System.Collections.IEnumerator GetEnumerator()
    {
      return NameValueCollection.GetEnumerator();
    }
    
    /// <summary>Gets the key at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    /// <returns>A <see cref="T:System.String" /> that contains the key at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found; otherwise, null.</returns>
    /// <param name="index">The zero-based index of the key to get from the collection.</param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> is outside the valid range of indexes for the collection. </exception>
    public string GetKey(int index)
    {
      return NameValueCollection.GetKey(index);
    }
    
    /// <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</summary>
    /// <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</param>
    /// <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="info" /> is null.</exception>
    public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    {
      NameValueCollection.GetObjectData(info, context);
    }
    
    /// <summary>Gets the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    /// <returns>A <see cref="T:System.String" /> array that contains the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found; otherwise, null.</returns>
    /// <param name="name">The <see cref="T:System.String" /> key of the entry that contains the values to get. The key can be null.</param>
    public string[] GetValues(string name)
    {
      return NameValueCollection.GetValues(name);
    }
    
    /// <summary>Gets the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    /// <returns>A <see cref="T:System.String" /> array that contains the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found; otherwise, null.</returns>
    /// <param name="index">The zero-based index of the entry that contains the values to get from the collection.</param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> is outside the valid range of indexes for the collection. </exception>
    public string[] GetValues(int index)
    {
      return NameValueCollection.GetValues(index);
    }
    
    /// <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.NameValueCollection" /> contains keys that are not null.</summary>
    /// <returns>true if the <see cref="T:System.Collections.Specialized.NameValueCollection" /> contains keys that are not null; otherwise, false.</returns>
    public bool HasKeys()
    {
      return NameValueCollection.HasKeys();
    }
    
    /// <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</summary>
    /// <param name="sender">The source of the deserialization event.</param>
    /// <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance is invalid.</exception>
    public void OnDeserialization(object sender)
    {
      NameValueCollection.OnDeserialization(sender);
    }
    
    /// <summary>Removes the entries with the specified key from the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</summary>
    /// <param name="name">The <see cref="T:System.String" /> key of the entry to remove. The key can be null.</param>
    /// <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    public void Remove(string name)
    {
      NameValueCollection.Remove(name);
    }
    
    /// <summary>Sets the value of an entry in the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    /// <param name="name">The <see cref="T:System.String" /> key of the entry to add the new value to. The key can be null.</param>
    /// <param name="value">The <see cref="T:System.Object" /> that represents the new value to add to the specified entry. The value can be null.</param>
    /// <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    public void Set(string name, string value)
    {
      NameValueCollection.Set(name, value);
    }
  }
}
