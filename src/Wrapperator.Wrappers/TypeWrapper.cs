//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers
{
  
  
  /// <summary>Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</summary>
  /// <filterpriority>1</filterpriority>
  public partial class TypeWrapper : Wrapperator.Interfaces.IType
  {
    
    private System.Type _type;
    
    public TypeWrapper(System.Type type)
    {
      _type = type;
    }
    
    /// <summary>Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
    /// <param name="filter">The delegate that compares the interfaces against <paramref name="filterCriteria" />. </param>
    /// <param name="filterCriteria">The search criteria that determines whether an interface should be included in the returned array. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="filter" /> is null. </exception>
    /// <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Type[] FindInterfaces(System.Reflection.TypeFilter filter, object filterCriteria)
    {
      return _type.FindInterfaces(filter, filterCriteria);
    }
    
    /// <summary>Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</summary>
    /// <returns>A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</returns>
    /// <param name="memberType">An object that indicates the type of member to search for. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <param name="filter">The delegate that does the comparisons, returning true if the member currently being inspected matches the <paramref name="filterCriteria" /> and false otherwise. You can use the FilterAttribute, FilterName, and FilterNameIgnoreCase delegates supplied by this class. The first uses the fields of FieldAttributes, MethodAttributes, and MethodImplAttributes as search criteria, and the other two delegates use String objects as the search criteria. </param>
    /// <param name="filterCriteria">The search criteria that determines whether a member is returned in the array of MemberInfo objects.The fields of FieldAttributes, MethodAttributes, and MethodImplAttributes can be used in conjunction with the FilterAttribute delegate supplied by this class. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="filter" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MemberInfo[] FindMembers(System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria)
    {
      return _type.FindMembers(memberType, bindingAttr, filter, filterCriteria);
    }
    
    /// <summary>Gets the number of dimensions in an <see cref="T:System.Array" />.</summary>
    /// <returns>An <see cref="T:System.Int32" /> containing the number of dimensions in the current Type.</returns>
    /// <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. </exception>
    /// <exception cref="T:System.ArgumentException">The current Type is not an array. </exception>
    /// <filterpriority>2</filterpriority>
    public int GetArrayRank()
    {
      return _type.GetArrayRank();
    }
    
    /// <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
    /// <returns>An object representing the constructor that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. </param>
    /// <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters. </param>
    /// <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    {
      return _type.GetConstructor(bindingAttr, binder, callConvention, types, modifiers);
    }
    
    /// <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
    /// <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.-or- <see cref="F:System.Type.EmptyTypes" />. </param>
    /// <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    {
      return _type.GetConstructor(bindingAttr, binder, types, modifiers);
    }
    
    /// <summary>Searches for a public instance constructor whose parameters match the types in the specified array.</summary>
    /// <returns>An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.</returns>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.-or- An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters. Such an empty array is provided by the static field <see cref="F:System.Type.EmptyTypes" />. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.ConstructorInfo GetConstructor(System.Type[] types)
    {
      return _type.GetConstructor(types);
    }
    
    /// <summary>Returns all the public constructors defined for the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor). If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</returns>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.ConstructorInfo[] GetConstructors()
    {
      return _type.GetConstructors();
    }
    
    /// <summary>When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified BindingFlags.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetConstructors(bindingAttr);
    }
    
    /// <summary>Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</returns>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MemberInfo[] GetDefaultMembers()
    {
      return _type.GetDefaultMembers();
    }
    
    /// <summary>When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</summary>
    /// <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType GetElementType()
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.GetElementType());
    }
    
    /// <summary>Returns the name of the constant that has the specified value, for the current enumeration type.</summary>
    /// <returns>The name of the member of the current enumeration type that has the specified value, or null if no such constant is found.</returns>
    /// <param name="value">The value whose name is to be retrieved.</param>
    /// <exception cref="T:System.ArgumentException">The current type is not an enumeration.-or-<paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="value" /> is null.</exception>
    public string GetEnumName(object value)
    {
      return _type.GetEnumName(value);
    }
    
    /// <summary>Returns the names of the members of the current enumeration type.</summary>
    /// <returns>An array that contains the names of the members of the enumeration.</returns>
    /// <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
    public string[] GetEnumNames()
    {
      return _type.GetEnumNames();
    }
    
    /// <summary>Returns the underlying type of the current enumeration type. </summary>
    /// <returns>The underlying type of the current enumeration.</returns>
    /// <exception cref="T:System.ArgumentException">The current type is not an enumeration.-or-The enumeration type is not valid, because it contains more than one instance field.</exception>
    public Wrapperator.Interfaces.IType GetEnumUnderlyingType()
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.GetEnumUnderlyingType());
    }
    
    /// <summary>Returns an array of the values of the constants in the current enumeration type.</summary>
    /// <returns>An array that contains the values. The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</returns>
    /// <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
    public System.Array GetEnumValues()
    {
      return _type.GetEnumValues();
    }
    
    /// <summary>Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</summary>
    /// <returns>The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.EventInfo GetEvent(string name)
    {
      return _type.GetEvent(name);
    }
    
    /// <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</summary>
    /// <returns>The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetEvent(name, bindingAttr);
    }
    
    /// <summary>Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</returns>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.EventInfo[] GetEvents()
    {
      return _type.GetEvents();
    }
    
    /// <summary>When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetEvents(bindingAttr);
    }
    
    /// <summary>Searches for the specified field, using the specified binding constraints.</summary>
    /// <returns>An object representing the field that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the data field to get. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetField(name, bindingAttr);
    }
    
    /// <summary>Searches for the public field with the specified name.</summary>
    /// <returns>An object representing the public field with the specified name, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the data field to get. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <exception cref="T:System.NotSupportedException">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.FieldInfo GetField(string name)
    {
      return _type.GetField(name);
    }
    
    /// <summary>Returns all the public fields of the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</returns>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.FieldInfo[] GetFields()
    {
      return _type.GetFields();
    }
    
    /// <summary>When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetFields(bindingAttr);
    }
    
    /// <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type or the type parameters of a generic type definition.</summary>
    /// <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.</returns>
    /// <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    /// <filterpriority>2</filterpriority>
    public System.Type[] GetGenericArguments()
    {
      return _type.GetGenericArguments();
    }
    
    /// <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter. </summary>
    /// <returns>An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</returns>
    /// <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns false.</exception>
    /// <filterpriority>1</filterpriority>
    public System.Type[] GetGenericParameterConstraints()
    {
      return _type.GetGenericParameterConstraints();
    }
    
    /// <summary>Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</summary>
    /// <returns>A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</returns>
    /// <exception cref="T:System.InvalidOperationException">The current type is not a generic type.  That is, <see cref="P:System.Type.IsGenericType" /> returns false. </exception>
    /// <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType GetGenericTypeDefinition()
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.GetGenericTypeDefinition());
    }
    
    /// <summary>Searches for the interface with the specified name.</summary>
    /// <returns>An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType GetInterface(string name)
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.GetInterface(name));
    }
    
    /// <summary>When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</summary>
    /// <returns>An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
    /// <param name="ignoreCase">true to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).-or- false to perform a case-sensitive search for all parts of <paramref name="name" />. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType GetInterface(string name, bool ignoreCase)
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.GetInterface(name, ignoreCase));
    }
    
    /// <summary>Returns an interface mapping for the specified interface type.</summary>
    /// <returns>An object that represents the interface mapping for <paramref name="interfaceType" />.</returns>
    /// <param name="interfaceType">The interface type to retrieve a mapping for. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="interfaceType" /> is not implemented by the current type. -or-The <paramref name="interfaceType" /> parameter does not refer to an interface. -or-<paramref name="interfaceType" /> is a generic interface, and the current type is an array type. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="interfaceType" /> is null. </exception>
    /// <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is true. </exception>
    /// <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType)
    {
      return _type.GetInterfaceMap(interfaceType);
    }
    
    /// <summary>When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
    /// <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Type[] GetInterfaces()
    {
      return _type.GetInterfaces();
    }
    
    /// <summary>Searches for the public members with the specified name.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
    /// <param name="name">The string containing the name of the public members to get. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MemberInfo[] GetMember(string name)
    {
      return _type.GetMember(name);
    }
    
    /// <summary>Searches for the specified members, using the specified binding constraints.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
    /// <param name="name">The string containing the name of the members to get. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return an empty array. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetMember(name, bindingAttr);
    }
    
    /// <summary>Searches for the specified members of the specified member type, using the specified binding constraints.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
    /// <param name="name">The string containing the name of the members to get. </param>
    /// <param name="type">The value to search for. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return an empty array. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <exception cref="T:System.NotSupportedException">A derived class must provide an implementation. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetMember(name, type, bindingAttr);
    }
    
    /// <summary>Returns all the public members of the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</returns>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MemberInfo[] GetMembers()
    {
      return _type.GetMembers();
    }
    
    /// <summary>When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array. </param>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetMembers(bindingAttr);
    }
    
    /// <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
    /// <returns>An object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the method to get. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. </param>
    /// <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
    /// <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    {
      return _type.GetMethod(name, bindingAttr, binder, callConvention, types, modifiers);
    }
    
    /// <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
    /// <returns>An object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the method to get. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
    /// <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    {
      return _type.GetMethod(name, bindingAttr, binder, types, modifiers);
    }
    
    /// <summary>Searches for the specified public method whose parameters match the specified argument types and modifiers.</summary>
    /// <returns>An object representing the public method that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the public method to get. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
    /// <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.  </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MethodInfo GetMethod(string name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    {
      return _type.GetMethod(name, types, modifiers);
    }
    
    /// <summary>Searches for the specified public method whose parameters match the specified argument types.</summary>
    /// <returns>An object representing the public method whose parameters match the specified argument types, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the public method to get. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MethodInfo GetMethod(string name, System.Type[] types)
    {
      return _type.GetMethod(name, types);
    }
    
    /// <summary>Searches for the specified method, using the specified binding constraints.</summary>
    /// <returns>An object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the method to get. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetMethod(name, bindingAttr);
    }
    
    /// <summary>Searches for the public method with the specified name.</summary>
    /// <returns>An object that represents the public method with the specified name, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the public method to get. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MethodInfo GetMethod(string name)
    {
      return _type.GetMethod(name);
    }
    
    /// <summary>Returns all the public methods of the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</returns>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MethodInfo[] GetMethods()
    {
      return _type.GetMethods();
    }
    
    /// <summary>When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetMethods(bindingAttr);
    }
    
    /// <summary>Searches for the public nested type with the specified name.</summary>
    /// <returns>An object representing the public nested type with the specified name, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the nested type to get. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType GetNestedType(string name)
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.GetNestedType(name));
    }
    
    /// <summary>When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</summary>
    /// <returns>An object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the nested type to get. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType GetNestedType(string name, System.Reflection.BindingFlags bindingAttr)
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.GetNestedType(name, bindingAttr));
    }
    
    /// <summary>Returns the public types nested in the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</returns>
    /// <filterpriority>2</filterpriority>
    public System.Type[] GetNestedTypes()
    {
      return _type.GetNestedTypes();
    }
    
    /// <summary>When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
    /// <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <filterpriority>2</filterpriority>
    public System.Type[] GetNestedTypes(System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetNestedTypes(bindingAttr);
    }
    
    /// <summary>When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</returns>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetProperties(bindingAttr);
    }
    
    /// <summary>Returns all the public properties of the current <see cref="T:System.Type" />.</summary>
    /// <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</returns>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo[] GetProperties()
    {
      return _type.GetProperties();
    }
    
    /// <summary>Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
    /// <returns>An object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the property to get. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. </param>
    /// <param name="returnType">The return type of the property. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
    /// <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.-or- <paramref name="types" /> is null.</exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    /// <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    {
      return _type.GetProperty(name, bindingAttr, binder, returnType, types, modifiers);
    }
    
    /// <summary>Searches for the specified public property whose parameters match the specified argument types and modifiers.</summary>
    /// <returns>An object representing the public property that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the public property to get. </param>
    /// <param name="returnType">The return type of the property. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
    /// <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types and modifiers. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.-or- <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    /// <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    {
      return _type.GetProperty(name, returnType, types, modifiers);
    }
    
    /// <summary>Searches for the specified property, using the specified binding constraints.</summary>
    /// <returns>An object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the property to get. </param>
    /// <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. See Remarks.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr)
    {
      return _type.GetProperty(name, bindingAttr);
    }
    
    /// <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
    /// <returns>An object representing the public property whose parameters match the specified argument types, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the public property to get. </param>
    /// <param name="returnType">The return type of the property. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.-or- <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional. </exception>
    /// <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types)
    {
      return _type.GetProperty(name, returnType, types);
    }
    
    /// <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
    /// <returns>An object representing the public property whose parameters match the specified argument types, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the public property to get. </param>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null.-or- <paramref name="types" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="types" /> is multidimensional. </exception>
    /// <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo GetProperty(string name, System.Type[] types)
    {
      return _type.GetProperty(name, types);
    }
    
    /// <summary>Searches for the public property with the specified name and return type.</summary>
    /// <returns>An object representing the public property with the specified name, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the public property to get. </param>
    /// <param name="returnType">The return type of the property. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null, or <paramref name="returnType" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType)
    {
      return _type.GetProperty(name, returnType);
    }
    
    /// <summary>Searches for the public property with the specified name.</summary>
    /// <returns>An object representing the public property with the specified name, if found; otherwise, null.</returns>
    /// <param name="name">The string containing the name of the public property to get. </param>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. See Remarks.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="name" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Reflection.PropertyInfo GetProperty(string name)
    {
      return _type.GetProperty(name);
    }
    
    /// <summary>Gets the types of the objects in the specified array.</summary>
    /// <returns>An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</returns>
    /// <param name="args">An array of objects whose types to determine. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="args" /> is null. </exception>
    /// <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and at least one throws an exception. </exception>
    /// <filterpriority>1</filterpriority>
    public System.Type[] GetTypeArray(object[] args)
    {
      return System.Type.GetTypeArray(args);
    }
    
    /// <summary>Gets the underlying type code of the specified <see cref="T:System.Type" />.</summary>
    /// <returns>The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is null.</returns>
    /// <param name="type">The type whose underlying type code to get. </param>
    /// <filterpriority>1</filterpriority>
    public System.TypeCode GetTypeCode(System.Type type)
    {
      return System.Type.GetTypeCode(type);
    }
    
    /// <summary>Gets the type associated with the specified class identifier (CLSID).</summary>
    /// <returns>System.__ComObject regardless of whether the CLSID is valid.</returns>
    /// <param name="clsid">The CLSID of the type to get. </param>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromCLSID(System.Guid clsid)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromCLSID(clsid));
    }
    
    /// <summary>Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</summary>
    /// <returns>System.__ComObject regardless of whether the CLSID is valid.</returns>
    /// <param name="clsid">The CLSID of the type to get. </param>
    /// <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs. </param>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromCLSID(System.Guid clsid, bool throwOnError)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromCLSID(clsid, throwOnError));
    }
    
    /// <summary>Gets the type associated with the specified class identifier (CLSID) from the specified server.</summary>
    /// <returns>System.__ComObject regardless of whether the CLSID is valid.</returns>
    /// <param name="clsid">The CLSID of the type to get. </param>
    /// <param name="server">The server from which to load the type. If the server name is null, this method automatically reverts to the local machine. </param>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromCLSID(System.Guid clsid, string server)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromCLSID(clsid, server));
    }
    
    /// <summary>Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</summary>
    /// <returns>System.__ComObject regardless of whether the CLSID is valid.</returns>
    /// <param name="clsid">The CLSID of the type to get. </param>
    /// <param name="server">The server from which to load the type. If the server name is null, this method automatically reverts to the local machine. </param>
    /// <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs. </param>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromCLSID(System.Guid clsid, string server, bool throwOnError)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromCLSID(clsid, server, throwOnError));
    }
    
    /// <summary>Gets the type referenced by the specified type handle.</summary>
    /// <returns>The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or null if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is null.</returns>
    /// <param name="handle">The object that refers to the type. </param>
    /// <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromHandle(System.RuntimeTypeHandle handle)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromHandle(handle));
    }
    
    /// <summary>Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</summary>
    /// <returns>The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, null.</returns>
    /// <param name="progID">The ProgID of the type to get. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="progID" /> is null. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromProgID(string progID)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromProgID(progID));
    }
    
    /// <summary>Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</summary>
    /// <returns>The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, null.</returns>
    /// <param name="progID">The ProgID of the type to get. </param>
    /// <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="progID" /> is null. </exception>
    /// <exception cref="T:System.Runtime.InteropServices.COMException">The specified ProgID is not registered. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromProgID(string progID, bool throwOnError)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromProgID(progID, throwOnError));
    }
    
    /// <summary>Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</summary>
    /// <returns>The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, null.</returns>
    /// <param name="progID">The progID of the type to get. </param>
    /// <param name="server">The server from which to load the type. If the server name is null, this method automatically reverts to the local machine. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="prodID" /> is null. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromProgID(string progID, string server)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromProgID(progID, server));
    }
    
    /// <summary>Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</summary>
    /// <returns>The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, null.</returns>
    /// <param name="progID">The progID of the <see cref="T:System.Type" /> to get. </param>
    /// <param name="server">The server from which to load the type. If the server name is null, this method automatically reverts to the local machine. </param>
    /// <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="progID" /> is null. </exception>
    /// <exception cref="T:System.Runtime.InteropServices.COMException">The specified progID is not registered. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType GetTypeFromProgID(string progID, string server, bool throwOnError)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.GetTypeFromProgID(progID, server, throwOnError));
    }
    
    /// <summary>Gets the handle for the <see cref="T:System.Type" /> of a specified object.</summary>
    /// <returns>The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</returns>
    /// <param name="o">The object for which to get the type handle. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="o" /> is null.</exception>
    /// <filterpriority>1</filterpriority>
    public System.RuntimeTypeHandle GetTypeHandle(object o)
    {
      return System.Type.GetTypeHandle(o);
    }
    
    /// <summary>When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</summary>
    /// <returns>An object representing the return value of the invoked member.</returns>
    /// <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
    /// <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param>
    /// <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
    /// <param name="target">The object on which to invoke the specified member. </param>
    /// <param name="args">An array containing the arguments to pass to the member to invoke. </param>
    /// <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature. The default binder processes this parameter only when calling a COM component. </param>
    /// <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or- A null reference (Nothing in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />. </param>
    /// <param name="namedParameters">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="invokeAttr" /> does not contain CreateInstance and <paramref name="name" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.-or- <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.-or- <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains both GetField and SetField.-or- <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.-or- The named parameter array is larger than the argument array.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception>
    /// <exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception>
    /// <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
    /// <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.-or- No member can be found that has the argument names supplied in <paramref name="namedParameters" />.-or- The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. </exception>
    /// <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />. </exception>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception>
    /// <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.</exception>
    /// <filterpriority>2</filterpriority>
    public object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters)
    {
      return _type.InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
    }
    
    /// <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</summary>
    /// <returns>An object representing the return value of the invoked member.</returns>
    /// <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
    /// <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param>
    /// <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
    /// <param name="target">The object on which to invoke the specified member. </param>
    /// <param name="args">An array containing the arguments to pass to the member to invoke. </param>
    /// <param name="culture">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.-or- A null reference (Nothing in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="invokeAttr" /> does not contain CreateInstance and <paramref name="name" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. -or- <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains both GetField and SetField.-or- <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception>
    /// <exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception>
    /// <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
    /// <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.-or- The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. </exception>
    /// <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />. </exception>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception>
    /// <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.</exception>
    /// <filterpriority>2</filterpriority>
    public object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture)
    {
      return _type.InvokeMember(name, invokeAttr, binder, target, args, culture);
    }
    
    /// <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list.</summary>
    /// <returns>An object representing the return value of the invoked member.</returns>
    /// <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
    /// <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param>
    /// <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
    /// <param name="target">The object on which to invoke the specified member. </param>
    /// <param name="args">An array containing the arguments to pass to the member to invoke. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="invokeAttr" /> does not contain CreateInstance and <paramref name="name" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. -or- <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. -or- <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains both GetField and SetField.-or- <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception>
    /// <exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception>
    /// <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
    /// <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.-or- The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. </exception>
    /// <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />. </exception>
    /// <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception>
    /// <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this method.</exception>
    /// <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.</exception>
    /// <filterpriority>2</filterpriority>
    public object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args)
    {
      return _type.InvokeMember(name, invokeAttr, binder, target, args);
    }
    
    /// <summary>Determines whether an instance of the current <see cref="T:System.Type" /> can be assigned from an instance of the specified Type.</summary>
    /// <returns>true if <paramref name="c" /> and the current Type represent the same type, or if the current Type is in the inheritance hierarchy of <paramref name="c" />, or if the current Type is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current Type represents one of the constraints of <paramref name="c" />, or if <paramref name="c" /> represents a value type and the current Type represents Nullable&lt;c&gt; (Nullable(Of c) in Visual Basic). false if none of these conditions are true, or if <paramref name="c" /> is null.</returns>
    /// <param name="c">The type to compare with the current type. </param>
    /// <filterpriority>2</filterpriority>
    public bool IsAssignableFrom(System.Type c)
    {
      return _type.IsAssignableFrom(c);
    }
    
    /// <summary>Returns a value that indicates whether the specified value exists in the current enumeration type.</summary>
    /// <returns>true if the specified value is a member of the current enumeration type; otherwise, false.</returns>
    /// <param name="value">The value to be tested.</param>
    /// <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="value" /> is null.</exception>
    /// <exception cref="T:System.InvalidOperationException">
    ///  <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</exception>
    public bool IsEnumDefined(object value)
    {
      return _type.IsEnumDefined(value);
    }
    
    /// <summary>Determines whether two COM types have the same identity and are eligible for type equivalence.</summary>
    /// <returns>true if the COM types are equivalent; otherwise, false. This method also returns false if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</returns>
    /// <param name="other">The COM type that is tested for equivalence with the current type.</param>
    public bool IsEquivalentTo(System.Type other)
    {
      return _type.IsEquivalentTo(other);
    }
    
    /// <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</summary>
    /// <returns>true if the current Type is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current Type is an interface that <paramref name="o" /> supports. false if neither of these conditions is the case, or if <paramref name="o" /> is null, or if the current Type is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true).</returns>
    /// <param name="o">The object to compare with the current type. </param>
    /// <filterpriority>2</filterpriority>
    public bool IsInstanceOfType(object o)
    {
      return _type.IsInstanceOfType(o);
    }
    
    /// <summary>Determines whether the class represented by the current <see cref="T:System.Type" /> derives from the class represented by the specified <see cref="T:System.Type" />.</summary>
    /// <returns>true if the Type represented by the <paramref name="c" /> parameter and the current Type represent classes, and the class represented by the current Type derives from the class represented by <paramref name="c" />; otherwise, false. This method also returns false if <paramref name="c" /> and the current Type represent the same class.</returns>
    /// <param name="c">The type to compare with the current type. </param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="c" /> parameter is null. </exception>
    /// <filterpriority>2</filterpriority>
    public bool IsSubclassOf(System.Type c)
    {
      return _type.IsSubclassOf(c);
    }
    
    /// <summary>Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</summary>
    /// <returns>A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
    /// <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    /// <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type. That is, <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType MakeArrayType()
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.MakeArrayType());
    }
    
    /// <summary>Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</summary>
    /// <returns>An object representing an array of the current type, with the specified number of dimensions.</returns>
    /// <param name="rank">The number of dimensions for the array. This number must be less than or equal to 32.</param>
    /// <exception cref="T:System.IndexOutOfRangeException">
    ///  <paramref name="rank" /> is invalid. For example, 0 or negative.</exception>
    /// <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    /// <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type. That is, <see cref="P:System.Type.IsByRef" /> returns true. -or-<paramref name="rank" /> is greater than 32.</exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType MakeArrayType(int rank)
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.MakeArrayType(rank));
    }
    
    /// <summary>Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</summary>
    /// <returns>A <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</returns>
    /// <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    /// <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type. That is, <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType MakeByRefType()
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.MakeByRefType());
    }
    
    /// <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</summary>
    /// <returns>A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</returns>
    /// <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type.</param>
    /// <exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition. That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns false. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.-or- Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. -or- <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns true), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns true), or <see cref="T:System.Void" />.</exception>
    /// <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    public Wrapperator.Interfaces.IType MakeGenericType(System.Type[] typeArguments)
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.MakeGenericType(typeArguments));
    }
    
    /// <summary>Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</summary>
    /// <returns>A <see cref="T:System.Type" /> object that represents a pointer to the current type.</returns>
    /// <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    /// <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type. That is, <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IType MakePointerType()
    {
      return new Wrapperator.Wrappers.TypeWrapper(_type.MakePointerType());
    }
    
    /// <summary>Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found. The type is loaded for reflection only, not for execution.</summary>
    /// <returns>The type with the specified name, if found; otherwise, null. If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />. See the Exceptions section.</returns>
    /// <param name="typeName">The assembly-qualified name of the <see cref="T:System.Type" /> to get. </param>
    /// <param name="throwIfNotFound">true to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; false to return null if the type cannot be found. Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
    /// <param name="ignoreCase">true to perform a case-insensitive search for <paramref name="typeName" />; false to perform a case-sensitive search for <paramref name="typeName" />. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="typeName" /> is null. </exception>
    /// <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
    /// <exception cref="T:System.TypeLoadException">
    ///  <paramref name="throwIfNotFound" /> is true and the type is not found. -or-<paramref name="throwIfNotFound" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwIfNotFound" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwIfNotFound" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="typeName" /> does not include the assembly name.-or-<paramref name="throwIfNotFound" /> is true and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,*,]".-or-<paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
    /// <exception cref="T:System.IO.FileNotFoundException">
    ///  <paramref name="throwIfNotFound" /> is true and the assembly or one of its dependencies was not found. </exception>
    /// <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
    /// <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IType ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase)
    {
      return new Wrapperator.Wrappers.TypeWrapper(System.Type.ReflectionOnlyGetType(typeName, throwIfNotFound, ignoreCase));
    }
  }
}
