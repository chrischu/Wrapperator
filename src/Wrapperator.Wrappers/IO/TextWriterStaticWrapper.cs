//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.IO
{
  
  
  /// <summary>Represents a writer that can write a sequential series of characters. This class is abstract.</summary>
  /// <filterpriority>2</filterpriority>
  public class TextWriterStaticWrapper : Wrapperator.Interfaces.IO.ITextWriterStatic
  {
    
    internal TextWriterStaticWrapper()
    {
    }
    
    /// <summary>Creates a thread-safe wrapper around the specified TextWriter.</summary>
    /// <returns>A thread-safe wrapper.</returns>
    /// <param name="writer">The TextWriter to synchronize. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="writer" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IO.ITextWriter Synchronized(Wrapperator.Interfaces.IO.ITextWriter writer)
    {
      return new Wrapperator.Wrappers.IO.TextWriterWrapper(System.IO.TextWriter.Synchronized(writer == null ? default(System.IO.TextWriter) : writer._TextWriter));
    }
  }
}
