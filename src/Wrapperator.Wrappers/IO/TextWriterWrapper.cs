//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.IO
{
  
  
  /// <summary>Represents a writer that can write a sequential series of characters. This class is abstract.</summary>
  /// <filterpriority>2</filterpriority>
  public partial class TextWriterWrapper : Wrapperator.Interfaces.IO.ITextWriter
  {
    
    private System.IO.TextWriter _textWriter;
    
    public static implicit operator System.IO.TextWriter (TextWriterWrapper wrapper)
    {
      if (wrapper == null) return default(System.IO.TextWriter);
      return wrapper._textWriter;
    }
    
    public TextWriterWrapper(System.IO.TextWriter textWriter)
    {
      _textWriter = textWriter;
    }
    
    public System.Text.Encoding Encoding
    {
      get
      {
        return _textWriter.Encoding;
      }
    }
    
    public System.IFormatProvider FormatProvider
    {
      get
      {
        return _textWriter.FormatProvider;
      }
    }
    
    public string NewLine
    {
      get
      {
        return _textWriter.NewLine;
      }
      set
      {
        _textWriter.NewLine = value;
      }
    }
    
    /// <summary>Closes the current writer and releases any system resources associated with the writer.</summary>
    /// <filterpriority>1</filterpriority>
    public void Close()
    {
      _textWriter.Close();
    }
    
    /// <summary>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</summary>
    /// <returns>Information required to generate a proxy.</returns>
    /// <param name="requestedType">The <see cref="T:System.Type" /> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef" /> will reference. </param>
    /// <exception cref="T:System.Runtime.Remoting.RemotingException">This instance is not a valid remoting object. </exception>
    /// <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
    /// <filterpriority>2</filterpriority>
    public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
    {
      return _textWriter.CreateObjRef(requestedType);
    }
    
    /// <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
    /// <filterpriority>1</filterpriority>
    public void Flush()
    {
      _textWriter.Flush();
    }
    
    /// <summary>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device. </summary>
    /// <returns>A task that represents the asynchronous flush operation. </returns>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task FlushAsync()
    {
      return _textWriter.FlushAsync();
    }
    
    /// <summary>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</summary>
    /// <returns>An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.</returns>
    /// <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
    /// <filterpriority>2</filterpriority>
    public object GetLifetimeService()
    {
      return _textWriter.GetLifetimeService();
    }
    
    /// <summary>Obtains a lifetime service object to control the lifetime policy for this instance.</summary>
    /// <returns>An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.</returns>
    /// <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
    /// <filterpriority>2</filterpriority>
    public object InitializeLifetimeService()
    {
      return _textWriter.InitializeLifetimeService();
    }
    
    /// <summary>Creates a thread-safe wrapper around the specified TextWriter.</summary>
    /// <returns>A thread-safe wrapper.</returns>
    /// <param name="writer">The TextWriter to synchronize. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="writer" /> is null. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IO.ITextWriter Synchronized(System.IO.TextWriter writer)
    {
      return new Wrapperator.Wrappers.IO.TextWriterWrapper(System.IO.TextWriter.Synchronized(writer));
    }
    
    /// <summary>Writes a character to the text string or stream.</summary>
    /// <param name="value">The character to write to the text stream. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(char value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes a character array to the text string or stream.</summary>
    /// <param name="buffer">The character array to write to the text stream. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(char[] buffer)
    {
      _textWriter.Write(buffer);
    }
    
    /// <summary>Writes a subarray of characters to the text string or stream.</summary>
    /// <param name="buffer">The character array to write data from. </param>
    /// <param name="index">The character position in the buffer at which to start retrieving data. </param>
    /// <param name="count">The number of characters to write. </param>
    /// <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(char[] buffer, int index, int count)
    {
      _textWriter.Write(buffer, index, count);
    }
    
    /// <summary>Writes the text representation of a Boolean value to the text string or stream.</summary>
    /// <param name="value">The Boolean value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(bool value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte signed integer to the text string or stream.</summary>
    /// <param name="value">The 4-byte signed integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(int value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte unsigned integer to the text string or stream.</summary>
    /// <param name="value">The 4-byte unsigned integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(uint value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte signed integer to the text string or stream.</summary>
    /// <param name="value">The 8-byte signed integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(long value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte unsigned integer to the text string or stream.</summary>
    /// <param name="value">The 8-byte unsigned integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(ulong value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte floating-point value to the text string or stream.</summary>
    /// <param name="value">The 4-byte floating-point value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(float value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte floating-point value to the text string or stream.</summary>
    /// <param name="value">The 8-byte floating-point value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(double value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of a decimal value to the text string or stream.</summary>
    /// <param name="value">The decimal value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(decimal value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes a string to the text string or stream.</summary>
    /// <param name="value">The string to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of an object to the text string or stream by calling the ToString method on that object.</summary>
    /// <param name="value">The object to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(object value)
    {
      _textWriter.Write(value);
    }
    
    /// <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg0">The object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one). </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object arg0)
    {
      _textWriter.Write(format, arg0);
    }
    
    /// <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg0">The first object to format and write. </param>
    /// <param name="arg1">The second object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two). </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object arg0, object arg1)
    {
      _textWriter.Write(format, arg0, arg1);
    }
    
    /// <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg0">The first object to format and write. </param>
    /// <param name="arg1">The second object to format and write. </param>
    /// <param name="arg2">The third object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three). </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object arg0, object arg1, object arg2)
    {
      _textWriter.Write(format, arg0, arg1, arg2);
    }
    
    /// <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object[])" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg">An object array that contains zero or more objects to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> or <paramref name="arg" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="arg" /> array. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object[] arg)
    {
      _textWriter.Write(format, arg);
    }
    
    /// <summary>Writes a character to the text string or stream asynchronously.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="value">The character to write to the text stream.</param>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteAsync(char value)
    {
      return _textWriter.WriteAsync(value);
    }
    
    /// <summary>Writes a string to the text string or stream asynchronously.</summary>
    /// <returns>A task that represents the asynchronous write operation. </returns>
    /// <param name="value">The string to write. If <paramref name="value" /> is null, nothing is written to the text stream.</param>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteAsync(string value)
    {
      return _textWriter.WriteAsync(value);
    }
    
    /// <summary>Writes a character array to the text string or stream asynchronously.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="buffer">The character array to write to the text stream. If <paramref name="buffer" /> is null, nothing is written.</param>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteAsync(char[] buffer)
    {
      return _textWriter.WriteAsync(buffer);
    }
    
    /// <summary>Writes a subarray of characters to the text string or stream asynchronously. </summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="buffer">The character array to write data from. </param>
    /// <param name="index">The character position in the buffer at which to start retrieving data. </param>
    /// <param name="count">The number of characters to write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="buffer" /> is null.</exception>
    /// <exception cref="T:System.ArgumentException">The <paramref name="index" /> plus <paramref name="count" /> is greater than the buffer length.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count)
    {
      return _textWriter.WriteAsync(buffer, index, count);
    }
    
    /// <summary>Writes a line terminator to the text string or stream.</summary>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine()
    {
      _textWriter.WriteLine();
    }
    
    /// <summary>Writes a character followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The character to write to the text stream. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(char value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes an array of characters followed by a line terminator to the text string or stream.</summary>
    /// <param name="buffer">The character array from which data is read. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(char[] buffer)
    {
      _textWriter.WriteLine(buffer);
    }
    
    /// <summary>Writes a subarray of characters followed by a line terminator to the text string or stream.</summary>
    /// <param name="buffer">The character array from which data is read. </param>
    /// <param name="index">The character position in <paramref name="buffer" /> at which to start reading data. </param>
    /// <param name="count">The maximum number of characters to write. </param>
    /// <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(char[] buffer, int index, int count)
    {
      _textWriter.WriteLine(buffer, index, count);
    }
    
    /// <summary>Writes the text representation of a Boolean value followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The Boolean value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(bool value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 4-byte signed integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(int value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 4-byte unsigned integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(uint value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 8-byte signed integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(long value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 8-byte unsigned integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(ulong value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 4-byte floating-point value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(float value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 8-byte floating-point value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(double value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a decimal value followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The decimal value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(decimal value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes a string followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The string to write. If <paramref name="value" /> is null, only the line terminator is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of an object by calling the ToString method on that object, followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The object to write. If <paramref name="value" /> is null, only the line terminator is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(object value)
    {
      _textWriter.WriteLine(value);
    }
    
    /// <summary>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one). </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object arg0)
    {
      _textWriter.WriteLine(format, arg0);
    }
    
    /// <summary>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to format and write. </param>
    /// <param name="arg1">The second object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two). </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object arg0, object arg1)
    {
      _textWriter.WriteLine(format, arg0, arg1);
    }
    
    /// <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to format and write. </param>
    /// <param name="arg1">The second object to format and write. </param>
    /// <param name="arg2">The third object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three). </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object arg0, object arg1, object arg2)
    {
      _textWriter.WriteLine(format, arg0, arg1, arg2);
    }
    
    /// <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg">An object array that contains zero or more objects to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">A string or object is passed in as null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="arg" /> array. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object[] arg)
    {
      _textWriter.WriteLine(format, arg);
    }
    
    /// <summary>Writes a character followed by a line terminator asynchronously to the text string or stream.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="value">The character to write to the text stream.</param>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteLineAsync(char value)
    {
      return _textWriter.WriteLineAsync(value);
    }
    
    /// <summary>Writes a string followed by a line terminator asynchronously to the text string or stream. </summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="value">The string to write. If the value is null, only a line terminator is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteLineAsync(string value)
    {
      return _textWriter.WriteLineAsync(value);
    }
    
    /// <summary>Writes an array of characters followed by a line terminator asynchronously to the text string or stream.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="buffer">The character array to write to the text stream. If the character array is null, only the line terminator is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteLineAsync(char[] buffer)
    {
      return _textWriter.WriteLineAsync(buffer);
    }
    
    /// <summary>Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="buffer">The character array to write data from. </param>
    /// <param name="index">The character position in the buffer at which to start retrieving data. </param>
    /// <param name="count">The number of characters to write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="buffer" /> is null.</exception>
    /// <exception cref="T:System.ArgumentException">The <paramref name="index" /> plus <paramref name="count" /> is greater than the buffer length.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count)
    {
      return _textWriter.WriteLineAsync(buffer, index, count);
    }
    
    /// <summary>Writes a line terminator asynchronously to the text string or stream.</summary>
    /// <returns>A task that represents the asynchronous write operation. </returns>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public System.Threading.Tasks.Task WriteLineAsync()
    {
      return _textWriter.WriteLineAsync();
    }
    
    protected virtual void Dispose(bool disposing)
    {
      if (disposing)
      {
        _textWriter.Dispose();
      }
    }
    
    public void Dispose()
    {
      this.Dispose(true);
      System.GC.SuppressFinalize(this);
    }
  }
}
