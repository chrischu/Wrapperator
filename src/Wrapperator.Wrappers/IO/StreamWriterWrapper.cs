//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.IO
{
  
  
  /// <summary>Implements a <see cref="T:System.IO.TextWriter" /> for writing characters to a stream in a particular encoding.</summary>
  /// <filterpriority>1</filterpriority>
  public class StreamWriterWrapper : TextWriterWrapper, Wrapperator.Interfaces.IO.IStreamWriter
  {
    
    internal System.IO.StreamWriter StreamWriter { get; private set; }

    
    public StreamWriterWrapper(System.IO.StreamWriter streamWriter) : 
        base(streamWriter)
    {
      StreamWriter = streamWriter;
    }
    
    public bool AutoFlush
    {
      get
      {
        return StreamWriter.AutoFlush;
      }
      set
      {
        StreamWriter.AutoFlush = value;
      }
    }
    
    public System.IO.Stream BaseStream
    {
      get
      {
        return StreamWriter.BaseStream;
      }
    }
    
    public new System.Text.Encoding Encoding
    {
      get
      {
        return StreamWriter.Encoding;
      }
    }
    
    public new System.IFormatProvider FormatProvider
    {
      get
      {
        return StreamWriter.FormatProvider;
      }
    }
    
    public new string NewLine
    {
      get
      {
        return StreamWriter.NewLine;
      }
      set
      {
        StreamWriter.NewLine = value;
      }
    }
    
    /// <summary>Closes the current StreamWriter object and the underlying stream.</summary>
    /// <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair.</exception>
    /// <filterpriority>1</filterpriority>
    public new void Close()
    {
      StreamWriter.Close();
    }
    
    /// <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.</summary>
    /// <exception cref="T:System.ObjectDisposedException">The current writer is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
    /// <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Flush()
    {
      StreamWriter.Flush();
    }
    
    /// <summary>Writes a character to the stream.</summary>
    /// <param name="value">The character to write to the stream. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.ObjectDisposedException">
    ///  <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
    /// <exception cref="T:System.NotSupportedException">
    ///  <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(char value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes a character array to the stream.</summary>
    /// <param name="buffer">A character array containing the data to write. If <paramref name="buffer" /> is null, nothing is written. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.ObjectDisposedException">
    ///  <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
    /// <exception cref="T:System.NotSupportedException">
    ///  <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(char[] buffer)
    {
      StreamWriter.Write(buffer);
    }
    
    /// <summary>Writes a subarray of characters to the stream.</summary>
    /// <param name="buffer">A character array that contains the data to write. </param>
    /// <param name="index">The character position in the buffer at which to start reading data. </param>
    /// <param name="count">The maximum number of characters to write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="buffer" /> is null. </exception>
    /// <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.ObjectDisposedException">
    ///  <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
    /// <exception cref="T:System.NotSupportedException">
    ///  <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(char[] buffer, int index, int count)
    {
      StreamWriter.Write(buffer, index, count);
    }
    
    /// <summary>Writes a string to the stream.</summary>
    /// <param name="value">The string to write to the stream. If <paramref name="value" /> is null, nothing is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">
    ///  <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
    /// <exception cref="T:System.NotSupportedException">
    ///  <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(string value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes a character to the stream asynchronously.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="value">The character to write to the stream.</param>
    /// <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    public new System.Threading.Tasks.Task WriteAsync(char value)
    {
      return StreamWriter.WriteAsync(value);
    }
    
    /// <summary>Writes a string to the stream asynchronously.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="value">The string to write to the stream. If <paramref name="value" /> is null, nothing is written.</param>
    /// <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    public new System.Threading.Tasks.Task WriteAsync(string value)
    {
      return StreamWriter.WriteAsync(value);
    }
    
    /// <summary>Writes a subarray of characters to the stream asynchronously.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="buffer">A character array that contains the data to write.</param>
    /// <param name="index">The character position in the buffer at which to begin reading data.</param>
    /// <param name="count">The maximum number of characters to write.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="buffer" /> is null.</exception>
    /// <exception cref="T:System.ArgumentException">The <paramref name="index" /> plus <paramref name="count" /> is greater than the buffer length.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
    /// <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation. </exception>
    public new System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count)
    {
      return StreamWriter.WriteAsync(buffer, index, count);
    }
    
    /// <summary>Writes a line terminator asynchronously to the stream.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    public new System.Threading.Tasks.Task WriteLineAsync()
    {
      return StreamWriter.WriteLineAsync();
    }
    
    /// <summary>Writes a character followed by a line terminator asynchronously to the stream.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="value">The character to write to the stream.</param>
    /// <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    public new System.Threading.Tasks.Task WriteLineAsync(char value)
    {
      return StreamWriter.WriteLineAsync(value);
    }
    
    /// <summary>Writes a string followed by a line terminator asynchronously to the stream.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="value">The string to write. If the value is null, only a line terminator is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    public new System.Threading.Tasks.Task WriteLineAsync(string value)
    {
      return StreamWriter.WriteLineAsync(value);
    }
    
    /// <summary>Writes a subarray of characters followed by a line terminator asynchronously to the stream.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="buffer">The character array to write data from.</param>
    /// <param name="index">The character position in the buffer at which to start reading data.</param>
    /// <param name="count">The maximum number of characters to write.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="buffer" /> is null.</exception>
    /// <exception cref="T:System.ArgumentException">The <paramref name="index" /> plus <paramref name="count" /> is greater than the buffer length.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
    /// <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation. </exception>
    public new System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count)
    {
      return StreamWriter.WriteLineAsync(buffer, index, count);
    }
    
    /// <summary>Clears all buffers for this stream asynchronously and causes any buffered data to be written to the underlying device.</summary>
    /// <returns>A task that represents the asynchronous flush operation.</returns>
    /// <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    public new System.Threading.Tasks.Task FlushAsync()
    {
      return StreamWriter.FlushAsync();
    }
    
    /// <summary>Writes the text representation of a Boolean value to the text string or stream.</summary>
    /// <param name="value">The Boolean value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(bool value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte signed integer to the text string or stream.</summary>
    /// <param name="value">The 4-byte signed integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(int value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte unsigned integer to the text string or stream.</summary>
    /// <param name="value">The 4-byte unsigned integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(uint value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte signed integer to the text string or stream.</summary>
    /// <param name="value">The 8-byte signed integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(long value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte unsigned integer to the text string or stream.</summary>
    /// <param name="value">The 8-byte unsigned integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(ulong value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte floating-point value to the text string or stream.</summary>
    /// <param name="value">The 4-byte floating-point value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(float value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte floating-point value to the text string or stream.</summary>
    /// <param name="value">The 8-byte floating-point value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(double value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of a decimal value to the text string or stream.</summary>
    /// <param name="value">The decimal value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(decimal value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes the text representation of an object to the text string or stream by calling the ToString method on that object.</summary>
    /// <param name="value">The object to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(object value)
    {
      StreamWriter.Write(value);
    }
    
    /// <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg0">The object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one). </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(string format, object arg0)
    {
      StreamWriter.Write(format, arg0);
    }
    
    /// <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg0">The first object to format and write. </param>
    /// <param name="arg1">The second object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two). </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(string format, object arg0, object arg1)
    {
      StreamWriter.Write(format, arg0, arg1);
    }
    
    /// <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg0">The first object to format and write. </param>
    /// <param name="arg1">The second object to format and write. </param>
    /// <param name="arg2">The third object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three). </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(string format, object arg0, object arg1, object arg2)
    {
      StreamWriter.Write(format, arg0, arg1, arg2);
    }
    
    /// <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object[])" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg">An object array that contains zero or more objects to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> or <paramref name="arg" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="arg" /> array. </exception>
    /// <filterpriority>1</filterpriority>
    public new void Write(string format, object[] arg)
    {
      StreamWriter.Write(format, arg);
    }
    
    /// <summary>Writes a line terminator to the text string or stream.</summary>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine()
    {
      StreamWriter.WriteLine();
    }
    
    /// <summary>Writes a character followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The character to write to the text stream. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(char value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes an array of characters followed by a line terminator to the text string or stream.</summary>
    /// <param name="buffer">The character array from which data is read. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(char[] buffer)
    {
      StreamWriter.WriteLine(buffer);
    }
    
    /// <summary>Writes a subarray of characters followed by a line terminator to the text string or stream.</summary>
    /// <param name="buffer">The character array from which data is read. </param>
    /// <param name="index">The character position in <paramref name="buffer" /> at which to start reading data. </param>
    /// <param name="count">The maximum number of characters to write. </param>
    /// <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(char[] buffer, int index, int count)
    {
      StreamWriter.WriteLine(buffer, index, count);
    }
    
    /// <summary>Writes the text representation of a Boolean value followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The Boolean value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(bool value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 4-byte signed integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(int value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 4-byte unsigned integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(uint value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 8-byte signed integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(long value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 8-byte unsigned integer to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(ulong value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 4-byte floating-point value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(float value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The 8-byte floating-point value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(double value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of a decimal value followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The decimal value to write. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(decimal value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes a string followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The string to write. If <paramref name="value" /> is null, only the line terminator is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(string value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of an object by calling the ToString method on that object, followed by a line terminator to the text string or stream.</summary>
    /// <param name="value">The object to write. If <paramref name="value" /> is null, only the line terminator is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(object value)
    {
      StreamWriter.WriteLine(value);
    }
    
    /// <summary>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one). </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(string format, object arg0)
    {
      StreamWriter.WriteLine(format, arg0);
    }
    
    /// <summary>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to format and write. </param>
    /// <param name="arg1">The second object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two). </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(string format, object arg0, object arg1)
    {
      StreamWriter.WriteLine(format, arg0, arg1);
    }
    
    /// <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to format and write. </param>
    /// <param name="arg1">The second object to format and write. </param>
    /// <param name="arg2">The third object to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three). </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(string format, object arg0, object arg1, object arg2)
    {
      StreamWriter.WriteLine(format, arg0, arg1, arg2);
    }
    
    /// <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg">An object array that contains zero or more objects to format and write. </param>
    /// <exception cref="T:System.ArgumentNullException">A string or object is passed in as null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid composite format string.-or- The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="arg" /> array. </exception>
    /// <filterpriority>1</filterpriority>
    public new void WriteLine(string format, object[] arg)
    {
      StreamWriter.WriteLine(format, arg);
    }
    
    /// <summary>Writes a character array to the text string or stream asynchronously.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="buffer">The character array to write to the text stream. If <paramref name="buffer" /> is null, nothing is written.</param>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public new System.Threading.Tasks.Task WriteAsync(char[] buffer)
    {
      return StreamWriter.WriteAsync(buffer);
    }
    
    /// <summary>Writes an array of characters followed by a line terminator asynchronously to the text string or stream.</summary>
    /// <returns>A task that represents the asynchronous write operation.</returns>
    /// <param name="buffer">The character array to write to the text stream. If the character array is null, only the line terminator is written. </param>
    /// <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
    /// <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation. </exception>
    public new System.Threading.Tasks.Task WriteLineAsync(char[] buffer)
    {
      return StreamWriter.WriteLineAsync(buffer);
    }
    
    protected override void Dispose(bool disposing)
    {
      base.Dispose(disposing);
      if (disposing)
      {
        StreamWriter.Dispose();
      }
    }
  }
}
