//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.IO
{
  
  
  /// <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
  /// <filterpriority>1</filterpriority>
  public partial class DirectoryWrapper : Wrapperator.Interfaces.IO.IDirectory
  {
    
    /// <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary>
    /// <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
    /// <param name="path">The directory to create. </param>
    /// <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is a file.-or-The network name is not known.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.-or-<paramref name="path" /> is prefixed with, or contains, only a colon character (:).</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <exception cref="T:System.NotSupportedException">
    ///  <paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IDirectoryInfo CreateDirectory(string path)
    {
      return new Wrapperator.Wrappers.IO.DirectoryInfoWrapper(System.IO.Directory.CreateDirectory(path));
    }
    
    /// <summary>Creates all the directories in the specified path, unless the already exist, applying the specified Windows security.</summary>
    /// <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
    /// <param name="path">The directory to create.</param>
    /// <param name="directorySecurity">The access control to apply to the directory.</param>
    /// <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is a file.-or-The network name is not known.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. -or-<paramref name="path" /> is prefixed with, or contains, only a colon character (:).</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <exception cref="T:System.NotSupportedException">
    ///  <paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IDirectoryInfo CreateDirectory(string path, System.Security.AccessControl.DirectorySecurity directorySecurity)
    {
      return new Wrapperator.Wrappers.IO.DirectoryInfoWrapper(System.IO.Directory.CreateDirectory(path, directorySecurity));
    }
    
    /// <summary>Deletes an empty directory from a specified path.</summary>
    /// <param name="path">The name of the empty directory to remove. This directory must be writable and empty. </param>
    /// <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.-or-The directory is the application's current working directory.-or-The directory specified by <paramref name="path" /> is not empty.-or-The directory is read-only or contains a read-only file.-or-The directory is being used by another process.-or-There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from directories. For more information, see How to: Enumerate Directories and Files.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> does not exist or could not be found.-or-<paramref name="path" /> refers to a file instead of a directory.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public void Delete(string path)
    {
      System.IO.Directory.Delete(path);
    }
    
    /// <summary>Deletes the specified directory and, if indicated, any subdirectories and files in the directory. </summary>
    /// <param name="path">The name of the directory to remove. </param>
    /// <param name="recursive">true to remove directories, subdirectories, and files in <paramref name="path" />; otherwise, false. </param>
    /// <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.-or-The directory specified by <paramref name="path" /> is read-only, or <paramref name="recursive" /> is false and <paramref name="path" /> is not an empty directory. -or-The directory is the application's current working directory. -or-The directory contains a read-only file.-or-The directory is being used by another process.There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> does not exist or could not be found.-or-<paramref name="path" /> refers to a file instead of a directory.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public void Delete(string path, bool recursive)
    {
      System.IO.Directory.Delete(path, recursive);
    }
    
    /// <summary>Returns an enumerable collection of directory names in a specified path.</summary>
    /// <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" />.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path)
    {
      return System.IO.Directory.EnumerateDirectories(path);
    }
    
    /// <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
    /// <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern)
    {
      return System.IO.Directory.EnumerateDirectories(path, searchPattern);
    }
    
    /// <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
    /// <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
    /// <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption)
    {
      return System.IO.Directory.EnumerateDirectories(path, searchPattern, searchOption);
    }
    
    /// <summary>Returns an enumerable collection of file names in a specified path.</summary>
    /// <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" />.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path)
    {
      return System.IO.Directory.EnumerateFiles(path);
    }
    
    /// <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
    /// <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern)
    {
      return System.IO.Directory.EnumerateFiles(path, searchPattern);
    }
    
    /// <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
    /// <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.  </param>
    /// <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption)
    {
      return System.IO.Directory.EnumerateFiles(path, searchPattern, searchOption);
    }
    
    /// <summary>Returns an enumerable collection of file names and directory names in a specified path. </summary>
    /// <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" />.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path)
    {
      return System.IO.Directory.EnumerateFileSystemEntries(path);
    }
    
    /// <summary>Returns an enumerable collection of file names and directory names that  match a search pattern in a specified path.</summary>
    /// <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive. </param>
    /// <param name="searchPattern">The search string to match against the names of file-system entries in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.  </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern)
    {
      return System.IO.Directory.EnumerateFileSystemEntries(path, searchPattern);
    }
    
    /// <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
    /// <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against file-system entries in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
    /// <param name="searchOption">One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption)
    {
      return System.IO.Directory.EnumerateFileSystemEntries(path, searchPattern, searchOption);
    }
    
    /// <summary>Determines whether the given path refers to an existing directory on disk.</summary>
    /// <returns>true if <paramref name="path" /> refers to an existing directory; false if the directory does not exist or an error occurs when trying to determine if the specified file exists.true if <paramref name="path" /> refers to an existing directory; otherwise, false.</returns>
    /// <param name="path">The path to test. </param>
    /// <filterpriority>1</filterpriority>
    public bool Exists(string path)
    {
      return System.IO.Directory.Exists(path);
    }
    
    /// <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that encapsulates the access control list (ACL) entries for a specified directory.</summary>
    /// <returns>An object that encapsulates the access control rules for the file described by the <paramref name="path" /> parameter.</returns>
    /// <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that describes the file's access control list (ACL) information.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
    /// <exception cref="T:System.SystemException">A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <see cref="T:System.SystemException" />.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path" /> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
    /// <filterpriority>1</filterpriority>
    public System.Security.AccessControl.DirectorySecurity GetAccessControl(string path)
    {
      return System.IO.Directory.GetAccessControl(path);
    }
    
    /// <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</summary>
    /// <returns>An object that encapsulates the access control rules for the file described by the <paramref name="path" /> parameter.</returns>
    /// <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that describes the file's access control list (ACL) information.</param>
    /// <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
    /// <exception cref="T:System.SystemException">A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <see cref="T:System.SystemException" />.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The <paramref name="path" /> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
    /// <filterpriority>1</filterpriority>
    public System.Security.AccessControl.DirectorySecurity GetAccessControl(string path, System.Security.AccessControl.AccessControlSections includeSections)
    {
      return System.IO.Directory.GetAccessControl(path, includeSections);
    }
    
    /// <summary>Gets the creation date and time of a directory.</summary>
    /// <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
    /// <param name="path">The path of the directory. </param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime GetCreationTime(string path)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.IO.Directory.GetCreationTime(path));
    }
    
    /// <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
    /// <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
    /// <param name="path">The path of the directory. </param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime GetCreationTimeUtc(string path)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.IO.Directory.GetCreationTimeUtc(path));
    }
    
    /// <summary>Gets the current working directory of the application.</summary>
    /// <returns>A string that contains the path of the current working directory, and does not end with a backslash (\).</returns>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
    /// <filterpriority>1</filterpriority>
    public string GetCurrentDirectory()
    {
      return System.IO.Directory.GetCurrentDirectory();
    }
    
    /// <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary>
    /// <returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public string[] GetDirectories(string path)
    {
      return System.IO.Directory.GetDirectories(path);
    }
    
    /// <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary>
    /// <returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn't support regular expressions. </param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- <paramref name="searchPattern" /> doesn't contain a valid pattern. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> or <paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public string[] GetDirectories(string path, string searchPattern)
    {
      return System.IO.Directory.GetDirectories(path, searchPattern);
    }
    
    /// <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary>
    /// <returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn't support regular expressions.</param>
    /// <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.-or- <paramref name="searchPattern" /> does not contain a valid pattern. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> or <paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    public string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption)
    {
      return System.IO.Directory.GetDirectories(path, searchPattern, searchOption);
    }
    
    /// <summary>Returns the volume information, root information, or both for the specified path.</summary>
    /// <returns>A string that contains the volume information, root information, or both for the specified path.</returns>
    /// <param name="path">The path of a file or directory. </param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <filterpriority>1</filterpriority>
    public string GetDirectoryRoot(string path)
    {
      return System.IO.Directory.GetDirectoryRoot(path);
    }
    
    /// <summary>Returns the names of files (including their paths) in the specified directory.</summary>
    /// <returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.-or-A network error has occurred. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public string[] GetFiles(string path)
    {
      return System.IO.Directory.GetFiles(path);
    }
    
    /// <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
    /// <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.-or-A network error has occurred. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- <paramref name="searchPattern" /> doesn't contain a valid pattern. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> or <paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public string[] GetFiles(string path, string searchPattern)
    {
      return System.IO.Directory.GetFiles(path, searchPattern);
    }
    
    /// <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</summary>
    /// <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
    /// <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. -or- <paramref name="searchPattern" /> does not contain a valid pattern.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> or <paramref name="searchpattern" /> is null.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive). </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.-or-A network error has occurred. </exception>
    public string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption)
    {
      return System.IO.Directory.GetFiles(path, searchPattern, searchOption);
    }
    
    /// <summary>Returns the names of all files and subdirectories in a specified path.</summary>
    /// <returns>An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public string[] GetFileSystemEntries(string path)
    {
      return System.IO.Directory.GetFileSystemEntries(path);
    }
    
    /// <summary>Returns an array of file names and directory names that that match a search pattern in a specified path.</summary>
    /// <returns>An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of file and directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.-or- <paramref name="searchPattern" /> does not contain a valid pattern. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> or <paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public string[] GetFileSystemEntries(string path, string searchPattern)
    {
      return System.IO.Directory.GetFileSystemEntries(path, searchPattern);
    }
    
    /// <summary>Returns an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
    /// <returns>An array of file the file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
    /// <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
    /// <param name="searchPattern">The search string to match against the names of files and directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
    /// <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">
    ///  <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
    /// <exception cref="T:System.IO.IOException">
    ///  <paramref name="path" /> is a file name.</exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    public string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption)
    {
      return System.IO.Directory.GetFileSystemEntries(path, searchPattern, searchOption);
    }
    
    /// <summary>Returns the date and time the specified file or directory was last accessed.</summary>
    /// <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
    /// <param name="path">The file or directory for which to obtain access date and time information. </param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime GetLastAccessTime(string path)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.IO.Directory.GetLastAccessTime(path));
    }
    
    /// <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
    /// <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
    /// <param name="path">The file or directory for which to obtain access date and time information. </param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime GetLastAccessTimeUtc(string path)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.IO.Directory.GetLastAccessTimeUtc(path));
    }
    
    /// <summary>Returns the date and time the specified file or directory was last written to.</summary>
    /// <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
    /// <param name="path">The file or directory for which to obtain modification date and time information. </param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime GetLastWriteTime(string path)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.IO.Directory.GetLastWriteTime(path));
    }
    
    /// <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
    /// <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
    /// <param name="path">The file or directory for which to obtain modification date and time information. </param>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime GetLastWriteTimeUtc(string path)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.IO.Directory.GetLastWriteTimeUtc(path));
    }
    
    /// <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
    /// <returns>The logical drives on this computer.</returns>
    /// <exception cref="T:System.IO.IOException">An I/O error occured (for example, a disk error). </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <filterpriority>1</filterpriority>
    public string[] GetLogicalDrives()
    {
      return System.IO.Directory.GetLogicalDrives();
    }
    
    /// <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
    /// <returns>The parent directory, or null if <paramref name="path" /> is the root directory, including the root of a UNC server or share name.</returns>
    /// <param name="path">The path for which to retrieve the parent directory. </param>
    /// <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is read-only. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IDirectoryInfo GetParent(string path)
    {
      return new Wrapperator.Wrappers.IO.DirectoryInfoWrapper(System.IO.Directory.GetParent(path));
    }
    
    /// <summary>Moves a file or a directory and its contents to a new location.</summary>
    /// <param name="sourceDirName">The path of the file or directory to move. </param>
    /// <param name="destDirName">The path to the new location for <paramref name="sourceDirName" />. If <paramref name="sourceDirName" /> is a file, then <paramref name="destDirName" /> must also be a file name.</param>
    /// <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- <paramref name="destDirName" /> already exists. -or- The <paramref name="sourceDirName" /> and <paramref name="destDirName" /> parameters refer to the same file or directory. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="sourceDirName" /> or <paramref name="destDirName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="sourceDirName" /> or <paramref name="destDirName" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName" /> is invalid (for example, it is on an unmapped drive). </exception>
    /// <filterpriority>1</filterpriority>
    public void Move(string sourceDirName, string destDirName)
    {
      System.IO.Directory.Move(sourceDirName, destDirName);
    }
    
    /// <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object to the specified directory.</summary>
    /// <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
    /// <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that describes an ACL entry to apply to the directory described by the <paramref name="path" /> parameter.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="directorySecurity" /> parameter is null.</exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The directory could not be found.</exception>
    /// <exception cref="T:System.ArgumentException">The <paramref name="path" /> was invalid.</exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to the directory specified by <paramref name="path" />.-or-The current process does not have sufficient privilege to set the ACL entry.</exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetAccessControl(string path, System.Security.AccessControl.DirectorySecurity directorySecurity)
    {
      System.IO.Directory.SetAccessControl(path, directorySecurity);
    }
    
    /// <summary>Sets the creation date and time for the specified file or directory.</summary>
    /// <param name="path">The file or directory for which to set the creation date and time information. </param>
    /// <param name="creationTime">The date and time the file or directory was last written to. This value is expressed in local time.</param>
    /// <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation. </exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetCreationTime(string path, System.DateTime creationTime)
    {
      System.IO.Directory.SetCreationTime(path, creationTime);
    }
    
    /// <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
    /// <param name="path">The file or directory for which to set the creation date and time information. </param>
    /// <param name="creationTimeUtc">The date and time the directory or file was created. This value is expressed in local time.</param>
    /// <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation. </exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
    /// <filterpriority>2</filterpriority>
    public void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc)
    {
      System.IO.Directory.SetCreationTimeUtc(path, creationTimeUtc);
    }
    
    /// <summary>Sets the application's current working directory to the specified directory.</summary>
    /// <param name="path">The path to which the current working directory is set. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code. </exception>
    /// <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
    /// <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetCurrentDirectory(string path)
    {
      System.IO.Directory.SetCurrentDirectory(path);
    }
    
    /// <summary>Sets the date and time the specified file or directory was last accessed.</summary>
    /// <param name="path">The file or directory for which to set the access date and time information. </param>
    /// <param name="lastAccessTime">An object that contains the value to set for the access date and time of <paramref name="path" />. This value is expressed in local time. </param>
    /// <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="lastAccessTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetLastAccessTime(string path, System.DateTime lastAccessTime)
    {
      System.IO.Directory.SetLastAccessTime(path, lastAccessTime);
    }
    
    /// <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
    /// <param name="path">The file or directory for which to set the access date and time information. </param>
    /// <param name="lastAccessTimeUtc">An object that  contains the value to set for the access date and time of <paramref name="path" />. This value is expressed in UTC time. </param>
    /// <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="lastAccessTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc)
    {
      System.IO.Directory.SetLastAccessTimeUtc(path, lastAccessTimeUtc);
    }
    
    /// <summary>Sets the date and time a directory was last written to.</summary>
    /// <param name="path">The path of the directory. </param>
    /// <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.  </param>
    /// <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="lastWriteTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetLastWriteTime(string path, System.DateTime lastWriteTime)
    {
      System.IO.Directory.SetLastWriteTime(path, lastWriteTime);
    }
    
    /// <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
    /// <param name="path">The path of the directory. </param>
    /// <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time. </param>
    /// <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="path" /> is null. </exception>
    /// <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    /// <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="lastWriteTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
    /// <filterpriority>2</filterpriority>
    public void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc)
    {
      System.IO.Directory.SetLastWriteTimeUtc(path, lastWriteTimeUtc);
    }
  }
}
