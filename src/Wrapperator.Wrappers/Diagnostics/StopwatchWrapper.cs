//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Diagnostics
{
  
  
  /// <summary>Provides a set of methods and properties that you can use to accurately measure elapsed time.</summary>
  /// <filterpriority>1</filterpriority>
  public class StopwatchWrapper : Wrapperator.Interfaces.Diagnostics.IStopwatch
  {
    
    public System.Diagnostics.Stopwatch _Stopwatch { get; private set; }

    
    internal StopwatchWrapper(System.Diagnostics.Stopwatch stopwatch)
    {
      _Stopwatch = stopwatch;
    }
    
    public bool IsRunning
    {
      get
      {
        return _Stopwatch.IsRunning;
      }
    }
    
    public System.TimeSpan Elapsed
    {
      get
      {
        return _Stopwatch.Elapsed;
      }
    }
    
    public long ElapsedMilliseconds
    {
      get
      {
        return _Stopwatch.ElapsedMilliseconds;
      }
    }
    
    public long ElapsedTicks
    {
      get
      {
        return _Stopwatch.ElapsedTicks;
      }
    }
    
    /// <summary>Starts, or resumes, measuring elapsed time for an interval.</summary>
    /// <filterpriority>1</filterpriority>
    public void Start()
    {
      _Stopwatch.Start();
    }
    
    /// <summary>Stops measuring elapsed time for an interval.</summary>
    /// <filterpriority>1</filterpriority>
    public void Stop()
    {
      _Stopwatch.Stop();
    }
    
    /// <summary>Stops time interval measurement and resets the elapsed time to zero.</summary>
    /// <filterpriority>1</filterpriority>
    public void Reset()
    {
      _Stopwatch.Reset();
    }
    
    /// <summary>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.</summary>
    public void Restart()
    {
      _Stopwatch.Restart();
    }
  }
}
