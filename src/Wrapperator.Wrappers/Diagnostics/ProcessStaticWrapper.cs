//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Diagnostics
{
  
  
  /// <summary>Provides access to local and remote processes and enables you to start and stop local system processes.</summary>
  /// <filterpriority>1</filterpriority>
  public class ProcessStaticWrapper : Wrapperator.Interfaces.Diagnostics.IProcessStatic
  {
    
    internal ProcessStaticWrapper()
    {
    }
    
    /// <summary>Puts a <see cref="T:System.Diagnostics.Process" /> component in state to interact with operating system processes that run in a special mode by enabling the native property SeDebugPrivilege on the current thread.</summary>
    /// <filterpriority>2</filterpriority>
    public void EnterDebugMode()
    {
      System.Diagnostics.Process.EnterDebugMode();
    }
    
    /// <summary>Takes a <see cref="T:System.Diagnostics.Process" /> component out of the state that lets it interact with operating system processes that run in a special mode.</summary>
    /// <filterpriority>2</filterpriority>
    public void LeaveDebugMode()
    {
      System.Diagnostics.Process.LeaveDebugMode();
    }
    
    /// <summary>Returns a new <see cref="T:System.Diagnostics.Process" /> component, given a process identifier and the name of a computer on the network.</summary>
    /// <returns>A <see cref="T:System.Diagnostics.Process" /> component that is associated with a remote process resource identified by the <paramref name="processId" /> parameter.</returns>
    /// <param name="processId">The system-unique identifier of a process resource. </param>
    /// <param name="machineName">The name of a computer on the network. </param>
    /// <exception cref="T:System.ArgumentException">The process specified by the <paramref name="processId" /> parameter is not running. The identifier might be expired.-or- The <paramref name="machineName" /> parameter syntax is invalid. The name might have length zero (0). </exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="machineName" /> parameter is null. </exception>
    /// <exception cref="T:System.InvalidOperationException">The process was not started by this object.</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.Diagnostics.IProcess GetProcessById(int processId, string machineName)
    {
      return new Wrapperator.Wrappers.Diagnostics.ProcessWrapper(System.Diagnostics.Process.GetProcessById(processId, machineName));
    }
    
    /// <summary>Returns a new <see cref="T:System.Diagnostics.Process" /> component, given the identifier of a process on the local computer.</summary>
    /// <returns>A <see cref="T:System.Diagnostics.Process" /> component that is associated with the local process resource identified by the <paramref name="processId" /> parameter.</returns>
    /// <param name="processId">The system-unique identifier of a process resource. </param>
    /// <exception cref="T:System.ArgumentException">The process specified by the <paramref name="processId" /> parameter is not running. The identifier might be expired. </exception>
    /// <exception cref="T:System.InvalidOperationException">The process was not started by this object.</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.Diagnostics.IProcess GetProcessById(int processId)
    {
      return new Wrapperator.Wrappers.Diagnostics.ProcessWrapper(System.Diagnostics.Process.GetProcessById(processId));
    }
    
    /// <summary>Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on the local computer that share the specified process name.</summary>
    /// <returns>An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</returns>
    /// <param name="processName">The friendly name of the process. </param>
    /// <exception cref="T:System.InvalidOperationException">There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP. </exception>
    /// <filterpriority>1</filterpriority>
    public System.Diagnostics.Process[] GetProcessesByName(string processName)
    {
      return System.Diagnostics.Process.GetProcessesByName(processName);
    }
    
    /// <summary>Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on a remote computer that share the specified process name.</summary>
    /// <returns>An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</returns>
    /// <param name="processName">The friendly name of the process. </param>
    /// <param name="machineName">The name of a computer on the network. </param>
    /// <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> parameter syntax is invalid. It might have length zero (0). </exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="machineName" /> parameter is null. </exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The operating system platform does not support this operation on remote computers. </exception>
    /// <exception cref="T:System.InvalidOperationException">There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP. </exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">A problem occurred accessing an underlying system API. </exception>
    /// <filterpriority>1</filterpriority>
    public System.Diagnostics.Process[] GetProcessesByName(string processName, string machineName)
    {
      return System.Diagnostics.Process.GetProcessesByName(processName, machineName);
    }
    
    /// <summary>Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the local computer.</summary>
    /// <returns>An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the local computer.</returns>
    /// <filterpriority>1</filterpriority>
    public System.Diagnostics.Process[] GetProcesses()
    {
      return System.Diagnostics.Process.GetProcesses();
    }
    
    /// <summary>Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the specified computer.</summary>
    /// <returns>An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the specified computer.</returns>
    /// <param name="machineName">The computer from which to read the list of processes. </param>
    /// <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> parameter syntax is invalid. It might have length zero (0). </exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="machineName" /> parameter is null. </exception>
    /// <exception cref="T:System.PlatformNotSupportedException">The operating system platform does not support this operation on remote computers. </exception>
    /// <exception cref="T:System.InvalidOperationException">There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP. </exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">A problem occurred accessing an underlying system API. </exception>
    /// <filterpriority>1</filterpriority>
    public System.Diagnostics.Process[] GetProcesses(string machineName)
    {
      return System.Diagnostics.Process.GetProcesses(machineName);
    }
    
    /// <summary>Gets a new <see cref="T:System.Diagnostics.Process" /> component and associates it with the currently active process.</summary>
    /// <returns>A new <see cref="T:System.Diagnostics.Process" /> component associated with the process resource that is running the calling application.</returns>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.Diagnostics.IProcess GetCurrentProcess()
    {
      return new Wrapperator.Wrappers.Diagnostics.ProcessWrapper(System.Diagnostics.Process.GetCurrentProcess());
    }
    
    /// <summary>Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</summary>
    /// <returns>A new <see cref="T:System.Diagnostics.Process" /> component that is associated with the process resource, or null if no process resource is started (for example, if an existing process is reused).</returns>
    /// <param name="fileName">The name of an application file to run in the process.</param>
    /// <param name="userName">The user name to use when starting the process.</param>
    /// <param name="password">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</param>
    /// <param name="domain">The domain to use when starting the process.</param>
    /// <exception cref="T:System.InvalidOperationException">No file name was specified. </exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">
    ///  <paramref name="fileName" /> is not an executable (.exe) file.</exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the associated file. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The process object has already been disposed. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.Diagnostics.IProcess Start(string fileName, string userName, System.Security.SecureString password, string domain)
    {
      return new Wrapperator.Wrappers.Diagnostics.ProcessWrapper(System.Diagnostics.Process.Start(fileName, userName, password, domain));
    }
    
    /// <summary>Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</summary>
    /// <returns>A new <see cref="T:System.Diagnostics.Process" /> component that is associated with the process resource, or null if no process resource is started (for example, if an existing process is reused).</returns>
    /// <param name="fileName">The name of an application file to run in the process. </param>
    /// <param name="arguments">Command-line arguments to pass when starting the process. </param>
    /// <param name="userName">The user name to use when starting the process.</param>
    /// <param name="password">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</param>
    /// <param name="domain">The domain to use when starting the process.</param>
    /// <exception cref="T:System.InvalidOperationException">No file name was specified.</exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">
    ///  <paramref name="fileName" /> is not an executable (.exe) file.</exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file. -or-The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080. The error message associated with this exception can be one of the following: "The data area passed to a system call is too small." or "Access is denied."</exception>
    /// <exception cref="T:System.ObjectDisposedException">The process object has already been disposed. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.Diagnostics.IProcess Start(string fileName, string arguments, string userName, System.Security.SecureString password, string domain)
    {
      return new Wrapperator.Wrappers.Diagnostics.ProcessWrapper(System.Diagnostics.Process.Start(fileName, arguments, userName, password, domain));
    }
    
    /// <summary>Starts a process resource by specifying the name of a document or application file and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</summary>
    /// <returns>A new <see cref="T:System.Diagnostics.Process" /> component that is associated with the process resource, or null, if no process resource is started (for example, if an existing process is reused).</returns>
    /// <param name="fileName">The name of a document or application file to run in the process. </param>
    /// <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The process object has already been disposed. </exception>
    /// <exception cref="T:System.IO.FileNotFoundException">The PATH environment variable has a string containing quotes.</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.Diagnostics.IProcess Start(string fileName)
    {
      return new Wrapperator.Wrappers.Diagnostics.ProcessWrapper(System.Diagnostics.Process.Start(fileName));
    }
    
    /// <summary>Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</summary>
    /// <returns>A new <see cref="T:System.Diagnostics.Process" /> component that is associated with the process, or null, if no process resource is started (for example, if an existing process is reused).</returns>
    /// <param name="fileName">The name of an application file to run in the process. </param>
    /// <param name="arguments">Command-line arguments to pass when starting the process. </param>
    /// <exception cref="T:System.InvalidOperationException">The <paramref name="fileName" /> or <paramref name="arguments" /> parameter is null. </exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file. -or-The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: "The data area passed to a system call is too small." or "Access is denied."</exception>
    /// <exception cref="T:System.ObjectDisposedException">The process object has already been disposed. </exception>
    /// <exception cref="T:System.IO.FileNotFoundException">The PATH environment variable has a string containing quotes.</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.Diagnostics.IProcess Start(string fileName, string arguments)
    {
      return new Wrapperator.Wrappers.Diagnostics.ProcessWrapper(System.Diagnostics.Process.Start(fileName, arguments));
    }
    
    /// <summary>Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</summary>
    /// <returns>A new <see cref="T:System.Diagnostics.Process" /> component that is associated with the process resource, or null if no process resource is started (for example, if an existing process is reused).</returns>
    /// <param name="startInfo">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that contains the information that is used to start the process, including the file name and any command-line arguments. </param>
    /// <exception cref="T:System.InvalidOperationException">No file name was specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property.-or- The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is true and the <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is also true.-or-The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is true and the <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> property is not null or empty or the <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> property is not null.</exception>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="startInfo" /> parameter is null. </exception>
    /// <exception cref="T:System.ObjectDisposedException">The process object has already been disposed. </exception>
    /// <exception cref="T:System.IO.FileNotFoundException">The file specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property could not be found.</exception>
    /// <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file. -or-The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: "The data area passed to a system call is too small." or "Access is denied."</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.Diagnostics.IProcess Start(Wrapperator.Interfaces.Diagnostics.IProcessStartInfo startInfo)
    {
      return new Wrapperator.Wrappers.Diagnostics.ProcessWrapper(System.Diagnostics.Process.Start(startInfo == null ? default(System.Diagnostics.ProcessStartInfo) : ((Wrapperator.Wrappers.Diagnostics.ProcessStartInfoWrapper)startInfo)._ProcessStartInfo));
    }
  }
}
