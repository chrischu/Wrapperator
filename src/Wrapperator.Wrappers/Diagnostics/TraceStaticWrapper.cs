//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Diagnostics
{
  
  
  /// <summary>Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.</summary>
  /// <filterpriority>1</filterpriority>
  public class TraceStaticWrapper : Wrapperator.Interfaces.Diagnostics.ITraceStatic
  {
    
    internal TraceStaticWrapper()
    {
    }
    
    public System.Diagnostics.TraceListenerCollection Listeners
    {
      get
      {
        return System.Diagnostics.Trace.Listeners;
      }
    }
    
    public bool AutoFlush
    {
      get
      {
        return System.Diagnostics.Trace.AutoFlush;
      }
      set
      {
        System.Diagnostics.Trace.AutoFlush = value;
      }
    }
    
    public bool UseGlobalLock
    {
      get
      {
        return System.Diagnostics.Trace.UseGlobalLock;
      }
      set
      {
        System.Diagnostics.Trace.UseGlobalLock = value;
      }
    }
    
    public System.Diagnostics.CorrelationManager CorrelationManager
    {
      get
      {
        return System.Diagnostics.Trace.CorrelationManager;
      }
    }
    
    public int IndentLevel
    {
      get
      {
        return System.Diagnostics.Trace.IndentLevel;
      }
      set
      {
        System.Diagnostics.Trace.IndentLevel = value;
      }
    }
    
    public int IndentSize
    {
      get
      {
        return System.Diagnostics.Trace.IndentSize;
      }
      set
      {
        System.Diagnostics.Trace.IndentSize = value;
      }
    }
    
    /// <summary>Flushes the output buffer, and causes buffered data to be written to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</summary>
    /// <filterpriority>1</filterpriority>
    public void Flush()
    {
      System.Diagnostics.Trace.Flush();
    }
    
    /// <summary>Flushes the output buffer, and then closes the <see cref="P:System.Diagnostics.Trace.Listeners" />.</summary>
    /// <filterpriority>1</filterpriority>
    public void Close()
    {
      System.Diagnostics.Trace.Close();
    }
    
    /// <summary>Checks for a condition; if the condition is false, displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, a failure message is not sent and the message box is not displayed.</param>
    /// <filterpriority>2</filterpriority>
    public void Assert(bool condition)
    {
      System.Diagnostics.Trace.Assert(condition);
    }
    
    /// <summary>Checks for a condition; if the condition is false, outputs a specified message and displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the specified message is not sent and the message box is not displayed.  </param>
    /// <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <filterpriority>2</filterpriority>
    public void Assert(bool condition, string message)
    {
      System.Diagnostics.Trace.Assert(condition, message);
    }
    
    /// <summary>Checks for a condition; if the condition is false, outputs two specified messages and displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.  </param>
    /// <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <param name="detailMessage">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <filterpriority>2</filterpriority>
    public void Assert(bool condition, string message, string detailMessage)
    {
      System.Diagnostics.Trace.Assert(condition, message, detailMessage);
    }
    
    /// <summary>Emits the specified error message.</summary>
    /// <param name="message">A message to emit. </param>
    /// <filterpriority>2</filterpriority>
    public void Fail(string message)
    {
      System.Diagnostics.Trace.Fail(message);
    }
    
    /// <summary>Emits an error message, and a detailed error message.</summary>
    /// <param name="message">A message to emit. </param>
    /// <param name="detailMessage">A detailed message to emit. </param>
    /// <filterpriority>2</filterpriority>
    public void Fail(string message, string detailMessage)
    {
      System.Diagnostics.Trace.Fail(message, detailMessage);
    }
    
    /// <summary>Refreshes the trace configuration data.</summary>
    /// <filterpriority>1</filterpriority>
    public void Refresh()
    {
      System.Diagnostics.Trace.Refresh();
    }
    
    /// <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</summary>
    /// <param name="message">The informative message to write.</param>
    /// <filterpriority>1</filterpriority>
    public void TraceInformation(string message)
    {
      System.Diagnostics.Trace.TraceInformation(message);
    }
    
    /// <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</summary>
    /// <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array containing zero or more objects to format.</param>
    /// <filterpriority>1</filterpriority>
    public void TraceInformation(string format, object[] args)
    {
      System.Diagnostics.Trace.TraceInformation(format, args);
    }
    
    /// <summary>Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</summary>
    /// <param name="message">The informative message to write.</param>
    /// <filterpriority>1</filterpriority>
    public void TraceWarning(string message)
    {
      System.Diagnostics.Trace.TraceWarning(message);
    }
    
    /// <summary>Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</summary>
    /// <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array containing zero or more objects to format.</param>
    /// <filterpriority>1</filterpriority>
    public void TraceWarning(string format, object[] args)
    {
      System.Diagnostics.Trace.TraceWarning(format, args);
    }
    
    /// <summary>Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</summary>
    /// <param name="message">The informative message to write.</param>
    /// <filterpriority>1</filterpriority>
    public void TraceError(string message)
    {
      System.Diagnostics.Trace.TraceError(message);
    }
    
    /// <summary>Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</summary>
    /// <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array containing zero or more objects to format.</param>
    /// <filterpriority>1</filterpriority>
    public void TraceError(string format, object[] args)
    {
      System.Diagnostics.Trace.TraceError(format, args);
    }
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>1</filterpriority>
    public void Write(string message)
    {
      System.Diagnostics.Trace.Write(message);
    }
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <filterpriority>1</filterpriority>
    public void Write(object value)
    {
      System.Diagnostics.Trace.Write(value);
    }
    
    /// <summary>Writes a category name and a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    public void Write(string message, string category)
    {
      System.Diagnostics.Trace.Write(message, category);
    }
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="value">An <see cref="T:System.Object" /> name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    public void Write(object value, string category)
    {
      System.Diagnostics.Trace.Write(value, category);
    }
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string message)
    {
      System.Diagnostics.Trace.WriteLine(message);
    }
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(object value)
    {
      System.Diagnostics.Trace.WriteLine(value);
    }
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string message, string category)
    {
      System.Diagnostics.Trace.WriteLine(message, category);
    }
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</summary>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(object value, string category)
    {
      System.Diagnostics.Trace.WriteLine(value, category);
    }
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteIf(bool condition, string message)
    {
      System.Diagnostics.Trace.WriteIf(condition, message);
    }
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteIf(bool condition, object value)
    {
      System.Diagnostics.Trace.WriteIf(condition, value);
    }
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteIf(bool condition, string message, string category)
    {
      System.Diagnostics.Trace.WriteIf(condition, message, category);
    }
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteIf(bool condition, object value, string category)
    {
      System.Diagnostics.Trace.WriteIf(condition, value, category);
    }
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteLineIf(bool condition, string message)
    {
      System.Diagnostics.Trace.WriteLineIf(condition, message);
    }
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteLineIf(bool condition, object value)
    {
      System.Diagnostics.Trace.WriteLineIf(condition, value);
    }
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteLineIf(bool condition, string message, string category)
    {
      System.Diagnostics.Trace.WriteLineIf(condition, message, category);
    }
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>1</filterpriority>
    public void WriteLineIf(bool condition, object value, string category)
    {
      System.Diagnostics.Trace.WriteLineIf(condition, value, category);
    }
    
    /// <summary>Increases the current <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.</summary>
    /// <filterpriority>2</filterpriority>
    public void Indent()
    {
      System.Diagnostics.Trace.Indent();
    }
    
    /// <summary>Decreases the current <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.</summary>
    /// <filterpriority>2</filterpriority>
    public void Unindent()
    {
      System.Diagnostics.Trace.Unindent();
    }
  }
}
