//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Diagnostics
{
  
  
  /// <summary>Provides a set of methods and properties that help debug your code. This class cannot be inherited.</summary>
  /// <filterpriority>1</filterpriority>
  public class DebugStaticWrapper : Wrapperator.Interfaces.Diagnostics.IDebugStatic
  {
    
    internal DebugStaticWrapper()
    {
    }
    
    public System.Diagnostics.TraceListenerCollection Listeners
    {
      get
      {
        return System.Diagnostics.Debug.Listeners;
      }
    }
    
    public bool AutoFlush
    {
      get
      {
        return System.Diagnostics.Debug.AutoFlush;
      }
      set
      {
        System.Diagnostics.Debug.AutoFlush = value;
      }
    }
    
    public int IndentLevel
    {
      get
      {
        return System.Diagnostics.Debug.IndentLevel;
      }
      set
      {
        System.Diagnostics.Debug.IndentLevel = value;
      }
    }
    
    public int IndentSize
    {
      get
      {
        return System.Diagnostics.Debug.IndentSize;
      }
      set
      {
        System.Diagnostics.Debug.IndentSize = value;
      }
    }
    
    /// <summary>Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <filterpriority>2</filterpriority>
    public void Flush()
    {
      System.Diagnostics.Debug.Flush();
    }
    
    /// <summary>Flushes the output buffer and then calls the Close method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
    /// <filterpriority>2</filterpriority>
    public void Close()
    {
      System.Diagnostics.Debug.Close();
    }
    
    /// <summary>Checks for a condition; if the condition is false, displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, a failure message is not sent and the message box is not displayed.</param>
    /// <filterpriority>1</filterpriority>
    public void Assert(bool condition)
    {
      System.Diagnostics.Debug.Assert(condition);
    }
    
    /// <summary>Checks for a condition; if the condition is false, outputs a specified message and displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the specified message is not sent and the message box is not displayed.  </param>
    /// <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <filterpriority>1</filterpriority>
    public void Assert(bool condition, string message)
    {
      System.Diagnostics.Debug.Assert(condition, message);
    }
    
    /// <summary>Checks for a condition; if the condition is false, outputs two specified messages and displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.  </param>
    /// <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <param name="detailMessage">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <filterpriority>1</filterpriority>
    public void Assert(bool condition, string message, string detailMessage)
    {
      System.Diagnostics.Debug.Assert(condition, message, detailMessage);
    }
    
    /// <summary>Checks for a condition; if the condition is false, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.  </param>
    /// <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
    /// <param name="detailMessageFormat">The composite format string (see Remarks) to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. This message contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array that contains zero or more objects to format.</param>
    public void Assert(bool condition, string message, string detailMessageFormat, object[] args)
    {
      System.Diagnostics.Debug.Assert(condition, message, detailMessageFormat, args);
    }
    
    /// <summary>Emits the specified error message.</summary>
    /// <param name="message">A message to emit. </param>
    /// <filterpriority>2</filterpriority>
    public void Fail(string message)
    {
      System.Diagnostics.Debug.Fail(message);
    }
    
    /// <summary>Emits an error message and a detailed error message.</summary>
    /// <param name="message">A message to emit. </param>
    /// <param name="detailMessage">A detailed message to emit. </param>
    /// <filterpriority>2</filterpriority>
    public void Fail(string message, string detailMessage)
    {
      System.Diagnostics.Debug.Fail(message, detailMessage);
    }
    
    /// <summary>Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="message">The message to write.</param>
    /// <filterpriority>1</filterpriority>
    public void Print(string message)
    {
      System.Diagnostics.Debug.Print(message);
    }
    
    /// <summary>Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array containing zero or more objects to format. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is invalid.-or- The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format. </exception>
    /// <filterpriority>1</filterpriority>
    public void Print(string format, object[] args)
    {
      System.Diagnostics.Debug.Print(format, args);
    }
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>2</filterpriority>
    public void Write(string message)
    {
      System.Diagnostics.Debug.Write(message);
    }
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
    /// <filterpriority>2</filterpriority>
    public void Write(object value)
    {
      System.Diagnostics.Debug.Write(value);
    }
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>2</filterpriority>
    public void Write(string message, string category)
    {
      System.Diagnostics.Debug.Write(message, category);
    }
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>2</filterpriority>
    public void Write(object value, string category)
    {
      System.Diagnostics.Debug.Write(value, category);
    }
    
    /// <summary>Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteLine(string message)
    {
      System.Diagnostics.Debug.WriteLine(message);
    }
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteLine(object value)
    {
      System.Diagnostics.Debug.WriteLine(value);
    }
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteLine(string message, string category)
    {
      System.Diagnostics.Debug.WriteLine(message, category);
    }
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteLine(object value, string category)
    {
      System.Diagnostics.Debug.WriteLine(value, category);
    }
    
    /// <summary>Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</summary>
    /// <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
    /// <param name="args">An object array that contains zero or more objects to format. </param>
    public void WriteLine(string format, object[] args)
    {
      System.Diagnostics.Debug.WriteLine(format, args);
    }
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the message is written to the trace listeners in the collection.</param>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteIf(bool condition, string message)
    {
      System.Diagnostics.Debug.WriteIf(condition, message);
    }
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the value is written to the trace listeners in the collection.</param>
    /// <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteIf(bool condition, object value)
    {
      System.Diagnostics.Debug.WriteIf(condition, value);
    }
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the category name and message are written to the trace listeners in the collection.</param>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteIf(bool condition, string message, string category)
    {
      System.Diagnostics.Debug.WriteIf(condition, message, category);
    }
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the category name and value are written to the trace listeners in the collection.</param>
    /// <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteIf(bool condition, object value, string category)
    {
      System.Diagnostics.Debug.WriteIf(condition, value, category);
    }
    
    /// <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the message is written to the trace listeners in the collection.</param>
    /// <param name="message">A message to write. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteLineIf(bool condition, string message)
    {
      System.Diagnostics.Debug.WriteLineIf(condition, message);
    }
    
    /// <summary>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the value is written to the trace listeners in the collection.</param>
    /// <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteLineIf(bool condition, object value)
    {
      System.Diagnostics.Debug.WriteLineIf(condition, value);
    }
    
    /// <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">true to cause a message to be written; otherwise, false. </param>
    /// <param name="message">A message to write. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteLineIf(bool condition, string message, string category)
    {
      System.Diagnostics.Debug.WriteLineIf(condition, message, category);
    }
    
    /// <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</summary>
    /// <param name="condition">The conditional expression to evaluate. If the condition is true, the category name and value are written to the trace listeners in the collection.</param>
    /// <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
    /// <param name="category">A category name used to organize the output. </param>
    /// <filterpriority>2</filterpriority>
    public void WriteLineIf(bool condition, object value, string category)
    {
      System.Diagnostics.Debug.WriteLineIf(condition, value, category);
    }
    
    /// <summary>Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</summary>
    /// <filterpriority>2</filterpriority>
    public void Indent()
    {
      System.Diagnostics.Debug.Indent();
    }
    
    /// <summary>Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</summary>
    /// <filterpriority>2</filterpriority>
    public void Unindent()
    {
      System.Diagnostics.Debug.Unindent();
    }
  }
}
