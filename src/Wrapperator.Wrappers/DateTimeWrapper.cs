//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers
{
  
  
  /// <summary>Represents an instant in time, typically expressed as a date and time of day. To browse the .NET Framework source code for this type, see the Reference Source.</summary>
  /// <filterpriority>1</filterpriority>
  public partial class DateTimeWrapper : Wrapperator.Interfaces.IDateTime
  {
    
    private System.DateTime _dateTime;
    
    public static implicit operator System.DateTime (DateTimeWrapper wrapper)
    {
      if (wrapper == null) return default(System.DateTime);
      return wrapper._dateTime;
    }
    
    public DateTimeWrapper(System.DateTime dateTime)
    {
      _dateTime = dateTime;
    }
    
    public System.DateTime Date
    {
      get
      {
        return _dateTime.Date;
      }
    }
    
    public int Day
    {
      get
      {
        return _dateTime.Day;
      }
    }
    
    public System.DayOfWeek DayOfWeek
    {
      get
      {
        return _dateTime.DayOfWeek;
      }
    }
    
    public int DayOfYear
    {
      get
      {
        return _dateTime.DayOfYear;
      }
    }
    
    public int Hour
    {
      get
      {
        return _dateTime.Hour;
      }
    }
    
    public System.DateTimeKind Kind
    {
      get
      {
        return _dateTime.Kind;
      }
    }
    
    public int Millisecond
    {
      get
      {
        return _dateTime.Millisecond;
      }
    }
    
    public int Minute
    {
      get
      {
        return _dateTime.Minute;
      }
    }
    
    public int Month
    {
      get
      {
        return _dateTime.Month;
      }
    }
    
    public System.DateTime Now
    {
      get
      {
        return System.DateTime.Now;
      }
    }
    
    public int Second
    {
      get
      {
        return _dateTime.Second;
      }
    }
    
    public long Ticks
    {
      get
      {
        return _dateTime.Ticks;
      }
    }
    
    public System.TimeSpan TimeOfDay
    {
      get
      {
        return _dateTime.TimeOfDay;
      }
    }
    
    public System.DateTime Today
    {
      get
      {
        return System.DateTime.Today;
      }
    }
    
    public System.DateTime UtcNow
    {
      get
      {
        return System.DateTime.UtcNow;
      }
    }
    
    public int Year
    {
      get
      {
        return _dateTime.Year;
      }
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
    /// <param name="value">A positive or negative time interval. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime Add(System.TimeSpan value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.Add(value));
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
    /// <param name="value">A number of whole and fractional days. The <paramref name="value" /> parameter can be negative or positive. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime AddDays(double value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.AddDays(value));
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
    /// <param name="value">A number of whole and fractional hours. The <paramref name="value" /> parameter can be negative or positive. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime AddHours(double value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.AddHours(value));
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
    /// <param name="value">A number of whole and fractional milliseconds. The <paramref name="value" /> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime AddMilliseconds(double value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.AddMilliseconds(value));
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
    /// <param name="value">A number of whole and fractional minutes. The <paramref name="value" /> parameter can be negative or positive. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime AddMinutes(double value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.AddMinutes(value));
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
    /// <param name="months">A number of months. The <paramref name="months" /> parameter can be negative or positive. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.-or- <paramref name="months" /> is less than -120,000 or greater than 120,000. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime AddMonths(int months)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.AddMonths(months));
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
    /// <param name="value">A number of whole and fractional seconds. The <paramref name="value" /> parameter can be negative or positive. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime AddSeconds(double value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.AddSeconds(value));
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
    /// <param name="value">A number of 100-nanosecond ticks. The <paramref name="value" /> parameter can be positive or negative. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime AddTicks(long value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.AddTicks(value));
    }
    
    /// <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
    /// <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
    /// <param name="value">A number of years. The <paramref name="value" /> parameter can be negative or positive. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime AddYears(int value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.AddYears(value));
    }
    
    /// <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
    /// <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.Value Type Condition Less than zero <paramref name="t1" /> is earlier than <paramref name="t2" />. Zero <paramref name="t1" /> is the same as <paramref name="t2" />. Greater than zero <paramref name="t1" /> is later than <paramref name="t2" />. </returns>
    /// <param name="t1">The first object to compare. </param>
    /// <param name="t2">The second object to compare. </param>
    /// <filterpriority>1</filterpriority>
    public int Compare(System.DateTime t1, System.DateTime t2)
    {
      return System.DateTime.Compare(t1, t2);
    }
    
    /// <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
    /// <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description Less than zero This instance is earlier than <paramref name="value" />. Zero This instance is the same as <paramref name="value" />. Greater than zero This instance is later than <paramref name="value" />, or <paramref name="value" /> is null. </returns>
    /// <param name="value">A boxed object to compare, or null. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="value" /> is not a <see cref="T:System.DateTime" />. </exception>
    /// <filterpriority>2</filterpriority>
    public int CompareTo(object value)
    {
      return _dateTime.CompareTo(value);
    }
    
    /// <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
    /// <returns>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.Value Description Less than zero This instance is earlier than <paramref name="value" />. Zero This instance is the same as <paramref name="value" />. Greater than zero This instance is later than <paramref name="value" />. </returns>
    /// <param name="value">The object to compare to the current instance. </param>
    /// <filterpriority>2</filterpriority>
    public int CompareTo(System.DateTime value)
    {
      return _dateTime.CompareTo(value);
    }
    
    /// <summary>Returns the number of days in the specified month and year.</summary>
    /// <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</returns>
    /// <param name="year">The year. </param>
    /// <param name="month">The month (a number ranging from 1 to 12). </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="month" /> is less than 1 or greater than 12.-or-<paramref name="year" /> is less than 1 or greater than 9999.</exception>
    /// <filterpriority>1</filterpriority>
    public int DaysInMonth(int year, int month)
    {
      return System.DateTime.DaysInMonth(year, month);
    }
    
    /// <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
    /// <returns>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</returns>
    /// <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime FromBinary(long dateData)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.FromBinary(dateData));
    }
    
    /// <summary>Converts the specified Windows file time to an equivalent local time.</summary>
    /// <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
    /// <param name="fileTime">A Windows file time expressed in ticks. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime FromFileTime(long fileTime)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.FromFileTime(fileTime));
    }
    
    /// <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
    /// <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
    /// <param name="fileTime">A Windows file time expressed in ticks. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime FromFileTimeUtc(long fileTime)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.FromFileTimeUtc(fileTime));
    }
    
    /// <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</summary>
    /// <returns>An object that represents the same date and time as <paramref name="d" />.</returns>
    /// <param name="d">An OLE Automation Date value. </param>
    /// <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime FromOADate(double d)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.FromOADate(d));
    }
    
    /// <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
    /// <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
    /// <filterpriority>2</filterpriority>
    public string[] GetDateTimeFormats()
    {
      return _dateTime.GetDateTimeFormats();
    }
    
    /// <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</summary>
    /// <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
    /// <param name="provider">An object that supplies culture-specific formatting information about this instance. </param>
    /// <filterpriority>2</filterpriority>
    public string[] GetDateTimeFormats(System.IFormatProvider provider)
    {
      return _dateTime.GetDateTimeFormats(provider);
    }
    
    /// <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</summary>
    /// <returns>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</returns>
    /// <param name="format">A standard date and time format string (see Remarks). </param>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
    /// <filterpriority>2</filterpriority>
    public string[] GetDateTimeFormats(char format)
    {
      return _dateTime.GetDateTimeFormats(format);
    }
    
    /// <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</summary>
    /// <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
    /// <param name="format">A date and time format string (see Remarks). </param>
    /// <param name="provider">An object that supplies culture-specific formatting information about this instance. </param>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
    /// <filterpriority>2</filterpriority>
    public string[] GetDateTimeFormats(char format, System.IFormatProvider provider)
    {
      return _dateTime.GetDateTimeFormats(format, provider);
    }
    
    /// <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
    /// <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
    /// <filterpriority>2</filterpriority>
    public System.TypeCode GetTypeCode()
    {
      return _dateTime.GetTypeCode();
    }
    
    /// <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</summary>
    /// <returns>true if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; false if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
    /// <filterpriority>2</filterpriority>
    public bool IsDaylightSavingTime()
    {
      return _dateTime.IsDaylightSavingTime();
    }
    
    /// <summary>Returns an indication whether the specified year is a leap year.</summary>
    /// <returns>true if <paramref name="year" /> is a leap year; otherwise, false.</returns>
    /// <param name="year">A 4-digit year. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="year" /> is less than 1 or greater than 9999.</exception>
    /// <filterpriority>1</filterpriority>
    public bool IsLeapYear(int year)
    {
      return System.DateTime.IsLeapYear(year);
    }
    
    /// <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</summary>
    /// <returns>An object that is equivalent to the date and time contained in <paramref name="s" />.</returns>
    /// <param name="s">A string that contains a date and time to convert. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="s" /> is null. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime Parse(string s)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.Parse(s));
    }
    
    /// <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</summary>
    /// <returns>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
    /// <param name="s">A string that contains a date and time to convert. </param>
    /// <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="s" /> is null. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime Parse(string s, System.IFormatProvider provider)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.Parse(s, provider));
    }
    
    /// <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and formatting style.</summary>
    /// <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
    /// <param name="s">A string that contains a date and time to convert. </param>
    /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
    /// <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="s" /> is null. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IDateTime Parse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.Parse(s, provider, styles));
    }
    
    /// <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
    /// <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    /// <param name="s">A string that contains a date and time to convert. </param>
    /// <param name="format">A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section. </param>
    /// <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="s" /> or <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="s" /> or <paramref name="format" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />. -or-The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime ParseExact(string s, string format, System.IFormatProvider provider)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.ParseExact(s, format, provider));
    }
    
    /// <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
    /// <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
    /// <param name="s">A string containing a date and time to convert. </param>
    /// <param name="format">A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section. </param>
    /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
    /// <param name="style">A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="s" /> or <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="s" /> or <paramref name="format" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />. -or-The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime ParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.ParseExact(s, format, provider, style));
    }
    
    /// <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
    /// <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
    /// <param name="s">A string that contains a date and time to convert. </param>
    /// <param name="formats">An array of allowable formats of <paramref name="s" />. For more information, see the Remarks section. </param>
    /// <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
    /// <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="s" /> or <paramref name="formats" /> is null. </exception>
    /// <exception cref="T:System.FormatException">
    ///  <paramref name="s" /> is an empty string. -or- an element of <paramref name="formats" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />. -or-The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime ParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.ParseExact(s, formats, provider, style));
    }
    
    /// <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
    /// <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter. </returns>
    /// <param name="value">A date and time. </param>
    /// <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime SpecifyKind(System.DateTime value, System.DateTimeKind kind)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(System.DateTime.SpecifyKind(value, kind));
    }
    
    /// <summary>Subtracts the specified date and time from this instance.</summary>
    /// <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
    /// <param name="value">The date and time value to subtract. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public System.TimeSpan Subtract(System.DateTime value)
    {
      return _dateTime.Subtract(value);
    }
    
    /// <summary>Subtracts the specified duration from this instance.</summary>
    /// <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
    /// <param name="value">The time interval to subtract. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime Subtract(System.TimeSpan value)
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.Subtract(value));
    }
    
    /// <summary>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</summary>
    /// <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties. </returns>
    /// <filterpriority>2</filterpriority>
    public long ToBinary()
    {
      return _dateTime.ToBinary();
    }
    
    /// <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
    /// <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </exception>
    /// <filterpriority>2</filterpriority>
    public long ToFileTime()
    {
      return _dateTime.ToFileTime();
    }
    
    /// <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
    /// <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </exception>
    /// <filterpriority>2</filterpriority>
    public long ToFileTimeUtc()
    {
      return _dateTime.ToFileTimeUtc();
    }
    
    /// <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
    /// <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime ToLocalTime()
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.ToLocalTime());
    }
    
    /// <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
    /// <returns>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    /// <filterpriority>2</filterpriority>
    public string ToLongDateString()
    {
      return _dateTime.ToLongDateString();
    }
    
    /// <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
    /// <returns>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    /// <filterpriority>2</filterpriority>
    public string ToLongTimeString()
    {
      return _dateTime.ToLongTimeString();
    }
    
    /// <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
    /// <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
    /// <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date. </exception>
    /// <filterpriority>2</filterpriority>
    public double ToOADate()
    {
      return _dateTime.ToOADate();
    }
    
    /// <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
    /// <returns>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    /// <filterpriority>2</filterpriority>
    public string ToShortDateString()
    {
      return _dateTime.ToShortDateString();
    }
    
    /// <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
    /// <returns>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    /// <filterpriority>2</filterpriority>
    public string ToShortTimeString()
    {
      return _dateTime.ToShortTimeString();
    }
    
    /// <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
    /// <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.IDateTime ToUniversalTime()
    {
      return new Wrapperator.Wrappers.DateTimeWrapper(_dateTime.ToUniversalTime());
    }
    
    /// <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
    /// <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
    /// <param name="s">A string containing a date and time to convert. </param>
    /// <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. </param>
    /// <filterpriority>1</filterpriority>
    public bool TryParse(string s, ref System.DateTime result)
    {
      return System.DateTime.TryParse(s, out result);
    }
    
    /// <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
    /// <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
    /// <param name="s">A string containing a date and time to convert. </param>
    /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
    /// <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
    /// <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    /// <exception cref="T:System.NotSupportedException">
    ///  <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
    /// <filterpriority>1</filterpriority>
    public bool TryParse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles, ref System.DateTime result)
    {
      return System.DateTime.TryParse(s, provider, styles, out result);
    }
    
    /// <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
    /// <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
    /// <param name="s">A string containing a date and time to convert. </param>
    /// <param name="format">The required format of <paramref name="s" />. See the Remarks section for more information. </param>
    /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
    /// <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s" />. </param>
    /// <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is null, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    /// <filterpriority>1</filterpriority>
    public bool TryParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, ref System.DateTime result)
    {
      return System.DateTime.TryParseExact(s, format, provider, style, out result);
    }
    
    /// <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
    /// <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
    /// <param name="s">A string that contains a date and time to convert. </param>
    /// <param name="formats">An array of allowable formats of <paramref name="s" />. See the Remarks section for more information. </param>
    /// <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
    /// <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
    /// <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s" /> or <paramref name="formats" /> is null, <paramref name="s" /> or an element of <paramref name="formats" /> is an empty string, or the format of <paramref name="s" /> is not exactly as specified by at least one of the format patterns in <paramref name="formats" />. This parameter is passed uninitialized. </param>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    /// <filterpriority>1</filterpriority>
    public bool TryParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, ref System.DateTime result)
    {
      return System.DateTime.TryParseExact(s, formats, provider, style, out result);
    }
  }
}
