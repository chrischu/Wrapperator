//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Xml.Linq
{
  
  
  /// <summary>Represents an XML element.</summary>
  public partial class XElementWrapper : XContainerWrapper, Wrapperator.Interfaces.Xml.Linq.IXElement
  {
    
    private System.Xml.Linq.XElement _xElement;
    
    public XElementWrapper(System.Xml.Linq.XElement xElement) : 
        base(xElement)
    {
      _xElement = xElement;
    }
    
    public new string BaseUri
    {
      get
      {
        return _xElement.BaseUri;
      }
    }
    
    public new System.Xml.Linq.XDocument Document
    {
      get
      {
        return _xElement.Document;
      }
    }
    
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> EmptySequence
    {
      get
      {
        return System.Xml.Linq.XElement.EmptySequence;
      }
    }
    
    public System.Xml.Linq.XAttribute FirstAttribute
    {
      get
      {
        return _xElement.FirstAttribute;
      }
    }
    
    public new System.Xml.Linq.XNode FirstNode
    {
      get
      {
        return _xElement.FirstNode;
      }
    }
    
    public bool HasAttributes
    {
      get
      {
        return _xElement.HasAttributes;
      }
    }
    
    public bool HasElements
    {
      get
      {
        return _xElement.HasElements;
      }
    }
    
    public bool IsEmpty
    {
      get
      {
        return _xElement.IsEmpty;
      }
    }
    
    public System.Xml.Linq.XAttribute LastAttribute
    {
      get
      {
        return _xElement.LastAttribute;
      }
    }
    
    public new System.Xml.Linq.XNode LastNode
    {
      get
      {
        return _xElement.LastNode;
      }
    }
    
    public System.Xml.Linq.XName Name
    {
      get
      {
        return _xElement.Name;
      }
      set
      {
        _xElement.Name = value;
      }
    }
    
    public new System.Xml.Linq.XNode NextNode
    {
      get
      {
        return _xElement.NextNode;
      }
    }
    
    public new System.Xml.XmlNodeType NodeType
    {
      get
      {
        return _xElement.NodeType;
      }
    }
    
    public new System.Xml.Linq.XElement Parent
    {
      get
      {
        return _xElement.Parent;
      }
    }
    
    public new System.Xml.Linq.XNode PreviousNode
    {
      get
      {
        return _xElement.PreviousNode;
      }
    }
    
    public string Value
    {
      get
      {
        return _xElement.Value;
      }
      set
      {
        _xElement.Value = value;
      }
    }
    
    /// <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    /// <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    public new void Add(object content)
    {
      _xElement.Add(content);
    }
    
    /// <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    public new void Add(object[] content)
    {
      _xElement.Add(content);
    }
    
    /// <summary>Adds the specified content immediately after this node.</summary>
    /// <param name="content">A content object that contains simple content or a collection of content objects to be added after this node.</param>
    /// <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    public new void AddAfterSelf(object content)
    {
      _xElement.AddAfterSelf(content);
    }
    
    /// <summary>Adds the specified content immediately after this node.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    /// <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    public new void AddAfterSelf(object[] content)
    {
      _xElement.AddAfterSelf(content);
    }
    
    /// <summary>Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <param name="annotation">An <see cref="T:System.Object" /> that contains the annotation to add.</param>
    public new void AddAnnotation(object annotation)
    {
      _xElement.AddAnnotation(annotation);
    }
    
    /// <summary>Adds the specified content immediately before this node.</summary>
    /// <param name="content">A content object that contains simple content or a collection of content objects to be added before this node.</param>
    /// <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    public new void AddBeforeSelf(object content)
    {
      _xElement.AddBeforeSelf(content);
    }
    
    /// <summary>Adds the specified content immediately before this node.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    /// <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    public new void AddBeforeSelf(object[] content)
    {
      _xElement.AddBeforeSelf(content);
    }
    
    /// <summary>Adds the specified content as the first children of this document or element.</summary>
    /// <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    public new void AddFirst(object content)
    {
      _xElement.AddFirst(content);
    }
    
    /// <summary>Adds the specified content as the first children of this document or element.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    /// <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    public new void AddFirst(object[] content)
    {
      _xElement.AddFirst(content);
    }
    
    /// <summary>Returns a collection of the ancestor elements of this node.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors()
    {
      return _xElement.Ancestors();
    }
    
    /// <summary>Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.The nodes in the returned collection are in reverse document order.This method uses deferred execution.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors(System.Xml.Linq.XName name)
    {
      return _xElement.Ancestors(name);
    }
    
    /// <summary>Returns a collection of elements that contain this element, and the ancestors of this element. </summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element. </returns>
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf()
    {
      return _xElement.AncestorsAndSelf();
    }
    
    /// <summary>Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(System.Xml.Linq.XName name)
    {
      return _xElement.AncestorsAndSelf(name);
    }
    
    /// <summary>Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <returns>The <see cref="T:System.Object" /> that contains the first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
    /// <param name="type">The <see cref="T:System.Type" /> of the annotation to retrieve.</param>
    public new object Annotation(System.Type type)
    {
      return _xElement.Annotation(type);
    }
    
    /// <summary>Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />. </summary>
    /// <returns>The first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
    /// <typeparam name="T">The type of the annotation to retrieve.</typeparam>
    public new T Annotation<T>()
      where T :  class
    {
      return _xElement.Annotation<T>();
    }
    
    /// <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    /// <param name="type">The <see cref="T:System.Type" /> of the annotations to retrieve.</param>
    public new System.Collections.Generic.IEnumerable<object> Annotations(System.Type type)
    {
      return _xElement.Annotations(type);
    }
    
    /// <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    /// <typeparam name="T">The type of the annotations to retrieve.</typeparam>
    public new System.Collections.Generic.IEnumerable<T> Annotations<T>()
      where T :  class
    {
      return _xElement.Annotations<T>();
    }
    
    /// <summary>Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; null if there is no attribute with the specified name.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXAttribute Attribute(System.Xml.Linq.XName name)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XAttributeWrapper(_xElement.Attribute(name));
    }
    
    /// <summary>Returns a collection of attributes of this element.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</returns>
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes()
    {
      return _xElement.Attributes();
    }
    
    /// <summary>Returns a filtered collection of attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(System.Xml.Linq.XName name)
    {
      return _xElement.Attributes(name);
    }
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</summary>
    /// <returns>An <see cref="T:System.Xml.XmlReader" /> that can be used to read this node and its descendants.</returns>
    /// <filterpriority>2</filterpriority>
    public new Wrapperator.Interfaces.Xml.IXmlReader CreateReader()
    {
      return new Wrapperator.Wrappers.Xml.XmlReaderWrapper(_xElement.CreateReader());
    }
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlReader" /> with the options specified by the <paramref name="readerOptions" /> parameter.</summary>
    /// <returns>An <see cref="T:System.Xml.XmlReader" /> object.</returns>
    /// <param name="readerOptions">A <see cref="T:System.Xml.Linq.ReaderOptions" /> object that specifies whether to omit duplicate namespaces.</param>
    public new Wrapperator.Interfaces.Xml.IXmlReader CreateReader(System.Xml.Linq.ReaderOptions readerOptions)
    {
      return new Wrapperator.Wrappers.Xml.XmlReaderWrapper(_xElement.CreateReader(readerOptions));
    }
    
    /// <summary>Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    /// <returns>An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.</returns>
    /// <filterpriority>2</filterpriority>
    public new Wrapperator.Interfaces.Xml.IXmlWriter CreateWriter()
    {
      return new Wrapperator.Wrappers.Xml.XmlWriterWrapper(_xElement.CreateWriter());
    }
    
    /// <summary>Returns a collection of the descendant nodes for this document or element, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodes()
    {
      return _xElement.DescendantNodes();
    }
    
    /// <summary>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</returns>
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf()
    {
      return _xElement.DescendantNodesAndSelf();
    }
    
    /// <summary>Returns a collection of the descendant elements for this document or element, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants()
    {
      return _xElement.Descendants();
    }
    
    /// <summary>Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants(System.Xml.Linq.XName name)
    {
      return _xElement.Descendants(name);
    }
    
    /// <summary>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</returns>
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf()
    {
      return _xElement.DescendantsAndSelf();
    }
    
    /// <summary>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(System.Xml.Linq.XName name)
    {
      return _xElement.DescendantsAndSelf(name);
    }
    
    /// <summary>Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
    /// <returns>A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or null.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public new Wrapperator.Interfaces.Xml.Linq.IXElement Element(System.Xml.Linq.XName name)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(_xElement.Element(name));
    }
    
    /// <summary>Returns a collection of the child elements of this element or document, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements()
    {
      return _xElement.Elements();
    }
    
    /// <summary>Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements(System.Xml.Linq.XName name)
    {
      return _xElement.Elements(name);
    }
    
    /// <summary>Returns a collection of the sibling elements after this node, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsAfterSelf()
    {
      return _xElement.ElementsAfterSelf();
    }
    
    /// <summary>Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsAfterSelf(System.Xml.Linq.XName name)
    {
      return _xElement.ElementsAfterSelf(name);
    }
    
    /// <summary>Returns a collection of the sibling elements before this node, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsBeforeSelf()
    {
      return _xElement.ElementsBeforeSelf();
    }
    
    /// <summary>Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
    /// <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsBeforeSelf(System.Xml.Linq.XName name)
    {
      return _xElement.ElementsBeforeSelf(name);
    }
    
    /// <summary>Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.Xml.Linq.IXNamespace GetDefaultNamespace()
    {
      return new Wrapperator.Wrappers.Xml.Linq.XNamespaceWrapper(_xElement.GetDefaultNamespace());
    }
    
    /// <summary>Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</returns>
    /// <param name="prefix">A string that contains the namespace prefix to look up.</param>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.Xml.Linq.IXNamespace GetNamespaceOfPrefix(string prefix)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XNamespaceWrapper(_xElement.GetNamespaceOfPrefix(prefix));
    }
    
    /// <summary>Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    /// <returns>A <see cref="T:System.String" /> that contains the namespace prefix.</returns>
    /// <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</param>
    /// <filterpriority>2</filterpriority>
    public string GetPrefixOfNamespace(System.Xml.Linq.XNamespace ns)
    {
      return _xElement.GetPrefixOfNamespace(ns);
    }
    
    /// <summary>Determines if the current node appears after a specified node in terms of document order.</summary>
    /// <returns>true if this node appears after the specified node; otherwise false.</returns>
    /// <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</param>
    public new bool IsAfter(System.Xml.Linq.XNode node)
    {
      return _xElement.IsAfter(node);
    }
    
    /// <summary>Determines if the current node appears before a specified node in terms of document order.</summary>
    /// <returns>true if this node appears before the specified node; otherwise false.</returns>
    /// <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</param>
    public new bool IsBefore(System.Xml.Linq.XNode node)
    {
      return _xElement.IsBefore(node);
    }
    
    /// <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</returns>
    /// <param name="uri">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Load(string uri)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Load(uri));
    }
    
    /// <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</returns>
    /// <param name="uri">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Load(string uri, System.Xml.Linq.LoadOptions options)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Load(uri, options));
    }
    
    /// <summary>Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</returns>
    /// <param name="stream">The stream that contains the XML data.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Load(System.IO.Stream stream)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Load(stream));
    }
    
    /// <summary>Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</returns>
    /// <param name="stream">The stream containing the XML data.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Load(System.IO.Stream stream, System.Xml.Linq.LoadOptions options)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Load(stream, options));
    }
    
    /// <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />. </summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
    /// <param name="textReader">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Load(System.IO.TextReader textReader)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Load(textReader));
    }
    
    /// <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information. </summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
    /// <param name="textReader">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Load(System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Load(textReader, options));
    }
    
    /// <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />. </summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
    /// <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Load(System.Xml.XmlReader reader)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Load(reader));
    }
    
    /// <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
    /// <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Load(System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Load(reader, options));
    }
    
    /// <summary>Returns a collection of the child nodes of this element or document, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> Nodes()
    {
      return _xElement.Nodes();
    }
    
    /// <summary>Returns a collection of the sibling nodes after this node, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes after this node, in document order.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> NodesAfterSelf()
    {
      return _xElement.NodesAfterSelf();
    }
    
    /// <summary>Returns a collection of the sibling nodes before this node, in document order.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes before this node, in document order.</returns>
    public new System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> NodesBeforeSelf()
    {
      return _xElement.NodesBeforeSelf();
    }
    
    /// <summary>Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</returns>
    /// <param name="text">A <see cref="T:System.String" /> that contains XML.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Parse(string text)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Parse(text));
    }
    
    /// <summary>Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</returns>
    /// <param name="text">A <see cref="T:System.String" /> that contains XML.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    public Wrapperator.Interfaces.Xml.Linq.IXElement Parse(string text, System.Xml.Linq.LoadOptions options)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XElementWrapper(System.Xml.Linq.XElement.Parse(text, options));
    }
    
    /// <summary>Removes this node from its parent.</summary>
    /// <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    public new void Remove()
    {
      _xElement.Remove();
    }
    
    /// <summary>Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    public void RemoveAll()
    {
      _xElement.RemoveAll();
    }
    
    /// <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <param name="type">The <see cref="T:System.Type" /> of annotations to remove.</param>
    public new void RemoveAnnotations(System.Type type)
    {
      _xElement.RemoveAnnotations(type);
    }
    
    /// <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <typeparam name="T">The type of annotations to remove.</typeparam>
    public new void RemoveAnnotations<T>()
      where T :  class
    {
      _xElement.RemoveAnnotations<T>();
    }
    
    /// <summary>Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    public void RemoveAttributes()
    {
      _xElement.RemoveAttributes();
    }
    
    /// <summary>Removes the child nodes from this document or element.</summary>
    public new void RemoveNodes()
    {
      _xElement.RemoveNodes();
    }
    
    /// <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
    /// <param name="content">The content that will replace the child nodes and attributes of this element.</param>
    public void ReplaceAll(object content)
    {
      _xElement.ReplaceAll(content);
    }
    
    /// <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    public void ReplaceAll(object[] content)
    {
      _xElement.ReplaceAll(content);
    }
    
    /// <summary>Replaces the attributes of this element with the specified content.</summary>
    /// <param name="content">The content that will replace the attributes of this element.</param>
    public void ReplaceAttributes(object content)
    {
      _xElement.ReplaceAttributes(content);
    }
    
    /// <summary>Replaces the attributes of this element with the specified content.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    public void ReplaceAttributes(object[] content)
    {
      _xElement.ReplaceAttributes(content);
    }
    
    /// <summary>Replaces the children nodes of this document or element with the specified content.</summary>
    /// <param name="content">A content object containing simple content or a collection of content objects that replace the children nodes.</param>
    public new void ReplaceNodes(object content)
    {
      _xElement.ReplaceNodes(content);
    }
    
    /// <summary>Replaces the children nodes of this document or element with the specified content.</summary>
    /// <param name="content">A parameter list of content objects.</param>
    public new void ReplaceNodes(object[] content)
    {
      _xElement.ReplaceNodes(content);
    }
    
    /// <summary>Replaces this node with the specified content.</summary>
    /// <param name="content">Content that replaces this node.</param>
    public new void ReplaceWith(object content)
    {
      _xElement.ReplaceWith(content);
    }
    
    /// <summary>Replaces this node with the specified content.</summary>
    /// <param name="content">A parameter list of the new content.</param>
    public new void ReplaceWith(object[] content)
    {
      _xElement.ReplaceWith(content);
    }
    
    /// <summary>Serialize this element to a file.</summary>
    /// <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    public void Save(string fileName)
    {
      _xElement.Save(fileName);
    }
    
    /// <summary>Serialize this element to a file, optionally disabling formatting.</summary>
    /// <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    public void Save(string fileName, System.Xml.Linq.SaveOptions options)
    {
      _xElement.Save(fileName, options);
    }
    
    /// <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
    /// <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
    public void Save(System.IO.Stream stream)
    {
      _xElement.Save(stream);
    }
    
    /// <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
    /// <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    public void Save(System.IO.Stream stream, System.Xml.Linq.SaveOptions options)
    {
      _xElement.Save(stream, options);
    }
    
    /// <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />.</summary>
    /// <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    public void Save(System.IO.TextWriter textWriter)
    {
      _xElement.Save(textWriter);
    }
    
    /// <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
    /// <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    public void Save(System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options)
    {
      _xElement.Save(textWriter, options);
    }
    
    /// <summary>Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    public void Save(System.Xml.XmlWriter writer)
    {
      _xElement.Save(writer);
    }
    
    /// <summary>Sets the value of an attribute, adds an attribute, or removes an attribute. </summary>
    /// <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</param>
    /// <param name="value">The value to assign to the attribute. The attribute is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</param>
    /// <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    public void SetAttributeValue(System.Xml.Linq.XName name, object value)
    {
      _xElement.SetAttributeValue(name, value);
    }
    
    /// <summary>Sets the value of a child element, adds a child element, or removes a child element.</summary>
    /// <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</param>
    /// <param name="value">The value to assign to the child element. The child element is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</param>
    /// <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    public void SetElementValue(System.Xml.Linq.XName name, object value)
    {
      _xElement.SetElementValue(name, value);
    }
    
    /// <summary>Sets the value of this element.</summary>
    /// <param name="value">The value to assign to this element. The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    /// <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    public void SetValue(object value)
    {
      _xElement.SetValue(value);
    }
    
    /// <summary>Write this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
    /// <filterpriority>2</filterpriority>
    public new void WriteTo(System.Xml.XmlWriter writer)
    {
      _xElement.WriteTo(writer);
    }
  }
}
