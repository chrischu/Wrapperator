//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Xml.Linq
{
  
  
  /// <summary>Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.  </summary>
  /// <filterpriority>2</filterpriority>
  public class XNodeStaticWrapper : Wrapperator.Interfaces.Xml.Linq.IXNodeStatic
  {
    
    public System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer
    {
      get
      {
        return System.Xml.Linq.XNode.DocumentOrderComparer;
      }
    }
    
    public System.Xml.Linq.XNodeEqualityComparer EqualityComparer
    {
      get
      {
        return System.Xml.Linq.XNode.EqualityComparer;
      }
    }
    
    /// <summary>Compares two nodes to determine their relative XML document order.</summary>
    /// <returns>An int containing 0 if the nodes are equal; -1 if <paramref name="n1" /> is before <paramref name="n2" />; 1 if <paramref name="n1" /> is after <paramref name="n2" />.</returns>
    /// <param name="n1">First <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    /// <param name="n2">Second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    /// <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    public int CompareDocumentOrder(Wrapperator.Interfaces.Xml.Linq.IXNode n1, Wrapperator.Interfaces.Xml.Linq.IXNode n2)
    {
      return System.Xml.Linq.XNode.CompareDocumentOrder(n1 == null ? default(System.Xml.Linq.XNode) : ((Wrapperator.Wrappers.Xml.Linq.XNodeWrapper)n1).XNode, n2 == null ? default(System.Xml.Linq.XNode) : ((Wrapperator.Wrappers.Xml.Linq.XNodeWrapper)n2).XNode);
    }
    
    /// <summary>Creates an <see cref="T:System.Xml.Linq.XNode" /> from an <see cref="T:System.Xml.XmlReader" />.</summary>
    /// <returns>An <see cref="T:System.Xml.Linq.XNode" /> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType" />) of the first node encountered in the reader.</returns>
    /// <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode" />.</param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on a recognized node type.</exception>
    /// <exception cref="T:System.Xml.XmlException">The underlying <see cref="T:System.Xml.XmlReader" /> throws an exception.</exception>
    /// <filterpriority>2</filterpriority>
    public Wrapperator.Interfaces.Xml.Linq.IXNode ReadFrom(Wrapperator.Interfaces.Xml.IXmlReader reader)
    {
      return new Wrapperator.Wrappers.Xml.Linq.XNodeWrapper(System.Xml.Linq.XNode.ReadFrom(reader == null ? default(System.Xml.XmlReader) : ((Wrapperator.Wrappers.Xml.XmlReaderWrapper)reader).XmlReader));
    }
    
    /// <summary>Compares the values of two nodes, including the values of all descendant nodes.</summary>
    /// <returns>true if the nodes are equal; otherwise false.</returns>
    /// <param name="n1">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    /// <param name="n2">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    public bool DeepEquals(Wrapperator.Interfaces.Xml.Linq.IXNode n1, Wrapperator.Interfaces.Xml.Linq.IXNode n2)
    {
      return System.Xml.Linq.XNode.DeepEquals(n1 == null ? default(System.Xml.Linq.XNode) : ((Wrapperator.Wrappers.Xml.Linq.XNodeWrapper)n1).XNode, n2 == null ? default(System.Xml.Linq.XNode) : ((Wrapperator.Wrappers.Xml.Linq.XNodeWrapper)n2).XNode);
    }
  }
}
