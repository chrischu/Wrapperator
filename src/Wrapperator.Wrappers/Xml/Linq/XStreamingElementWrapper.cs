//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Xml.Linq
{
  
  
  /// <summary>Represents elements in an XML tree that supports deferred streaming output.</summary>
  public class XStreamingElementWrapper : Wrapperator.Interfaces.Xml.Linq.IXStreamingElement
  {
    
    internal System.Xml.Linq.XStreamingElement XStreamingElement { get; private set; }

    
    public XStreamingElementWrapper(System.Xml.Linq.XStreamingElement xStreamingElement)
    {
      XStreamingElement = xStreamingElement;
    }
    
    public System.Xml.Linq.XName Name
    {
      get
      {
        return XStreamingElement.Name;
      }
      set
      {
        XStreamingElement.Name = value;
      }
    }
    
    /// <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.</summary>
    /// <param name="content">Content to be added to the streaming element.</param>
    public void Add(object content)
    {
      XStreamingElement.Add(content);
    }
    
    /// <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.</summary>
    /// <param name="content">Content to be added to the streaming element.</param>
    public void Add(object[] content)
    {
      XStreamingElement.Add(content);
    }
    
    /// <summary>Serialize this streaming element to a file.</summary>
    /// <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    public void Save(string fileName)
    {
      XStreamingElement.Save(fileName);
    }
    
    /// <summary>Serialize this streaming element to a file, optionally disabling formatting.</summary>
    /// <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    public void Save(string fileName, System.Xml.Linq.SaveOptions options)
    {
      XStreamingElement.Save(fileName, options);
    }
    
    /// <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
    /// <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
    public void Save(Wrapperator.Interfaces.IO.IStream stream)
    {
      XStreamingElement.Save(stream == null ? default(System.IO.Stream) : ((Wrapperator.Wrappers.IO.StreamWrapper)stream).Stream);
    }
    
    /// <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
    /// <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    public void Save(Wrapperator.Interfaces.IO.IStream stream, System.Xml.Linq.SaveOptions options)
    {
      XStreamingElement.Save(stream == null ? default(System.IO.Stream) : ((Wrapperator.Wrappers.IO.StreamWrapper)stream).Stream, options);
    }
    
    /// <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />.</summary>
    /// <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XStreamingElement" /> will be written to.</param>
    public void Save(Wrapperator.Interfaces.IO.ITextWriter textWriter)
    {
      XStreamingElement.Save(textWriter == null ? default(System.IO.TextWriter) : ((Wrapperator.Wrappers.IO.TextWriterWrapper)textWriter).TextWriter);
    }
    
    /// <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
    /// <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
    /// <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    public void Save(Wrapperator.Interfaces.IO.ITextWriter textWriter, System.Xml.Linq.SaveOptions options)
    {
      XStreamingElement.Save(textWriter == null ? default(System.IO.TextWriter) : ((Wrapperator.Wrappers.IO.TextWriterWrapper)textWriter).TextWriter, options);
    }
    
    /// <summary>Serialize this streaming element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    public void Save(Wrapperator.Interfaces.Xml.IXmlWriter writer)
    {
      XStreamingElement.Save(writer == null ? default(System.Xml.XmlWriter) : ((Wrapperator.Wrappers.Xml.XmlWriterWrapper)writer).XmlWriter);
    }
    
    /// <summary>Writes this streaming element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
    /// <filterpriority>2</filterpriority>
    public void WriteTo(Wrapperator.Interfaces.Xml.IXmlWriter writer)
    {
      XStreamingElement.WriteTo(writer == null ? default(System.Xml.XmlWriter) : ((Wrapperator.Wrappers.Xml.XmlWriterWrapper)writer).XmlWriter);
    }
  }
}
