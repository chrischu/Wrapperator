//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Xml.Linq
{
  
  
  /// <summary>Represents an XML attribute.</summary>
  public class XAttributeWrapper : XObjectWrapper, Wrapperator.Interfaces.Xml.Linq.IXAttribute
  {
    
    internal System.Xml.Linq.XAttribute XAttribute { get; private set; }

    
    internal XAttributeWrapper(System.Xml.Linq.XAttribute xAttribute) : 
        base(xAttribute)
    {
      XAttribute = xAttribute;
    }
    
    public bool IsNamespaceDeclaration
    {
      get
      {
        return XAttribute.IsNamespaceDeclaration;
      }
    }
    
    public System.Xml.Linq.XName Name
    {
      get
      {
        return XAttribute.Name;
      }
    }
    
    public System.Xml.Linq.XAttribute NextAttribute
    {
      get
      {
        return XAttribute.NextAttribute;
      }
    }
    
    public new System.Xml.XmlNodeType NodeType
    {
      get
      {
        return XAttribute.NodeType;
      }
    }
    
    public System.Xml.Linq.XAttribute PreviousAttribute
    {
      get
      {
        return XAttribute.PreviousAttribute;
      }
    }
    
    public string Value
    {
      get
      {
        return XAttribute.Value;
      }
      set
      {
        XAttribute.Value = value;
      }
    }
    
    public new string BaseUri
    {
      get
      {
        return XAttribute.BaseUri;
      }
    }
    
    public new System.Xml.Linq.XDocument Document
    {
      get
      {
        return XAttribute.Document;
      }
    }
    
    public new System.Xml.Linq.XElement Parent
    {
      get
      {
        return XAttribute.Parent;
      }
    }
    
    /// <summary>Removes this attribute from its parent element.</summary>
    /// <exception cref="T:System.InvalidOperationException">The parent element is null.</exception>
    public void Remove()
    {
      XAttribute.Remove();
    }
    
    /// <summary>Sets the value of this attribute.</summary>
    /// <param name="value">The value to assign to this attribute.</param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    /// <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    public void SetValue(object value)
    {
      XAttribute.SetValue(value);
    }
    
    /// <summary>Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <param name="annotation">An <see cref="T:System.Object" /> that contains the annotation to add.</param>
    public new void AddAnnotation(object annotation)
    {
      XAttribute.AddAnnotation(annotation);
    }
    
    /// <summary>Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <returns>The <see cref="T:System.Object" /> that contains the first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
    /// <param name="type">The <see cref="T:System.Type" /> of the annotation to retrieve.</param>
    public new object Annotation(Wrapperator.Interfaces.IType type)
    {
      return XAttribute.Annotation(type == null ? default(System.Type) : ((Wrapperator.Wrappers.TypeWrapper)type).Type);
    }
    
    /// <summary>Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />. </summary>
    /// <returns>The first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
    /// <typeparam name="T">The type of the annotation to retrieve.</typeparam>
    public new T Annotation<T>()
      where T :  class
    {
      return XAttribute.Annotation<T>();
    }
    
    /// <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    /// <param name="type">The <see cref="T:System.Type" /> of the annotations to retrieve.</param>
    public new System.Collections.Generic.IEnumerable<object> Annotations(Wrapperator.Interfaces.IType type)
    {
      return XAttribute.Annotations(type == null ? default(System.Type) : ((Wrapperator.Wrappers.TypeWrapper)type).Type);
    }
    
    /// <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    /// <typeparam name="T">The type of the annotations to retrieve.</typeparam>
    public new System.Collections.Generic.IEnumerable<T> Annotations<T>()
      where T :  class
    {
      return XAttribute.Annotations<T>();
    }
    
    /// <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <param name="type">The <see cref="T:System.Type" /> of annotations to remove.</param>
    public new void RemoveAnnotations(Wrapperator.Interfaces.IType type)
    {
      XAttribute.RemoveAnnotations(type == null ? default(System.Type) : ((Wrapperator.Wrappers.TypeWrapper)type).Type);
    }
    
    /// <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
    /// <typeparam name="T">The type of annotations to remove.</typeparam>
    public new void RemoveAnnotations<T>()
      where T :  class
    {
      XAttribute.RemoveAnnotations<T>();
    }
  }
}
