//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Xml.Schema
{
  
  
  /// <summary>An in-memory representation of an XML Schema as specified in the World Wide Web Consortium (W3C) XML Schema Part 1: Structures and XML Schema Part 2: Datatypes specifications.</summary>
  public class XmlSchemaWrapper : Wrapperator.Interfaces.Xml.Schema.IXmlSchema
  {
    
    public System.Xml.Schema.XmlSchema _XmlSchema { get; private set; }

    
    internal XmlSchemaWrapper(System.Xml.Schema.XmlSchema xmlSchema)
    {
      _XmlSchema = xmlSchema;
    }
    
    public System.Xml.Schema.XmlSchemaForm AttributeFormDefault
    {
      get
      {
        return _XmlSchema.AttributeFormDefault;
      }
      set
      {
        _XmlSchema.AttributeFormDefault = value;
      }
    }
    
    public System.Xml.Schema.XmlSchemaDerivationMethod BlockDefault
    {
      get
      {
        return _XmlSchema.BlockDefault;
      }
      set
      {
        _XmlSchema.BlockDefault = value;
      }
    }
    
    public System.Xml.Schema.XmlSchemaDerivationMethod FinalDefault
    {
      get
      {
        return _XmlSchema.FinalDefault;
      }
      set
      {
        _XmlSchema.FinalDefault = value;
      }
    }
    
    public System.Xml.Schema.XmlSchemaForm ElementFormDefault
    {
      get
      {
        return _XmlSchema.ElementFormDefault;
      }
      set
      {
        _XmlSchema.ElementFormDefault = value;
      }
    }
    
    public string TargetNamespace
    {
      get
      {
        return _XmlSchema.TargetNamespace;
      }
      set
      {
        _XmlSchema.TargetNamespace = value;
      }
    }
    
    public string Version
    {
      get
      {
        return _XmlSchema.Version;
      }
      set
      {
        _XmlSchema.Version = value;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObjectCollection Includes
    {
      get
      {
        return _XmlSchema.Includes;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObjectCollection Items
    {
      get
      {
        return _XmlSchema.Items;
      }
    }
    
    public bool IsCompiled
    {
      get
      {
        return _XmlSchema.IsCompiled;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObjectTable Attributes
    {
      get
      {
        return _XmlSchema.Attributes;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObjectTable AttributeGroups
    {
      get
      {
        return _XmlSchema.AttributeGroups;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObjectTable SchemaTypes
    {
      get
      {
        return _XmlSchema.SchemaTypes;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObjectTable Elements
    {
      get
      {
        return _XmlSchema.Elements;
      }
    }
    
    public string Id
    {
      get
      {
        return _XmlSchema.Id;
      }
      set
      {
        _XmlSchema.Id = value;
      }
    }
    
    public System.Xml.XmlAttribute[] UnhandledAttributes
    {
      get
      {
        return _XmlSchema.UnhandledAttributes;
      }
      set
      {
        _XmlSchema.UnhandledAttributes = value;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObjectTable Groups
    {
      get
      {
        return _XmlSchema.Groups;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObjectTable Notations
    {
      get
      {
        return _XmlSchema.Notations;
      }
    }
    
    public int LineNumber
    {
      get
      {
        return _XmlSchema.LineNumber;
      }
      set
      {
        _XmlSchema.LineNumber = value;
      }
    }
    
    public int LinePosition
    {
      get
      {
        return _XmlSchema.LinePosition;
      }
      set
      {
        _XmlSchema.LinePosition = value;
      }
    }
    
    public string SourceUri
    {
      get
      {
        return _XmlSchema.SourceUri;
      }
      set
      {
        _XmlSchema.SourceUri = value;
      }
    }
    
    public System.Xml.Schema.XmlSchemaObject Parent
    {
      get
      {
        return _XmlSchema.Parent;
      }
      set
      {
        _XmlSchema.Parent = value;
      }
    }
    
    public System.Xml.Serialization.XmlSerializerNamespaces Namespaces
    {
      get
      {
        return _XmlSchema.Namespaces;
      }
      set
      {
        _XmlSchema.Namespaces = value;
      }
    }
    
    /// <summary>Writes the XML Schema to the supplied data stream.</summary>
    /// <param name="stream">The supplied data stream. </param>
    public void Write(Wrapperator.Interfaces.IO.IStream stream)
    {
      _XmlSchema.Write(stream == null ? default(System.IO.Stream) : stream._Stream);
    }
    
    /// <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.Stream" /> using the <see cref="T:System.Xml.XmlNamespaceManager" /> specified.</summary>
    /// <param name="stream">The supplied data stream. </param>
    /// <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />.</param>
    public void Write(Wrapperator.Interfaces.IO.IStream stream, System.Xml.XmlNamespaceManager namespaceManager)
    {
      _XmlSchema.Write(stream == null ? default(System.IO.Stream) : stream._Stream, namespaceManager);
    }
    
    /// <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.TextWriter" />.</summary>
    /// <param name="writer">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
    public void Write(Wrapperator.Interfaces.IO.ITextWriter writer)
    {
      _XmlSchema.Write(writer == null ? default(System.IO.TextWriter) : writer._TextWriter);
    }
    
    /// <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.TextWriter" />.</summary>
    /// <param name="writer">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
    /// <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />. </param>
    public void Write(Wrapperator.Interfaces.IO.ITextWriter writer, System.Xml.XmlNamespaceManager namespaceManager)
    {
      _XmlSchema.Write(writer == null ? default(System.IO.TextWriter) : writer._TextWriter, namespaceManager);
    }
    
    /// <summary>Writes the XML Schema to the supplied <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to. </param>
    /// <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is null.</exception>
    public void Write(Wrapperator.Interfaces.Xml.IXmlWriter writer)
    {
      _XmlSchema.Write(writer == null ? default(System.Xml.XmlWriter) : writer._XmlWriter);
    }
    
    /// <summary>Writes the XML Schema to the supplied <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    /// <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />. </param>
    public void Write(Wrapperator.Interfaces.Xml.IXmlWriter writer, System.Xml.XmlNamespaceManager namespaceManager)
    {
      _XmlSchema.Write(writer == null ? default(System.Xml.XmlWriter) : writer._XmlWriter, namespaceManager);
    }
  }
}
