//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Xml.Serialization
{
  
  
  /// <summary>Serializes and deserializes objects into and from XML documents. The <see cref="T:System.Xml.Serialization.XmlSerializer" /> enables you to control how objects are encoded into XML.</summary>
  public partial class XmlSerializerWrapper : Wrapperator.Interfaces.Xml.Serialization.IXmlSerializer
  {
    
    internal System.Xml.Serialization.XmlSerializer XmlSerializer { get; private set; }

    
    public XmlSerializerWrapper(System.Xml.Serialization.XmlSerializer xmlSerializer)
    {
      XmlSerializer = xmlSerializer;
    }
    
    /// <summary>Gets a value that indicates whether this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize a specified XML document.</summary>
    /// <returns>true if this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize the object that the <see cref="T:System.Xml.XmlReader" /> points to; otherwise, false.</returns>
    /// <param name="xmlReader">An <see cref="T:System.Xml.XmlReader" /> that points to the document to deserialize. </param>
    public bool CanDeserialize(Wrapperator.Interfaces.Xml.IXmlReader xmlReader)
    {
      return XmlSerializer.CanDeserialize(xmlReader == null ? default(System.Xml.XmlReader) : ((Wrapperator.Wrappers.Xml.XmlReaderWrapper)xmlReader).XmlReader);
    }
    
    /// <summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream" />.</summary>
    /// <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    /// <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the XML document to deserialize. </param>
    public object Deserialize(Wrapperator.Interfaces.IO.IStream stream)
    {
      return XmlSerializer.Deserialize(stream == null ? default(System.IO.Stream) : ((Wrapperator.Wrappers.IO.StreamWrapper)stream).Stream);
    }
    
    /// <summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader" />.</summary>
    /// <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    /// <param name="textReader">The <see cref="T:System.IO.TextReader" /> that contains the XML document to deserialize. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public object Deserialize(Wrapperator.Interfaces.IO.ITextReader textReader)
    {
      return XmlSerializer.Deserialize(textReader == null ? default(System.IO.TextReader) : ((Wrapperator.Wrappers.IO.TextReaderWrapper)textReader).TextReader);
    }
    
    /// <summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" />.</summary>
    /// <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    /// <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> that contains the XML document to deserialize. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public object Deserialize(Wrapperator.Interfaces.Xml.IXmlReader xmlReader)
    {
      return XmlSerializer.Deserialize(xmlReader == null ? default(System.Xml.XmlReader) : ((Wrapperator.Wrappers.Xml.XmlReaderWrapper)xmlReader).XmlReader);
    }
    
    /// <summary>Deserializes an XML document contained by the specified <see cref="T:System.Xml.XmlReader" /> and allows the overriding of events that occur during deserialization.</summary>
    /// <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    /// <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> that contains the document to deserialize.</param>
    /// <param name="events">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> class. </param>
    public object Deserialize(Wrapperator.Interfaces.Xml.IXmlReader xmlReader, System.Xml.Serialization.XmlDeserializationEvents events)
    {
      return XmlSerializer.Deserialize(xmlReader == null ? default(System.Xml.XmlReader) : ((Wrapperator.Wrappers.Xml.XmlReaderWrapper)xmlReader).XmlReader, events);
    }
    
    /// <summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" /> and encoding style.</summary>
    /// <returns>The deserialized object.</returns>
    /// <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> that contains the XML document to deserialize. </param>
    /// <param name="encodingStyle">The encoding style of the serialized XML. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public object Deserialize(Wrapperator.Interfaces.Xml.IXmlReader xmlReader, string encodingStyle)
    {
      return XmlSerializer.Deserialize(xmlReader == null ? default(System.Xml.XmlReader) : ((Wrapperator.Wrappers.Xml.XmlReaderWrapper)xmlReader).XmlReader, encodingStyle);
    }
    
    /// <summary>Deserializes the object using the data contained by the specified <see cref="T:System.Xml.XmlReader" />.</summary>
    /// <returns>The object being deserialized.</returns>
    /// <param name="xmlReader">An instance of the <see cref="T:System.Xml.XmlReader" /> class used to read the document.</param>
    /// <param name="encodingStyle">The encoding used.</param>
    /// <param name="events">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> class. </param>
    public object Deserialize(Wrapperator.Interfaces.Xml.IXmlReader xmlReader, string encodingStyle, System.Xml.Serialization.XmlDeserializationEvents events)
    {
      return XmlSerializer.Deserialize(xmlReader == null ? default(System.Xml.XmlReader) : ((Wrapperator.Wrappers.Xml.XmlReaderWrapper)xmlReader).XmlReader, encodingStyle, events);
    }
    
    /// <summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> objects.</summary>
    /// <returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</returns>
    /// <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    public System.Xml.Serialization.XmlSerializer[] FromMappings(System.Xml.Serialization.XmlMapping[] mappings)
    {
      return System.Xml.Serialization.XmlSerializer.FromMappings(mappings);
    }
    
    /// <summary>Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class from the specified mappings.</summary>
    /// <returns>An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</returns>
    /// <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    /// <param name="type">The <see cref="T:System.Type" /> of the deserialized object.</param>
    public System.Xml.Serialization.XmlSerializer[] FromMappings(System.Xml.Serialization.XmlMapping[] mappings, Wrapperator.Interfaces.IType type)
    {
      return System.Xml.Serialization.XmlSerializer.FromMappings(mappings, type == null ? default(System.Type) : ((Wrapperator.Wrappers.TypeWrapper)type).Type);
    }
    
    /// <summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of types.</summary>
    /// <returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</returns>
    /// <param name="types">An array of <see cref="T:System.Type" /> objects. </param>
    public System.Xml.Serialization.XmlSerializer[] FromTypes(System.Type[] types)
    {
      return System.Xml.Serialization.XmlSerializer.FromTypes(types);
    }
    
    /// <summary>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings.</summary>
    /// <returns>An <see cref="T:System.Reflection.Assembly" /> object that contains serializers for the supplied types and mappings.</returns>
    /// <param name="types">A collection of types.</param>
    /// <param name="mappings">A collection of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects used to convert one type to another.</param>
    public Wrapperator.Interfaces.Reflection.IAssembly GenerateSerializer(System.Type[] types, System.Xml.Serialization.XmlMapping[] mappings)
    {
      return new Wrapperator.Wrappers.Reflection.AssemblyWrapper(System.Xml.Serialization.XmlSerializer.GenerateSerializer(types, mappings));
    }
    
    /// <summary>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings and compiler settings and options. </summary>
    /// <returns>An <see cref="T:System.Reflection.Assembly" /> that contains special versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
    /// <param name="types">An array of type <see cref="T:System.Type" /> that contains objects used to serialize and deserialize data.</param>
    /// <param name="mappings">An array of type <see cref="T:System.Xml.Serialization.XmlMapping" /> that maps the XML data to the type data.</param>
    /// <param name="parameters">An instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> class that represents the parameters used to invoke a compiler.</param>
    public Wrapperator.Interfaces.Reflection.IAssembly GenerateSerializer(System.Type[] types, System.Xml.Serialization.XmlMapping[] mappings, System.CodeDom.Compiler.CompilerParameters parameters)
    {
      return new Wrapperator.Wrappers.Reflection.AssemblyWrapper(System.Xml.Serialization.XmlSerializer.GenerateSerializer(types, mappings, parameters));
    }
    
    /// <summary>Returns the name of the assembly that contains one or more versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> especially created to serialize or deserialize the specified type.</summary>
    /// <returns>The name of the assembly that contains an <see cref="T:System.Xml.Serialization.XmlSerializer" /> for the type.</returns>
    /// <param name="type">The <see cref="T:System.Type" /> you are deserializing.</param>
    public string GetXmlSerializerAssemblyName(Wrapperator.Interfaces.IType type)
    {
      return System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(type == null ? default(System.Type) : ((Wrapperator.Wrappers.TypeWrapper)type).Type);
    }
    
    /// <summary>Returns the name of the assembly that contains the serializer for the specified type in the specified namespace.</summary>
    /// <returns>The name of the assembly that contains specially built serializers.</returns>
    /// <param name="type">The <see cref="T:System.Type" /> you are interested in.</param>
    /// <param name="defaultNamespace">The namespace of the type.</param>
    public string GetXmlSerializerAssemblyName(Wrapperator.Interfaces.IType type, string defaultNamespace)
    {
      return System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(type == null ? default(System.Type) : ((Wrapperator.Wrappers.TypeWrapper)type).Type, defaultNamespace);
    }
    
    /// <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" />.</summary>
    /// <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document. </param>
    /// <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    public void Serialize(Wrapperator.Interfaces.IO.ITextWriter textWriter, object o)
    {
      XmlSerializer.Serialize(textWriter == null ? default(System.IO.TextWriter) : ((Wrapperator.Wrappers.IO.TextWriterWrapper)textWriter).TextWriter, o);
    }
    
    /// <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" /> and references the specified namespaces.</summary>
    /// <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document. </param>
    /// <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    /// <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> that contains namespaces for the generated XML document. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public void Serialize(Wrapperator.Interfaces.IO.ITextWriter textWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces)
    {
      XmlSerializer.Serialize(textWriter == null ? default(System.IO.TextWriter) : ((Wrapperator.Wrappers.IO.TextWriterWrapper)textWriter).TextWriter, o, namespaces);
    }
    
    /// <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" />.</summary>
    /// <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document. </param>
    /// <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public void Serialize(Wrapperator.Interfaces.IO.IStream stream, object o)
    {
      XmlSerializer.Serialize(stream == null ? default(System.IO.Stream) : ((Wrapperator.Wrappers.IO.StreamWrapper)stream).Stream, o);
    }
    
    /// <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" />that references the specified namespaces.</summary>
    /// <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document. </param>
    /// <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    /// <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public void Serialize(Wrapperator.Interfaces.IO.IStream stream, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces)
    {
      XmlSerializer.Serialize(stream == null ? default(System.IO.Stream) : ((Wrapperator.Wrappers.IO.StreamWrapper)stream).Stream, o, namespaces);
    }
    
    /// <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
    /// <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
    /// <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public void Serialize(Wrapperator.Interfaces.Xml.IXmlWriter xmlWriter, object o)
    {
      XmlSerializer.Serialize(xmlWriter == null ? default(System.Xml.XmlWriter) : ((Wrapperator.Wrappers.Xml.XmlWriterWrapper)xmlWriter).XmlWriter, o);
    }
    
    /// <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces.</summary>
    /// <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
    /// <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    /// <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public void Serialize(Wrapperator.Interfaces.Xml.IXmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces)
    {
      XmlSerializer.Serialize(xmlWriter == null ? default(System.Xml.XmlWriter) : ((Wrapperator.Wrappers.Xml.XmlWriterWrapper)xmlWriter).XmlWriter, o, namespaces);
    }
    
    /// <summary>Serializes the specified object and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces and encoding style.</summary>
    /// <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
    /// <param name="o">The object to serialize. </param>
    /// <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
    /// <param name="encodingStyle">The encoding style of the serialized XML. </param>
    /// <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    public void Serialize(Wrapperator.Interfaces.Xml.IXmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle)
    {
      XmlSerializer.Serialize(xmlWriter == null ? default(System.Xml.XmlWriter) : ((Wrapperator.Wrappers.Xml.XmlWriterWrapper)xmlWriter).XmlWriter, o, namespaces, encodingStyle);
    }
    
    /// <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />, XML namespaces, and encoding. </summary>
    /// <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</param>
    /// <param name="o">The object to serialize.</param>
    /// <param name="namespaces">An instance of the XmlSerializaerNamespaces that contains namespaces and prefixes to use.</param>
    /// <param name="encodingStyle">The encoding used in the document.</param>
    /// <param name="id">For SOAP encoded messages, the base used to generate id attributes. </param>
    public void Serialize(Wrapperator.Interfaces.Xml.IXmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle, string id)
    {
      XmlSerializer.Serialize(xmlWriter == null ? default(System.Xml.XmlWriter) : ((Wrapperator.Wrappers.Xml.XmlWriterWrapper)xmlWriter).XmlWriter, o, namespaces, encodingStyle, id);
    }
  }
}
