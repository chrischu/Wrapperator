//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers
{
  
  
  /// <summary>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.</summary>
  /// <filterpriority>1</filterpriority>
  public class ConsoleStaticWrapper : Wrapperator.Interfaces.IConsoleStatic
  {
    
    internal ConsoleStaticWrapper()
    {
    }
    
    public bool IsInputRedirected
    {
      get
      {
        return System.Console.IsInputRedirected;
      }
    }
    
    public bool IsOutputRedirected
    {
      get
      {
        return System.Console.IsOutputRedirected;
      }
    }
    
    public bool IsErrorRedirected
    {
      get
      {
        return System.Console.IsErrorRedirected;
      }
    }
    
    public System.IO.TextReader In
    {
      get
      {
        return System.Console.In;
      }
    }
    
    public System.IO.TextWriter Out
    {
      get
      {
        return System.Console.Out;
      }
    }
    
    public System.IO.TextWriter Error
    {
      get
      {
        return System.Console.Error;
      }
    }
    
    public System.Text.Encoding InputEncoding
    {
      get
      {
        return System.Console.InputEncoding;
      }
      set
      {
        System.Console.InputEncoding = value;
      }
    }
    
    public System.Text.Encoding OutputEncoding
    {
      get
      {
        return System.Console.OutputEncoding;
      }
      set
      {
        System.Console.OutputEncoding = value;
      }
    }
    
    public System.ConsoleColor BackgroundColor
    {
      get
      {
        return System.Console.BackgroundColor;
      }
      set
      {
        System.Console.BackgroundColor = value;
      }
    }
    
    public System.ConsoleColor ForegroundColor
    {
      get
      {
        return System.Console.ForegroundColor;
      }
      set
      {
        System.Console.ForegroundColor = value;
      }
    }
    
    public int BufferHeight
    {
      get
      {
        return System.Console.BufferHeight;
      }
      set
      {
        System.Console.BufferHeight = value;
      }
    }
    
    public int BufferWidth
    {
      get
      {
        return System.Console.BufferWidth;
      }
      set
      {
        System.Console.BufferWidth = value;
      }
    }
    
    public int WindowHeight
    {
      get
      {
        return System.Console.WindowHeight;
      }
      set
      {
        System.Console.WindowHeight = value;
      }
    }
    
    public int WindowWidth
    {
      get
      {
        return System.Console.WindowWidth;
      }
      set
      {
        System.Console.WindowWidth = value;
      }
    }
    
    public int LargestWindowWidth
    {
      get
      {
        return System.Console.LargestWindowWidth;
      }
    }
    
    public int LargestWindowHeight
    {
      get
      {
        return System.Console.LargestWindowHeight;
      }
    }
    
    public int WindowLeft
    {
      get
      {
        return System.Console.WindowLeft;
      }
      set
      {
        System.Console.WindowLeft = value;
      }
    }
    
    public int WindowTop
    {
      get
      {
        return System.Console.WindowTop;
      }
      set
      {
        System.Console.WindowTop = value;
      }
    }
    
    public int CursorLeft
    {
      get
      {
        return System.Console.CursorLeft;
      }
      set
      {
        System.Console.CursorLeft = value;
      }
    }
    
    public int CursorTop
    {
      get
      {
        return System.Console.CursorTop;
      }
      set
      {
        System.Console.CursorTop = value;
      }
    }
    
    public int CursorSize
    {
      get
      {
        return System.Console.CursorSize;
      }
      set
      {
        System.Console.CursorSize = value;
      }
    }
    
    public bool CursorVisible
    {
      get
      {
        return System.Console.CursorVisible;
      }
      set
      {
        System.Console.CursorVisible = value;
      }
    }
    
    public string Title
    {
      get
      {
        return System.Console.Title;
      }
      set
      {
        System.Console.Title = value;
      }
    }
    
    public bool KeyAvailable
    {
      get
      {
        return System.Console.KeyAvailable;
      }
    }
    
    public bool NumberLock
    {
      get
      {
        return System.Console.NumberLock;
      }
    }
    
    public bool CapsLock
    {
      get
      {
        return System.Console.CapsLock;
      }
    }
    
    public bool TreatControlCAsInput
    {
      get
      {
        return System.Console.TreatControlCAsInput;
      }
      set
      {
        System.Console.TreatControlCAsInput = value;
      }
    }
    
    /// <summary>Plays the sound of a beep through the console speaker.</summary>
    /// <exception cref="T:System.Security.HostProtectionException">This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</exception>
    /// <filterpriority>1</filterpriority>
    public void Beep()
    {
      System.Console.Beep();
    }
    
    /// <summary>Plays the sound of a beep of a specified frequency and duration through the console speaker.</summary>
    /// <param name="frequency">The frequency of the beep, ranging from 37 to 32767 hertz.</param>
    /// <param name="duration">The duration of the beep measured in milliseconds.</param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="frequency" /> is less than 37 or more than 32767 hertz.-or-<paramref name="duration" /> is less than or equal to zero.</exception>
    /// <exception cref="T:System.Security.HostProtectionException">This method was executed on a server, such as SQL Server, that does not permit access to the console.</exception>
    /// <filterpriority>1</filterpriority>
    public void Beep(int frequency, int duration)
    {
      System.Console.Beep(frequency, duration);
    }
    
    /// <summary>Clears the console buffer and corresponding console window of display information.</summary>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    /// <filterpriority>1</filterpriority>
    public void Clear()
    {
      System.Console.Clear();
    }
    
    /// <summary>Sets the foreground and background console colors to their defaults.</summary>
    /// <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void ResetColor()
    {
      System.Console.ResetColor();
    }
    
    /// <summary>Copies a specified source area of the screen buffer to a specified destination area.</summary>
    /// <param name="sourceLeft">The leftmost column of the source area. </param>
    /// <param name="sourceTop">The topmost row of the source area. </param>
    /// <param name="sourceWidth">The number of columns in the source area. </param>
    /// <param name="sourceHeight">The number of rows in the source area. </param>
    /// <param name="targetLeft">The leftmost column of the destination area. </param>
    /// <param name="targetTop">The topmost row of the destination area. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">One or more of the parameters is less than zero.-or- <paramref name="sourceLeft" /> or <paramref name="targetLeft" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.-or- <paramref name="sourceTop" /> or <paramref name="targetTop" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.-or- <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.-or- <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />. </exception>
    /// <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    /// <filterpriority>1</filterpriority>
    public void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop)
    {
      System.Console.MoveBufferArea(sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop);
    }
    
    /// <summary>Copies a specified source area of the screen buffer to a specified destination area.</summary>
    /// <param name="sourceLeft">The leftmost column of the source area. </param>
    /// <param name="sourceTop">The topmost row of the source area. </param>
    /// <param name="sourceWidth">The number of columns in the source area. </param>
    /// <param name="sourceHeight">The number of rows in the source area. </param>
    /// <param name="targetLeft">The leftmost column of the destination area. </param>
    /// <param name="targetTop">The topmost row of the destination area. </param>
    /// <param name="sourceChar">The character used to fill the source area. </param>
    /// <param name="sourceForeColor">The foreground color used to fill the source area. </param>
    /// <param name="sourceBackColor">The background color used to fill the source area. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">One or more of the parameters is less than zero.-or- <paramref name="sourceLeft" /> or <paramref name="targetLeft" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.-or- <paramref name="sourceTop" /> or <paramref name="targetTop" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.-or- <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.-or- <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />. </exception>
    /// <exception cref="T:System.ArgumentException">One or both of the color parameters is not a member of the <see cref="T:System.ConsoleColor" /> enumeration. </exception>
    /// <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    /// <filterpriority>1</filterpriority>
    public void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, System.ConsoleColor sourceForeColor, System.ConsoleColor sourceBackColor)
    {
      System.Console.MoveBufferArea(sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop, sourceChar, sourceForeColor, sourceBackColor);
    }
    
    /// <summary>Sets the height and width of the screen buffer area to the specified values.</summary>
    /// <param name="width">The width of the buffer area measured in columns. </param>
    /// <param name="height">The height of the buffer area measured in rows. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="height" /> or <paramref name="width" /> is less than or equal to zero.-or- <paramref name="height" /> or <paramref name="width" /> is greater than or equal to <see cref="F:System.Int16.MaxValue" />.-or- <paramref name="width" /> is less than <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />.-or- <paramref name="height" /> is less than <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />. </exception>
    /// <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetBufferSize(int width, int height)
    {
      System.Console.SetBufferSize(width, height);
    }
    
    /// <summary>Sets the height and width of the console window to the specified values.</summary>
    /// <param name="width">The width of the console window measured in columns. </param>
    /// <param name="height">The height of the console window measured in rows. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="width" /> or <paramref name="height" /> is less than or equal to zero.-or- <paramref name="width" /> plus <see cref="P:System.Console.WindowLeft" /> or <paramref name="height" /> plus <see cref="P:System.Console.WindowTop" /> is greater than or equal to <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="width" /> or <paramref name="height" /> is greater than the largest possible window width or height for the current screen resolution and console font.</exception>
    /// <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetWindowSize(int width, int height)
    {
      System.Console.SetWindowSize(width, height);
    }
    
    /// <summary>Sets the position of the console window relative to the screen buffer.</summary>
    /// <param name="left">The column position of the upper left  corner of the console window. </param>
    /// <param name="top">The row position of the upper left corner of the console window. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="left" /> or <paramref name="top" /> is less than zero.-or- <paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> is greater than <see cref="P:System.Console.BufferWidth" />.-or- <paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> is greater than <see cref="P:System.Console.BufferHeight" />. </exception>
    /// <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetWindowPosition(int left, int top)
    {
      System.Console.SetWindowPosition(left, top);
    }
    
    /// <summary>Sets the position of the cursor.</summary>
    /// <param name="left">The column position of the cursor. Columns are numbered from left to right starting at 0. </param>
    /// <param name="top">The row position of the cursor. Rows are numbered from top to bottom starting at 0. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="left" /> or <paramref name="top" /> is less than zero.-or- <paramref name="left" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.-or- <paramref name="top" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />. </exception>
    /// <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    /// <filterpriority>1</filterpriority>
    public void SetCursorPosition(int left, int top)
    {
      System.Console.SetCursorPosition(left, top);
    }
    
    /// <summary>Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.</summary>
    /// <returns>A <see cref="T:System.ConsoleKeyInfo" /> object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key. The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</returns>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Console.In" /> property is redirected from some stream other than the console.</exception>
    /// <filterpriority>1</filterpriority>
    public System.ConsoleKeyInfo ReadKey()
    {
      return System.Console.ReadKey();
    }
    
    /// <summary>Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.</summary>
    /// <returns>A <see cref="T:System.ConsoleKeyInfo" /> object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key. The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</returns>
    /// <param name="intercept">Determines whether to display the pressed key in the console window. true to not display the pressed key; otherwise, false. </param>
    /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Console.In" /> property is redirected from some stream other than the console.</exception>
    /// <filterpriority>1</filterpriority>
    public System.ConsoleKeyInfo ReadKey(bool intercept)
    {
      return System.Console.ReadKey(intercept);
    }
    
    /// <summary>Acquires the standard error stream.</summary>
    /// <returns>The standard error stream.</returns>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IStream OpenStandardError()
    {
      return new Wrapperator.Wrappers.IO.StreamWrapper(System.Console.OpenStandardError());
    }
    
    /// <summary>Acquires the standard error stream, which is set to a specified buffer size.</summary>
    /// <returns>The standard error stream.</returns>
    /// <param name="bufferSize">The internal stream buffer size. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="bufferSize" /> is less than or equal to zero. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IStream OpenStandardError(int bufferSize)
    {
      return new Wrapperator.Wrappers.IO.StreamWrapper(System.Console.OpenStandardError(bufferSize));
    }
    
    /// <summary>Acquires the standard input stream.</summary>
    /// <returns>The standard input stream.</returns>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IStream OpenStandardInput()
    {
      return new Wrapperator.Wrappers.IO.StreamWrapper(System.Console.OpenStandardInput());
    }
    
    /// <summary>Acquires the standard input stream, which is set to a specified buffer size.</summary>
    /// <returns>The standard input stream.</returns>
    /// <param name="bufferSize">The internal stream buffer size. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="bufferSize" /> is less than or equal to zero. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IStream OpenStandardInput(int bufferSize)
    {
      return new Wrapperator.Wrappers.IO.StreamWrapper(System.Console.OpenStandardInput(bufferSize));
    }
    
    /// <summary>Acquires the standard output stream.</summary>
    /// <returns>The standard output stream.</returns>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IStream OpenStandardOutput()
    {
      return new Wrapperator.Wrappers.IO.StreamWrapper(System.Console.OpenStandardOutput());
    }
    
    /// <summary>Acquires the standard output stream, which is set to a specified buffer size.</summary>
    /// <returns>The standard output stream.</returns>
    /// <param name="bufferSize">The internal stream buffer size. </param>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="bufferSize" /> is less than or equal to zero. </exception>
    /// <filterpriority>1</filterpriority>
    public Wrapperator.Interfaces.IO.IStream OpenStandardOutput(int bufferSize)
    {
      return new Wrapperator.Wrappers.IO.StreamWrapper(System.Console.OpenStandardOutput(bufferSize));
    }
    
    /// <summary>Sets the <see cref="P:System.Console.In" /> property to the specified <see cref="T:System.IO.TextReader" /> object.</summary>
    /// <param name="newIn">A stream that is the new standard input. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="newIn" /> is null. </exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <filterpriority>1</filterpriority>
    public void SetIn(Wrapperator.Interfaces.IO.ITextReader newIn)
    {
      System.Console.SetIn(newIn == null ? default(System.IO.TextReader) : ((Wrapperator.Wrappers.IO.TextReaderWrapper)newIn).TextReader);
    }
    
    /// <summary>Sets the <see cref="P:System.Console.Out" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</summary>
    /// <param name="newOut">A stream that is the new standard output. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="newOut" /> is null. </exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <filterpriority>1</filterpriority>
    public void SetOut(Wrapperator.Interfaces.IO.ITextWriter newOut)
    {
      System.Console.SetOut(newOut == null ? default(System.IO.TextWriter) : ((Wrapperator.Wrappers.IO.TextWriterWrapper)newOut).TextWriter);
    }
    
    /// <summary>Sets the <see cref="P:System.Console.Error" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</summary>
    /// <param name="newError">A stream that is the new standard error output. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="newError" /> is null. </exception>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    /// <filterpriority>1</filterpriority>
    public void SetError(Wrapperator.Interfaces.IO.ITextWriter newError)
    {
      System.Console.SetError(newError == null ? default(System.IO.TextWriter) : ((Wrapperator.Wrappers.IO.TextWriterWrapper)newError).TextWriter);
    }
    
    /// <summary>Reads the next character from the standard input stream.</summary>
    /// <returns>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</returns>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public int Read()
    {
      return System.Console.Read();
    }
    
    /// <summary>Reads the next line of characters from the standard input stream.</summary>
    /// <returns>The next line of characters from the input stream, or null if no more lines are available.</returns>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line of characters is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    /// <filterpriority>1</filterpriority>
    public string ReadLine()
    {
      return System.Console.ReadLine();
    }
    
    /// <summary>Writes the current line terminator to the standard output stream.</summary>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine()
    {
      System.Console.WriteLine();
    }
    
    /// <summary>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(bool value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(char value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="buffer">A Unicode character array. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(char[] buffer)
    {
      System.Console.WriteLine(buffer);
    }
    
    /// <summary>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="buffer">An array of Unicode characters. </param>
    /// <param name="index">The starting position in <paramref name="buffer" />. </param>
    /// <param name="count">The number of characters to write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="buffer" /> is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(char[] buffer, int index, int count)
    {
      System.Console.WriteLine(buffer, index, count);
    }
    
    /// <summary>Writes the text representation of the specified <see cref="T:System.Decimal" /> value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(decimal value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(double value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(float value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(int value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(uint value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(long value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(ulong value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(object value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the specified string value, followed by the current line terminator, to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string value)
    {
      System.Console.WriteLine(value);
    }
    
    /// <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">An object to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object arg0)
    {
      System.Console.WriteLine(format, arg0);
    }
    
    /// <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to write using <paramref name="format" />. </param>
    /// <param name="arg1">The second object to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object arg0, object arg1)
    {
      System.Console.WriteLine(format, arg0, arg1);
    }
    
    /// <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to write using <paramref name="format" />. </param>
    /// <param name="arg1">The second object to write using <paramref name="format" />. </param>
    /// <param name="arg2">The third object to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object arg0, object arg1, object arg2)
    {
      System.Console.WriteLine(format, arg0, arg1, arg2);
    }
    
    /// <summary>Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to write using <paramref name="format" />. </param>
    /// <param name="arg1">The second object to write using <paramref name="format" />. </param>
    /// <param name="arg2">The third object to write using <paramref name="format" />. </param>
    /// <param name="arg3">The fourth object to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object arg0, object arg1, object arg2, object arg3)
    {
      System.Console.WriteLine(format, arg0, arg1, arg2, arg3);
    }
    
    /// <summary>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> or <paramref name="arg" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void WriteLine(string format, object[] arg)
    {
      System.Console.WriteLine(format, arg);
    }
    
    /// <summary>Writes the text representation of the specified object to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks). </param>
    /// <param name="arg0">An object to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object arg0)
    {
      System.Console.Write(format, arg0);
    }
    
    /// <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to write using <paramref name="format" />. </param>
    /// <param name="arg1">The second object to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object arg0, object arg1)
    {
      System.Console.Write(format, arg0, arg1);
    }
    
    /// <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to write using <paramref name="format" />. </param>
    /// <param name="arg1">The second object to write using <paramref name="format" />. </param>
    /// <param name="arg2">The third object to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object arg0, object arg1, object arg2)
    {
      System.Console.Write(format, arg0, arg1, arg2);
    }
    
    /// <summary>Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg0">The first object to write using <paramref name="format" />. </param>
    /// <param name="arg1">The second object to write using <paramref name="format" />. </param>
    /// <param name="arg2">The third object to write using <paramref name="format" />. </param>
    /// <param name="arg3">The fourth object to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object arg0, object arg1, object arg2, object arg3)
    {
      System.Console.Write(format, arg0, arg1, arg2, arg3);
    }
    
    /// <summary>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</summary>
    /// <param name="format">A composite format string (see Remarks).</param>
    /// <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="format" /> or <paramref name="arg" /> is null. </exception>
    /// <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string format, object[] arg)
    {
      System.Console.Write(format, arg);
    }
    
    /// <summary>Writes the text representation of the specified Boolean value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(bool value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the specified Unicode character value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(char value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the specified array of Unicode characters to the standard output stream.</summary>
    /// <param name="buffer">A Unicode character array. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(char[] buffer)
    {
      System.Console.Write(buffer);
    }
    
    /// <summary>Writes the specified subarray of Unicode characters to the standard output stream.</summary>
    /// <param name="buffer">An array of Unicode characters. </param>
    /// <param name="index">The starting position in <paramref name="buffer" />. </param>
    /// <param name="count">The number of characters to write. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="buffer" /> is null. </exception>
    /// <exception cref="T:System.ArgumentOutOfRangeException">
    ///  <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
    /// <exception cref="T:System.ArgumentException">
    ///  <paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />. </exception>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(char[] buffer, int index, int count)
    {
      System.Console.Write(buffer, index, count);
    }
    
    /// <summary>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(double value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the text representation of the specified <see cref="T:System.Decimal" /> value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(decimal value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(float value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(int value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(uint value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(long value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(ulong value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the text representation of the specified object to the standard output stream.</summary>
    /// <param name="value">The value to write, or null. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(object value)
    {
      System.Console.Write(value);
    }
    
    /// <summary>Writes the specified string value to the standard output stream.</summary>
    /// <param name="value">The value to write. </param>
    /// <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
    /// <filterpriority>1</filterpriority>
    public void Write(string value)
    {
      System.Console.Write(value);
    }
  }
}
