//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrapperator.Wrappers.Reflection
{
  
  
  /// <summary>Describes an assembly's unique identity in full.</summary>
  public class AssemblyNameWrapper : Wrapperator.Interfaces.Reflection.IAssemblyName
  {
    
    public System.Reflection.AssemblyName _AssemblyName { get; private set; }

    
    internal AssemblyNameWrapper(System.Reflection.AssemblyName assemblyName)
    {
      _AssemblyName = assemblyName;
    }
    
    public string Name
    {
      get
      {
        return _AssemblyName.Name;
      }
      set
      {
        _AssemblyName.Name = value;
      }
    }
    
    public Wrapperator.Interfaces.IVersion Version
    {
      get
      {
        return new Wrapperator.Wrappers.VersionWrapper(_AssemblyName.Version);
      }
      set
      {
        _AssemblyName.Version = ((Wrapperator.Wrappers.VersionWrapper)(value))._Version;
      }
    }
    
    public System.Globalization.CultureInfo CultureInfo
    {
      get
      {
        return _AssemblyName.CultureInfo;
      }
      set
      {
        _AssemblyName.CultureInfo = value;
      }
    }
    
    public string CodeBase
    {
      get
      {
        return _AssemblyName.CodeBase;
      }
      set
      {
        _AssemblyName.CodeBase = value;
      }
    }
    
    public string EscapedCodeBase
    {
      get
      {
        return _AssemblyName.EscapedCodeBase;
      }
    }
    
    public System.Reflection.ProcessorArchitecture ProcessorArchitecture
    {
      get
      {
        return _AssemblyName.ProcessorArchitecture;
      }
      set
      {
        _AssemblyName.ProcessorArchitecture = value;
      }
    }
    
    public System.Reflection.AssemblyContentType ContentType
    {
      get
      {
        return _AssemblyName.ContentType;
      }
      set
      {
        _AssemblyName.ContentType = value;
      }
    }
    
    public System.Reflection.AssemblyNameFlags Flags
    {
      get
      {
        return _AssemblyName.Flags;
      }
      set
      {
        _AssemblyName.Flags = value;
      }
    }
    
    public System.Configuration.Assemblies.AssemblyHashAlgorithm HashAlgorithm
    {
      get
      {
        return _AssemblyName.HashAlgorithm;
      }
      set
      {
        _AssemblyName.HashAlgorithm = value;
      }
    }
    
    public System.Configuration.Assemblies.AssemblyVersionCompatibility VersionCompatibility
    {
      get
      {
        return _AssemblyName.VersionCompatibility;
      }
      set
      {
        _AssemblyName.VersionCompatibility = value;
      }
    }
    
    public System.Reflection.StrongNameKeyPair KeyPair
    {
      get
      {
        return _AssemblyName.KeyPair;
      }
      set
      {
        _AssemblyName.KeyPair = value;
      }
    }
    
    public string FullName
    {
      get
      {
        return _AssemblyName.FullName;
      }
    }
    
    /// <summary>Makes a copy of this <see cref="T:System.Reflection.AssemblyName" /> object.</summary>
    /// <returns>An object that is a copy of this <see cref="T:System.Reflection.AssemblyName" /> object.</returns>
    public object Clone()
    {
      return _AssemblyName.Clone();
    }
    
    /// <summary>Gets the public key of the assembly.</summary>
    /// <returns>A byte array that contains the public key of the assembly.</returns>
    /// <exception cref="T:System.Security.SecurityException">A public key was provided (for example, by using the <see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /> method), but no public key token was provided. </exception>
    public byte[] GetPublicKey()
    {
      return _AssemblyName.GetPublicKey();
    }
    
    /// <summary>Sets the public key identifying the assembly.</summary>
    /// <param name="publicKey">A byte array containing the public key of the assembly. </param>
    public void SetPublicKey(byte[] publicKey)
    {
      _AssemblyName.SetPublicKey(publicKey);
    }
    
    /// <summary>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</summary>
    /// <returns>A byte array that contains the public key token.</returns>
    public byte[] GetPublicKeyToken()
    {
      return _AssemblyName.GetPublicKeyToken();
    }
    
    /// <summary>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</summary>
    /// <param name="publicKeyToken">A byte array containing the public key token of the assembly. </param>
    public void SetPublicKeyToken(byte[] publicKeyToken)
    {
      _AssemblyName.SetPublicKeyToken(publicKeyToken);
    }
    
    /// <summary>Gets serialization information with all the data needed to recreate an instance of this AssemblyName.</summary>
    /// <param name="info">The object to be populated with serialization information. </param>
    /// <param name="context">The destination context of the serialization. </param>
    /// <exception cref="T:System.ArgumentNullException">
    ///  <paramref name="info" /> is null. </exception>
    public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    {
      _AssemblyName.GetObjectData(info, context);
    }
    
    /// <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and is called back by the deserialization event when deserialization is complete.</summary>
    /// <param name="sender">The source of the deserialization event. </param>
    public void OnDeserialization(object sender)
    {
      _AssemblyName.OnDeserialization(sender);
    }
  }
}
